[["index.html", "MCU ASIS Ubuntu 系統安裝指南 引言", " MCU ASIS Ubuntu 系統安裝指南 Chiawei Chen 2022-07-11 引言 本書會從虛擬環境的建立、安裝 Ubuntu、Ubuntu 環境設定、安裝 LAMP於 Ubuntu、安裝 Rstudio 與 RShiny 於Ubuntu…等，分章節介紹。 "],["大綱.html", "大綱", " 大綱 "],["關於我.html", "關於我", " 關於我 "],["intro.html", "Chapter 1 基礎建設", " Chapter 1 基礎建設 因為使用者的經驗、能力會有所差異與解決問題的能力，在接觸新的系統之前，最好還是先在虛擬機器上先運行過一次，確認沒問題之後再把操作搬到實體電腦上去，才不會遇到預料之外的問題。 本書所使用運行虛擬機器的軟體為 VirtualBox。 "],["事前準備.html", "1.1 事前準備", " 1.1 事前準備 在開始教學之前，確定你的環境要能上網存取網路上的資源。 再來是檢查自己的電腦可不可以運行 VirtualBox（或是其他可以運行虛擬機器的軟體），要運行虛擬機器通常都要去 BIOS 打開一個叫做 Virtualization Technology 的功能。 於附錄有講解怎麼從開機狀態的 Windows 10 系統進入 BIOS，進入之後把 VT 相關的設定都打開後重新啟動。 "],["安裝-virtualbox.html", "1.2 安裝 VirtualBox", " 1.2 安裝 VirtualBox 首先到 VirtualBox 官方網站的下載頁面，下載適合你電腦系統的安裝執行檔，假如是 Windows 系統就點擊 「Windows hosts」的下載連結，如果是其他作業系統就根據你的作業系統下載對應的檔案。 圖 1.1: www.virtualbox.org 的下載頁面 安裝的過程中只需使用預設的設定即可，預設設定做了安裝虛擬機器的驅動程式、關聯檔案…等等，正常安裝不需要變更它。 圖 1.2: virtualbox 安裝程式（安裝中） "],["於虛擬機器安裝作業系統.html", "1.3 於虛擬機器安裝作業系統", " 1.3 於虛擬機器安裝作業系統 在安裝完 VirtualBox 後，打開並不會有預先安裝好的作業系統，需要在 VirtualBox 內自行新增虛擬機器後，再將作業系統安裝至虛擬機器內；又或是匯入已經含有作業系統的虛擬機器（*.ova、*.ovf 格式）。 首先介紹 VirtualBox 的使用者介面: 圖 1.3: VirtualBox 的操作介面 如圖 1.3 所示，右邊主要功能圖示由左而右的功能分別是: 喜好設定: 設定 VirtualBox 的整體設定，像是軟體語言、虛擬機器預設存放位置…等等 匯入: 匯入虛擬機器檔案 (.ovf) 匯出: 匯出虛擬機器檔案 新增: 新增新的虛擬機器 加入: 加入已經存在的虛擬機器 1.3.1 新增 Ubuntu 作業系統設定 所以要新增新的虛擬機器是按「新增」。 這裡先點選「專家模式」，專家模式可以一併設定虛擬機器的所有設定。 圖 1.4: 建立虛擬機器，設定虛擬名稱與存放位置 記憶體大小根據每個人電腦的性能做調整，虛擬機器沒用來做什麼事最多4Gb (4 * 1024Mb) 就很夠用了。這裡要注意的一點是，虛擬機器的存放位置，當你要轉移虛擬機器時才不會找不到。 圖 1.5: 建立虛擬機器，設定記憶體大小與選擇系統 預設的虛擬機器存放位置位於使用者資料夾中的Virtual VMs資料夾，像我的使用者是qaz85，那虛擬機器就位於: C:\\Users\\qaz85\\VirtualBox VMs 從列程式碼輸出的硬碟配置，可以看到伺服器的磁碟配置是由兩個 1Tb 的硬碟組成，且用Raid-1 (映射模式) 將伺服器同時映射備份至另一個硬碟。 lsblk NAME MAJ:MIN RM SIZE RO TYPE MOUNTPOINT sdb 8:16 0 931.5G 0 disk ├─sdb2 8:18 0 852.5G 0 part ├─sdb3 8:19 0 32G 0 part ├─sdb1 8:17 0 512M 0 part └─isw_ecbbadhihd_Raid1 253:0 0 885G 0 dmraid ├─isw_ecbbadhihd_Raid1p1 253:1 0 512M 0 part /boot/efi ├─isw_ecbbadhihd_Raid1p2 253:2 0 852.5G 0 part / └─isw_ecbbadhihd_Raid1p3 253:3 0 32G 0 part [SWAP] sr0 11:0 1 1024M 0 rom sda 8:0 0 931.5G 0 disk ├─sda2 8:2 0 852.5G 0 part ├─sda3 8:3 0 32G 0 part ├─sda1 8:1 0 512M 0 part └─isw_ecbbadhihd_Raid1 253:0 0 885G 0 dmraid ├─isw_ecbbadhihd_Raid1p1 253:1 0 512M 0 part /boot/efi ├─isw_ecbbadhihd_Raid1p2 253:2 0 852.5G 0 part / └─isw_ecbbadhihd_Raid1p3 253:3 0 32G 0 part [SWAP] 所以這裡也選擇跟伺服器一樣的1000Gb做為系統硬碟，類型與版本記得設定為 Linux 與 Ubuntu 64位元 版本。完成之後點擊「建立」。 圖 1.6: 建立虛擬機器，完成建立 這裡我會選 VMDK 格式的原因是因為，如果要轉移虛擬機器檔案時，單一個檔案會輕易地超過 4Gb，而超過此上限得檔案在複製時，如果目的地的裝置格式不是 ntfs 的話，會沒有辦法複製。為了免去到時候分割虛擬機器的麻煩，我在這邊先選擇 VMDK 作為我虛擬機器的檔案格式。 這裡如果選擇「固定大小」會新增一個跟你設定的檔案大小一樣大的虛擬機器檔案，除非你的硬碟很大，否則不建議這麼做。 完成後，會在 Virtual Machine 的選單左邊看見剛剛新建的虛擬機器，不過此時的虛擬機器內還沒有作業系統。 為了要使用跟伺服器一樣的設定，需要再新增另一顆跟原本硬碟一樣大小的硬碟做鏡像備份。點選右邊橘色的齒輪「設定⚙」。 圖 1.7: 完成建立虛擬機器 在儲存裝置的「控制器：SATA」部分，點選硬碟圖案（有綠色加符號的）新增新的硬碟。 圖 1.8: 虛擬機器存放裝置設定 點選「建立」建立與第一顆硬碟條件一樣的硬碟。 圖 1.9: 虛擬機器，管理存放裝置 這次把硬碟取名為 MCU-ASIS_1 作為區分原本的硬碟與新增的硬碟。 圖 1.10: 虛擬機器新增硬碟 完成後，點擊「確定」儲存。 圖 1.11: 虛擬機器完成存放裝置設定 1.3.2 於 VirtualBox 安裝作業系統 在安裝作業系統之前，要先下載作業系統，因為目前的院伺服器系統是 Ubuntu、我自己的 VPS 也是 Ubuntu，而且我摸得比較熟的也是 Ubuntu，所以這裡我也以 Ubuntu作為我們伺服器主要的系統。 進到 Ubuntu 官方網站的下載介面，這次我們選擇伺服器版本（Ubuntu Server）代替以往的桌面版本（Ubuntu Desktop）。因為如果是伺服器，不需要圖形介面就可以管理了，相對於桌面版本也較節省伺服器資源。 圖 1.12: ubuntu.com 官方下載頁面 選擇「Option 2 - Manual server Installation」選項之後，按上面的綠色按鈕「Download Ubuntu Server 20.04.2 LTS」會跳轉到下載頁面，開始下載 Ubuntu 系統映像檔案 (*.iso)。 圖 1.13: ubuntu.com Ubuntu 伺服器版本下載 其他選項的簡易說明: Option 1 - Instant Ubuntu VMs: Multipass 是快速部屬虛擬機器的軟體，詳細說明可以看這裡，而這裡我們已經選用 VirtualBox 了所以不會用到 Option 2 - Manual server installation: 傳統的下載映像檔案 Option 3 - Automated server provisioning: 利用 MaaS (Metal-as-a-Service) 安裝虛擬機。MaaS是管理數台虛擬機器用的服務，並不局限於 Ubuntu，Windows、CentOS 與 ESXi都可以在上面部屬。 待下載完成後，點擊兩下開啟剛剛創建的「MCU-ASIS」虛擬機器，會跳出一個選擇啟動磁碟的訊息提示視窗，這裡我們點擊右下角的資料夾📁。 圖 1.14: 虛擬主機，選擇開機位置 按「加入」並選擇剛剛下載下來的映像檔案 (ubuntu-20.04.2-live-server-amd64.iso)。加入完成後按「選擇」，接著按「開始」掛載映像檔案至虛擬機器中開始安裝。 圖 1.15: 選擇映像檔案載入 1.3.2.1 語言 稍待 Ubuntu 作業系統映像檔載入後，安裝程式會跳出選擇語言的畫面，在這裡選擇適合你的語言。 圖 1.16: Ubuntu 安裝畫面，選擇系統語言 在安裝過程中使用方向鍵⬆️⬇️⬅️➡️（選擇）、Enter↪️（確認）與 Esc（返回）操控安裝程式介面。 1.3.2.2 鍵盤配置 這裡可以設定鍵盤的: Layout (布局): 鍵盤的語言 Variant (鍵位): 一般在台灣都是用 QWERTY 配置，詳細說明可以在這找到 圖 1.17: Ubuntu 安裝畫面，選擇鍵盤配置 1.3.2.3 網路連線 這裡可以設定 Ubuntu 的網路連線，預設是由 DHCP 設定，通常不用變更，如果這裡連線失敗，也可以等開機後再做設定。 圖 1.18: Ubuntu 安裝畫面，網路連線設定 1.3.2.4 Proxy 除非網路需要設定 proxy（代理伺服器），否則不需要設定。 圖 1.19: Ubuntu 安裝畫面，proxy 設定 1.3.2.5 鏡像 (Mirror) 同上，不需要特別設定 mirror (鏡像)，安裝程式會自動判斷選擇哪個地方的鏡像網址更新。 圖 1.20: Ubuntu 安裝畫面，套件鏡像位置設定 1.3.2.6 安裝程式更新 當 Ubuntu 在安裝過程中，如果有連上網路，安裝程式會偵測當前的安裝程式是否需要更新，如果出現了這個畫面代表安裝程式有新的版本，可以在安裝時順便更新，當然，也可以在系統安裝完後更新。 圖 1.21: Ubuntu 安裝畫面 1.3.2.7 系統空間配置 這裡選擇下面的「Custom storage layout」，因為伺服器硬碟不是使用尋常的設定。以下 Raid-1 相關的設定是參考 (Evangelou 2020) 的 Gist 翻譯成中文寫的。 圖 1.22: Ubuntu 安裝程式，磁碟配置導覽 如果選錯了、或是硬碟中有已經分割好的磁區也沒關係，從 AVAILABLE DEVICES 下面選擇硬碟 ➜ 「Reformat」 ➜ 「Reformat」，這會把硬碟格式化。 圖 1.23: Ubuntu 安裝程式，磁碟配置導覽 選擇第一個磁碟 ➜ 「Use As Boot Device」 當作開機磁碟 圖 1.24: Ubuntu 安裝程式，磁碟配置導覽 對第二個磁碟「VBOX_HARDDISK_VBdc8cc122-e9b43569」也做同樣的事情。 目前版本 20.04.2 live server 有個 bug，當你要新增為開機硬碟 (Boot Device) 時，要在建立其他三個分區 (/ 、 /boot 和 [SWAP])之前，先設定好，不然 1Mb 的 grub 分區會消失。(我只有從現過錯誤一次 2021.07.21) 接著為 / 、 /boot 和 [SWAP] 做分區。 /: 系統根目錄磁區 /boot: 開機磁區 [SWAP]: SWAP (記憶體置換空間) 主要功能是當記憶體滿載時，會把現在沒有用到的程序先放到 SWAP 中，空給目前正在運行的程式使用 首先為 /boot 分區，通常開機磁區 512 Mb ~ 1Gb 就很夠用了，看你喜好，這裡我選擇 1Gb。選擇第一個磁碟 ➜ 「Add GPT Partitation」，照下面的設定設定後，按「Create」。 Size: 1G Format: [ Leave unformatted ▾ ] 對第二顆硬碟做同樣的事。 圖 1.25: Ubuntu 安裝程式，磁碟配置導覽 再來是 [SWAP] 磁區，一般來說會用實體記憶體容量 ⨉ 2 作為 [SWAP] 磁區的容量，這裡我怕空間太少先用 32Gb。選擇第一個磁碟 ➜ 「Add GPT Partitation」，照下面的設定設定後，按「Create」。 Size: 32G Format: [ Leave unformatted ▾ ] 對第二顆硬碟做同樣的事。 圖 1.26: Ubuntu 安裝程式，磁碟配置導覽 最後才是系統硬碟 / ，系統硬碟使用 /boot 、[SWAP] 與 grub 剩下來的空間。選擇第一個磁碟 ➜ 「Add GPT Partitation」，照下面的設定設定後，按「Create」。 Size: 留空 預設為剩下硬碟的容量，正是我們所要的 Format: [ Leave unformatted ▾ ] 對第二顆硬碟做同樣的事。 圖 1.27: Ubuntu 安裝程式，磁碟配置導覽 接著設定 Raid-1。選取「[ Create software RAID (md) ▸ ]」，選取兩個「partition 2」建立 md0 softRaid 磁區 圖 1.28: Ubuntu 安裝程式，磁碟配置導覽 同上，選取「[ Create software RAID (md) ▸ ]」，選取兩個「partition 3」建立 md1 softRaid 磁區 同上，選取「[ Create software RAID (md) ▸ ]」，選取兩個「partition 4」建立 md2 softRaid 磁區 圖 1.29: Ubuntu 安裝程式，磁碟配置導覽 選擇 md0 (new) ➜ format ➜ Format: 選擇 ext4 格式 ➜ Mount: 掛載於 /boot ➜ 完成後選擇 Done 選擇 md1 (new) ➜ format ➜ Format: 選擇 swap 格式 ➜ 完成後選擇 Done 選擇 md2 (new) ➜ format ➜ Format: 選擇 ext4 格式 ➜ Mount: 掛載於 / ➜ 完成後選擇 Done 設定完成🎉，整體設定截圖: 圖 1.30: Ubuntu 安裝程式，磁碟配置導覽 截圖（續） 圖 1.31: Ubuntu 安裝程式，磁碟配置導覽 在最下面選擇「Done」，至下一步。 1.3.2.8 使用者設定 在這邊設定自己的使用者名稱與電腦名稱。 圖 1.32: Ubuntu 安裝程式，使用者設定 Your name: asis Your server’s name: asis01 Pick a username: asis Choose a password: asis Confirm your password: asis 1.3.2.9 OpenSSH 設定 [可跳過] OpenSSH 是使用 SSH 通訊協定來遠端連線電腦的工具。防止連線中被竊聽、劫持或是其他攻擊。如果沒有擁有 Github 帳號這裡可以先跳過，於第二章會重新介紹怎麼設定 OpenSSH 伺服器。 1.3.2.9.1 從 Github 匯入已經儲存的 public key 這裡將 Allow password authentication over SSH 取消打勾，經由 SSH 連線至虛擬機器時，關閉使用者密碼認證，改由 SSH key pairs 登入。 如果沒有持有 Github 帳號儲存的 public key，請把 Allow password authentication over SSH 打勾，待上傳完 public key 再把使用密碼登入關閉。 另外，我已經透過 Github 儲存過我的 public key 副本，所以這邊可以直接從 Github 匯入 public key。 圖 1.33: Ubuntu 安裝程式，導入 SSH 公鑰 如果這邊不匯入的話，也可以待稍後開機後再用指令 ssh-import-id-gh &lt;username&gt; 匯入。 點選「Yes」後開始匯入程序。 圖 1.34: Ubuntu 安裝程式，導入 SSH 公鑰 匯入成功後就能經由含有 Github 副本的 SSH key pairs 主機連線至虛擬機器 1.3.2.10 完成安裝 這個頁面是預覽 Ubuntu 安裝程式做過了什麼，都會記錄在這裡，通常不會有什麼問題所以可以不用理他，待安裝完成即可。 圖 1.35: Ubuntu 安裝程式，安裝紀錄 安裝完成後選擇「Reboot Now」重新啟動 圖 1.36: Ubuntu安裝程式，完成安裝 參考資料 "],["ubuntu-的基本設定.html", "Chapter 2 Ubuntu 的基本設定", " Chapter 2 Ubuntu 的基本設定 本章主要會說明如何透過遠端連線存取虛擬機器與虛擬機器基本設定。 "],["事前準備-1.html", "2.1 事前準備", " 2.1 事前準備 從這個章節開始會出現一些特殊前綴的方框（如下表）表示，不同的前綴代表不同種類的終端機，或是使用終端機的身份，請多多注意。 PS: powershell 指令前綴 dir $: 終端機指令前綴（一般使用者） ls -al #: 終端機指令前綴（超級使用者） sudo rm -rf ~/Downloads OUTPUT: 終端機輸出 total 12 drwxrwxr-x 3 kuaz kuaz 4096 Sep 22 02:11 ./ drwxr-x--- 15 kuaz kuaz 4096 Oct 10 22:30 ../ drwxrwxr-x 6 kuaz kuaz 4096 Oct 6 14:06 School/ "],["openssh.html", "2.2 OpenSSH", " 2.2 OpenSSH 前面第一章在安裝時，也有碰到 OpenSSH 伺服器設定的小節，不過那並不完整，是給已經擁有 ssh key pairs 的使用者看的。在這個小節會逐步解釋 OpenSSH 的使用方法，從 OpenSSH 客戶端安裝、產生 ssh key pairs 最後到連線。 2.2.1 概述 OpenSSH 是 SSH（Secure Shell）一個開源的版本。SSH 是一種透過 SSH 傳輸協定來管理系統、傳輸檔案的一個系統套件。它現在被廣泛的使用在各個資料中心與大企業中。 圖 2.1: SSH 傳輸協定驗證流程 圖片來源：https://www.ssh.com/academy/ssh 2.2.2 適合各個系統的連線流程 要連接到虛擬機器的 OpenSSH 伺服器之前，你需要有一個可以讓你連接的 OpenSSH 用戶端。 2.2.2.1 MacOS 或 其他 Unix-like 系統 如果你是 Linux 或是 MacOS 系統，通常都有內建 OpenSSH 用戶端，可以直接跳至以 Step 2 — 產生 ssh key pairs 的章節，但是 Windows 系統需要先安裝一些軟體，或是從 Windows 更新功能裡面啟用 OpenSSH 伺服器與用戶端，將於下一小節會解釋。 2.2.2.2 Windows 系統 Windows 用戶連線至 OpenSSH 伺服器的方法有很多種，方法如下: 已經擁有 SSH key pairs 的前提下，可以使用 SSH 通訊協定連線的軟體，如: PuTTY Chrome 瀏覽器的任何一個 SSH 擴充套件 優點: 很快，安裝完就能設定 SSH 連線 直接在 Windows 10 內啟動 OpenSSH 用戶端，透過內建的 PowerShell SSH 連線至虛擬主機。 優點: 與第一個方法差不多快 可搭配 Windows Terminal 客製化終端機主題（很好看） 不用安裝任何第三方軟體 在 Windows 10 內安裝 Windows 子系統 (Windows Subsystem for Linux; WSL)，然後直接在 Linux 環境透過 OpenSSH 連線至虛擬主機。 優點: 可以學習到很多東西， Linux 可以用的在 Windows 的 WSL 內都可以使用，操作可以照搬到 WSL 上面。 缺點: 安裝過程所需的時間會根據每個人的經驗有所差異，需要從頭開始設定 Linux。 在 Windows 要產生 ssh key pairs 有兩種辦法，第一種是經由內建的 OpenSSH Client 產生，另一種是經由 PuTTY 所附的工具產生（可以參考附錄的 PuTTY 介紹）。 Linux 的使用者可以使用套件管理程式安裝 openssh-server， 指令如下： sudo apt install openssh-server 2.2.3 Step 1 — 安裝 OpenSSH Client Windows 10 已經有內建在 Windows 的「應用程式與功能」內，預設是沒有安裝的。啟動流程如下: 點擊「開始」 打開「設定⚙」 選取「應用程式」 ➜ 「應用程式與功能」 ➜ 找到黑體字「程式與功能」，並點選下面的「選用功能」 在已安裝的篩選列上面篩選 ssh ，如果沒有，請在頁面頂端點選「新增功能」，然後: 找到「OpenSSH 用戶端」後，點選安裝 安裝完成後，你可以打開「命令提示字元」或是「PowerShell」輸入 ssh 來確認是否安裝完成。 ssh usage: ssh [-46AaCfGgKkMNnqsTtVvXxYy] [-B bind_interface] [-b bind_address] [-c cipher_spec] [-D [bind_address:]port] [-E log_file] [-e escape_char] [-F configfile] [-I pkcs11] [-i identity_file] [-J [user@]host[:port]] [-L address] [-l login_name] [-m mac_spec] [-O ctl_cmd] [-o option] [-p port] [-Q query_option] [-R address] [-S ctl_path] [-W host:port] [-w local_tun[:remote_tun]] destination [command] 2.2.4 Step 2 — 產生 ssh key pairs 接著，可以使用 ssh-keygen 指令產生 key pairs，加密方式有 dsa、ecdsa、ecdsa-sk、ed25519、ed25519-sk 與 rsa，預設的加密方式是 rsa ，詳細指令用法可以透過 ssh-keygen --help 指令查詢，這裡我們用最簡單的 ssh-keygen 指令。 ssh-keygen Windows 的用戶預設會把 key pair 儲存在 C:\\Users\\&lt;USERNAME&gt;\\.ssh\\ 的位置，而 Linux 的用戶會儲存在 ~/.ssh/ 的位置。 這裡是詢問你要不要把產生的 ssh key 重新命名，一般不會動到它的名字，按 Enter↩︎，接續下一步。 Generating public/private rsa key pair. Enter file in which to save the key (C:\\Users\\&lt;USERNAME&gt;/.ssh/id_rsa): 這一步再詢問你需不需要將 SSH key pairs 加密，如果加密了，每次連線都需要打密碼。如果不想設定密碼就留空按 Enter↩︎ 進入下一步。 Created directory &#39;C:\\Users\\&lt;USERNAME&gt;/.ssh&#39;. Enter passphrase (empty for no passphrase): Enter same passphrase again: 產生 Key 會順帶產生這個 Key 的指紋。 Your identification has been saved in C:\\Users\\&lt;USERNAME&gt;/.ssh/id_rsa. Your public key has been saved in C:\\Users\\&lt;USERNAME&gt;/.ssh/id_rsa.pub. The key fingerprint is: SHA256:8NE76AD294Tjze76pEPtvZgqaqw9OuCF7T8HWPo6fUc qaz85@DESKTOP-OH6HA84 The key&#39;s randomart image is: +---[RSA 3072]----+ | | | . | | o . . . | | . + o + . | | o + o S.+ | |.. = . =.E.. | |..o.o ..+.=. | | ..+++.o.=.o. | | o**++.=** .. | +----[SHA256]-----+ 產生完畢，儲存在 C:\\Users\\&lt;USERNAME&gt;\\.ssh\\id_rsa 的檔案是私鑰（private key），而另一個 id_rsa.pub 的檔案是公鑰（public key）。 當你遺失了遠端主機的 key pairs，你再也不能透過遠端存取有使用過該 key pairs 的主機，只能透過直接接觸那台主機來更新的 key pairs，所以要妥善保存。 2.2.5 Step 3 — 將新增的 key pairs 上傳至目的地主機 當你擁有了 Step 2 — 產生 ssh key pairs，接下來要把 public key 上傳至虛擬機器。另外公鑰給別人看到是沒問題的，前面第一章的 OpenSSH 設定 [可跳過] 就已經有出現過我的公鑰了，公鑰並不能用來產生私鑰，它是用來認證這個 key 是否跟你所持有的私鑰相呼應。 2.2.5.1 Linux 系統 如果你是的系統是 Linux 那指令會稍微短一些，上傳至遠端電腦的指令如下: ssh-copy-id -i ~/.ssh/id_ed25519.pub -p 22 asis@192.168.0.13 -i: i flag 代表的是你要上傳的 public key 檔案路徑 -p: p flag 則是目的地主機的 OpenSSH 伺服器的埠號 id_ed25519.pub 為我產生的其他的 key pair，如果你前面是照著我的步驟產生，這裡應該改為 id_rsa.pub 這裡的 asis 為第一章 使用者設定 的預設使用者 192.168.0.13 為我虛擬主機的 ip 位址，查詢 ip 位址可以先手動登入虛擬主機後，用 hostname -I 或是 ip addr show 指令查詢 完成後會提示你已經可以使用 ssh 連線 /usr/bin/ssh-copy-id: INFO: Source of key(s) to be installed: &quot;/home/kuaz/.ssh/id_ed25519.pub&quot; /usr/bin/ssh-copy-id: INFO: attempting to log in with the new key(s), to filter out any that are already installed /usr/bin/ssh-copy-id: INFO: 1 key(s) remain to be installed -- if you are prompted now it is to install the new keys Number of key(s) added: 1 Now try logging into the machine, with: &quot;ssh -p &#39;22&#39; &#39;asis@192.168.0.13&#39;&quot; and check to make sure that only the key(s) you wanted were added. 如果你是 Windows 的使用者也不用擔心多複雜，一樣一行指令就能搞定，這裡我是參考(Christopher 2020)的教學，指令如下: cat $env:USERPROFILE\\.ssh\\id_rsa.pub | ssh asis@192.168.0.13 &quot;cat &gt;&gt; ~/.ssh/authorized_keys&quot; 這裡的 $env:USERPROFILE 為 Windows 內建環境變數，會根據現在的使用者變更，如果我的使用者名稱為 qaz855175b 那 $env:USERPROFILE 對應的路徑就為 C:\\Users\\qaz855175b\\，當然你可以直接把指令的 public key 路徑替換為 C:\\Users\\qaz855175b\\.ssh\\id_rsa.pub id_rsa.pub 為產生的 public key 預設名稱 這裡的 asis 為第一章 使用者設定 的預設使用者 192.168.0.13 為我虛擬主機的 ip 位址，查詢 ip 位址可以先手動登入虛擬主機後，用 hostname -I 或是 ip addr show 指令查詢 其實 Linux 的 ssh-copy-id、和第一章的從 Github 匯入 public key ssh-import-id-gh 與這裡的 cat file &gt;&gt; ~/.ssh/authorized_keys 都是在做同一件事情，把 public key 貼到遠端伺服器的使用者的 authorized_keys 檔案裡面。 接著按 Enter↩︎，跳出輸入密碼提示，這裡輸入預設的使用者密碼 asis asis@192.168.0.13&#39;s password: 輸入完後雖然沒有任何提示訊息，但其實已經可以使用 ssh 連線至遠端主機啦～ 2.2.6 Step 4 — 測試 SSH 連線，使用 SSH 連線至遠端主機 最後，使用 ssh 指令連接至遠端主機。 使用 OpenSSH Client 產生的 pair keys 可以直接使用這個方法連線。這裡介紹幾個常常與 ssh 一起出現的 flag : -v: verbose，顯示連接時更詳細的訊息，除錯時常用 -p: port;，遠端伺服器的埠號 -i: 手動指定私鑰位置 flag 通常會在指令後面隨後出現，flag前面會插入 -，而 flag 後面有時會需要加入詳細的設定，有時不用。flag 與 flag 之間用空格隔開，詳細指令的使用方法可以在 Linux 系統用 man &lt;指令名稱&gt; 查詢 假如我們要看連線的詳細訊息，且指定伺服器 port 為 60000與指定 private key 檔案位址等等，組合起來就是: ssh -v -p 60000 -i ~/.ssh/id_rsa asis@192.168.0.13 目前不需要加上任何 flag，連線指令為： ssh asis@192.168.0.13 一樣地，asis 是使用者名稱，而192.168.0.13 是 OpenSSH 伺服器的 ip 位置，輸入完後按 Enter↩︎。 這邊打 yes 即可，確認連接目的地沒有錯之後，會把 fingerprint 寫入 ~/.ssh/known_hosts 中，以後不再詢問。 The authenticity of host &#39;192.168.0.13 (192.168.0.13)&#39; can&#39;t be established. ECDSA key fingerprint is SHA256:/HoocrLXe63zycdlmkh/+U3RuUfkawNq/xA0gTJmqmM. Are you sure you want to continue connecting (yes/no/[fingerprint])? 這裡不用指定 private key 的原因是因為，當你用 ssh 連線至目的地伺服器且你沒有指定認證檔案（私鑰）時，ssh 會一個 key 一個 key 拿去問伺服器這個 key 可不可以使用。 連接成功! 圖 2.2: Windows Terminal 下的 SSH 連接成功畫面 測試完確認沒問題就可以把虛擬機晾在一旁了～ 圖 2.3: VirtualBox 的虛擬主機終端機畫面 2.2.7 Step 5 — 使遠端的 OpenSSH 伺服器更加安全 [可跳過] 2.2.7.1 變更 SSH 伺服器預設的埠號 sudo vim /etc/ssh/sshd_config 將 #Port 22 取消註解，並把 22 改成其他介於 1-65535 之間的數字。 # $OpenBSD: sshd_config,v 1.103 2018/04/09 20:41:22 tj Exp $ # This is the sshd server system-wide configuration file. See # sshd_config(5) for more information. # This sshd was compiled with PATH=/usr/bin:/bin:/usr/sbin:/sbin # The strategy used for options in the default sshd_config shipped with # OpenSSH is to specify options with their default value where # possible, but leave them commented. Uncommented options override the # default value. Include /etc/ssh/sshd_config.d/*.conf Port 60000 #AddressFamily any #ListenAddress 0.0.0.0 #ListenAddress :: 2.2.7.2 關閉密碼驗證 將 PasswordAuthentication（以密碼驗證）設為 no。使用 SSH 連線時，如果沒有指定 SSH key pair，如果 OpenSSH 伺服器的設定沒有關閉，接著會要求你輸入使用者密碼以密碼驗證。通常這個設定會開啟是因為要Step 3 — 將新增的 key pairs 上傳至目的地主機。 PasswordAuthentication no 當然如果密碼驗證為 no，且同時遺失 SSH 的 pair key 時，你就無法以 SSH 連線至遠端主機，需要實際的使用圖形介面操作虛擬機器。 2.2.7.3 關閉遠端 root 登入 避免 root 登入可以使系統避免過大的權限暴露。 PermitRootLogin no 2.2.7.4 限制能使用 SSH 連線的使用者 只允許特定的使用者使用 SSH 連線可大大降低風險。 AllowUsers asis 2.2.7.5 關閉無密碼的使用者使用 SSH 將沒有密碼就可以登入的使用者撤銷 SSH 連線的權限。 PermitEmptyPasswords no 2.2.8 Step 6 — 測試 sshd_config 是否有效 -t 旗標可以測試 SSH 的設定是否有效，可以避免一些錯字造成的錯誤。 sudo sshd -t 將系統上的 SSH daemon 重新啟動，重新啟動 SSH 服務。 sudo systemctl restart sshd 確認 SSH 服務正常運行，沒有出現錯誤。 sudo systemctl status sshd ● ssh.service - OpenBSD Secure Shell server Loaded: loaded (/lib/systemd/system/ssh.service; enabled; vendor preset: enabled) Active: active (running) since Sun 2021-08-15 16:08:55 UTC; 19h ago Docs: man:sshd(8) man:sshd_config(5) Process: 850 ExecStartPre=/usr/sbin/sshd -t (code=exited, status=0/SUCCESS) Main PID: 893 (sshd) Tasks: 1 (limit: 4617) Memory: 5.4M CGroup: /system.slice/ssh.service └─893 sshd: /usr/sbin/sshd -D [listener] 0 of 10-100 startups Aug 15 16:08:54 asis01 systemd[1]: Starting OpenBSD Secure Shell server... Aug 15 16:08:55 asis01 sshd[893]: Server listening on 0.0.0.0 port 60000. Aug 15 16:08:55 asis01 sshd[893]: Server listening on :: port 60000. Aug 15 16:08:55 asis01 systemd[1]: Started OpenBSD Secure Shell server. 最後指令 exit 斷開連線，再重新測試 ssh 遠端連線至伺服器，使用公鑰與私鑰驗證登入。 ssh -p 60000 asis@192.168.0.13 Welcome to Ubuntu 20.04.2 LTS (GNU/Linux 5.4.0-81-generic x86_64) * Documentation: https://help.ubuntu.com * Management: https://landscape.canonical.com * Support: https://ubuntu.com/advantage System information as of Mon 16 Aug 2021 12:32:20 PM UTC System load: 0.0 Usage of /: 0.7% of 974.32GB Memory usage: 5% Swap usage: 0% Processes: 124 Users logged in: 0 IPv4 address for enp0s3: 192.168.0.13 IPv6 address for enp0s3: fd00:1cab:c0bb:acc2:a00:27ff:fed3:8136 * Super-optimized for small spaces - read how we shrank the memory footprint of MicroK8s to make it the smallest full K8s around. https://ubuntu.com/blog/microk8s-memory-optimisation 0 updates can be applied immediately. Last login: Mon Aug 16 12:31:35 2021 from 192.168.0.11 連線成功～🖼 參考資料 "],["apt.html", "2.3 APT", " 2.3 APT 在 Ubuntu 上安裝任何程式大多都是用 APT (Advanced Packaging Tools) 安裝，這裡有兩個指令，用 &amp;&amp; 串接在一起: sudo apt update &amp;&amp; sudo apt upgrade -y apt update: 更新可安裝的套件列表或版本 apt upgrade: 安裝程式 &amp;&amp;: &amp;&amp; 之前的指令執行成功才會接續執行 &amp;&amp; 後面的指令 -y, --yes, --assume-yes: 自動對安裝提示回答 yes，安裝時會提示是否確認要安裝該軟體，因為我們清楚自己在做什麼為了方便而把提示關掉 "],["ufw.html", "2.4 UFW", " 2.4 UFW UFW（Uncomplicated Firewall）是預設在 Ubuntu 系統上的防火牆，這裡先為了 OpenSSH 伺服器而打開埠號 60000。 首先用 status 查詢 UFW 的狀態，這裡需要輸入超級使用者 (sudo) 的密碼。 sudo ufw status 看來預設的 UFW 是關閉的 Status: inactive 接著用 systemctl 打開防火牆 sudo systemctl enable ufw 查詢防火牆狀態 sudo ufw status Status: active 允許埠號 60000 從任何地方連入 sudo ufw allow 60000 查詢防火牆狀態 sudo ufw status 目前只有兩條規則，分別是 從任何地方連入埠號 60000 與 ipv6 從任何地方連入埠號 60000 Status: active To Action From -- ------ ---- 60000 ALLOW Anywhere 60000 (v6) ALLOW Anywhere (v6) "],["lamp-程式集.html", "Chapter 3 LAMP 程式集", " Chapter 3 LAMP 程式集 LAMP 是由 4 個單字開頭的字組成的詞。 LAMP 讓你可以在一台系統為 Linux 的電腦上，用 Apache 架設網站伺服器，其中資料儲存在 MySQL 裡面，最後用 PHP 執行動態的網站。 這章會教你怎麼安裝 LAMP 程式集。 "],["事前準備-2.html", "3.1 事前準備", " 3.1 事前準備 在安裝軟體之前，你需要有一個可以執行 sudo 指令的使用者。 如果你是照著先前的教學做的話，這個使用者為安裝時的預設使用者 asis。 "],["apache.html", "3.2 Apache", " 3.2 Apache Apache HTTP Server（簡稱 Apache），是一個開放原始碼的程式，被用來當作網頁的伺服器，是目前流行的網頁伺服器之一。 3.2.1 概述 本章節會講述 Apache 網頁伺服器的安裝與防火牆的安全性設定。 3.2.2 Step 1 — 安裝 Apache 首先先更新套件管理程式（APT）的來源： sudo apt update 確認是否是我們要安裝的 Apache 版本 sudo apt info apache2 Package: apache2 Version: 2.4.41-4ubuntu3.4 Priority: optional Section: web Origin: Ubuntu Maintainer: Ubuntu Developers &lt;ubuntu-devel-discuss@lists.ubuntu.com&gt; Original-Maintainer: Debian Apache Maintainers &lt;debian-apache@lists.debian.org&gt; Bugs: https://bugs.launchpad.net/ubuntu/+filebug Installed-Size: 542 kB Provides: httpd, httpd-cgi Pre-Depends: dpkg (&gt;= 1.17.14) Depends: apache2-bin (= 2.4.41-4ubuntu3.4), apache2-data (= 2.4.41-4ubuntu3.4), apache2-utils (= 2.4.41-4ubuntu3.4), lsb-base, mime-support, perl:any, procps Recommends: ssl-cert Suggests: apache2-doc, apache2-suexec-pristine | apache2-suexec-custom, www-browser, ufw Conflicts: apache2.2-bin, apache2.2-common Breaks: libapache2-mod-proxy-uwsgi (&lt;&lt; 2.4.33) Replaces: apache2.2-bin, apache2.2-common, libapache2-mod-proxy-uwsgi (&lt;&lt; 2.4.33) Homepage: https://httpd.apache.org/ Task: lamp-server Download-Size: 95.5 kB APT-Sources: http://tw.archive.ubuntu.com/ubuntu focal-updates/main amd64 Packages Description: Apache HTTP Server The Apache HTTP Server Project&#39;s goal is to build a secure, efficient and extensible HTTP server as standards-compliant open source software. The result has long been the number one web server on the Internet. . Installing this package results in a full installation, including the configuration files, init scripts and support scripts. 可以從套件的描述看到，確實是我們要的 Apache HTTP Server。接著進行安裝 Apache2。 sudo apt install apache2 Reading package lists... Done Building dependency tree Reading state information... Done The following additional packages will be installed: apache2-bin apache2-data apache2-utils libapr1 libaprutil1 libaprutil1-dbd-sqlite3 libaprutil1-ldap libjansson4 liblua5.2-0 ssl-cert Suggested packages: apache2-doc apache2-suexec-pristine | apache2-suexec-custom www-browser openssl-blacklist The following NEW packages will be installed: apache2 apache2-bin apache2-data apache2-utils libapr1 libaprutil1 libaprutil1-dbd-sqlite3 libaprutil1-ldap libjansson4 liblua5.2-0 ssl-cert 0 upgraded, 11 newly installed, 0 to remove and 0 not upgraded. Need to get 1,865 kB of archives. After this operation, 8,083 kB of additional disk space will be used. Do you want to continue? [Y/n] 這裡用鍵盤輸入 y 後按 Enter↩︎ 送出。 也可以在安裝時加上 --yes 略過確認安裝提示。 sudo apt install apache2 --yes 3.2.3 Step 2 — 調整防火牆 UFW 設定 有些程式會自動把設定檔加入 UFW 中，這樣就可以透過設定檔啟用/關閉設定防火牆允許的埠號，不用再特別記下該軟體的設定，像是 Apache 就是其中之一。 透過指令顯示有什麼可用的應用程式設定檔。 sudo ufw app list 下列是目前可用的設定檔： Available applications: Apache Apache Full Apache Secure OpenSSH Apache：會在防火牆新增一個允許從任何地方連線至埠號 80 的規則。 Apache Full：會在防火牆新增一個允許從任何地方連線至埠號 80 與埠號 443 的規則。 Apache Secure：在防火牆新增一個允許從任何地方連線至埠號 443 的規則。 使用方式很簡單，跟允許埠號時的指令一樣，把埠號改成設定檔名稱即可。 sudo ufw allow &quot;Apache&quot; Rule added Rule added (v6) 確認剛才有沒有新增成功： sudo ufw status Status: active To Action From -- ------ ---- 60000 ALLOW Anywhere Apache ALLOW Anywhere 60000 (v6) ALLOW Anywhere (v6) Apache (v6) ALLOW Anywhere (v6) 接著可以透過瀏覽器連線到下列網址： http://&lt;虛擬主機的 ip 位址&gt;/ 圖 3.1: Apache 安裝後，預設的首頁 忘記怎麼找 ip 可以用下列三種方法找到： ip show addr 1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000 link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00 inet 127.0.0.1/8 scope host lo valid_lft forever preferred_lft forever inet6 ::1/128 scope host valid_lft forever preferred_lft forever 2: enp0s3: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc fq_codel state UP group default qlen 1000 link/ether 08:00:27:59:13:f9 brd ff:ff:ff:ff:ff:ff inet 192.168.0.14/24 brd 192.168.0.255 scope global dynamic enp0s3 valid_lft 315329303sec preferred_lft 315329303sec inet6 fd00:1cab:c0bb:acc2:a00:27ff:fe59:13f9/64 scope global dynamic mngtmpaddr noprefixroute valid_lft 535427sec preferred_lft 401570sec inet6 fe80::a00:27ff:fe59:13f9/64 scope link valid_lft forever preferred_lft forever 網路介面卡 enp0s3 上面的 inet 後面的數字就是 IP hostname -I 192.168.0.14 fd00:1cab:c0bb:acc2:a00:27ff:fe59:13f9 curl ifconfig.me XXX.XXX.XXX.XXX 注意：這是對從你的區域網路連線到對外的網路 ip，如果你不知道是什麼，用方法 1 跟 2 代替。 "],["mysql.html", "3.3 MySQL", " 3.3 MySQL MySQL（讀作 My-S-Q-L）因為其效能高、成本低、可信賴的原因，被廣大企業所使用，目前也是最受歡迎的開放原始碼資料庫系統。 3.3.1 概述 這個小節會說明怎麼安裝 MySQL，與做簡易的安裝後設定。 3.3.2 Step 1 — 安裝 MySQL 首先，透過 Apt 安裝 MySQL： sudo apt install mysql-server -y 3.3.3 Step 2 — 設定 MySQL 指令 mysql_secure_installation 會做以下幾件事（詳細的說明可以在這裡找到）： 你可以設定 root 帳號的密碼。 你可以移除 root 帳號預設可以從任何地方連線至本機的設定。 你可以移除沒有名稱的匿名帳號（anonymous-user）詳細說明可以從這裡找到。 你可以移除預設的 test 資料庫（這個資料庫任何人都可以存取，甚至是匿名帳號），和任何使用者名稱是 test_ 開頭的使用者帳號可以存取任何資料庫的權限。 安裝完成後，打下面這段指令啟動 MySQL 安全安裝程序。 sudo mysql_secure_installation 建議這裡選 No。如果這裡選了 Yes，那之後只要是創建使用者都會要求你使用密碼強度很高的密碼，因為要設定複雜的密碼，所以不適合給學生使用。 Securing the MySQL server deployment. Connecting to MySQL using a blank password. VALIDATE PASSWORD COMPONENT can be used to test passwords and improve security. It checks the strength of password and allows the users to set only those passwords which are secure enough. Would you like to setup VALIDATE PASSWORD component? Press y|Y for Yes, any other key for No: No 變更 root 密碼，這裡輸入 Yes Change the password for root ? ((Press y|Y for Yes, any other key for No) : Yes 這個階段是問你要不要刪除匿名帳號，輸入 Yes By default, a MySQL installation has an anonymous user, allowing anyone to log into MySQL without having to have a user account created for them. This is intended only for testing, and to make the installation go a bit smoother. You should remove them before moving into a production environment. Remove anonymous users? (Press y|Y for Yes, any other key for No) : Y 這裏是問你要不要讓 root 帳號可以從任何地方連入，這裡當然是選 No Normally, root should only be allowed to connect from &#39;localhost&#39;. This ensures that someone cannot guess at the root password from the network. Disallow root login remotely? (Press y|Y for Yes, any other key for No) : Y 如果選擇Yes，會將使用者帳號的可連線網域設為 ％，代表任何地方都可以連入的意思 - Dropping test database... Success. - Removing privileges on test database... Success. Reloading the privilege tables will ensure that all changes made so far will take effect immediately. Reload privilege tables now? (Press y|Y for Yes, any other key for No) : Y Success. All done! 最後使用指令測試 MySQL 連線： mysql -u root -p --user, -u：使用者帳號 --password, -p：使用者密碼 "],["php.html", "3.4 PHP", " 3.4 PHP PHP（Hypertext PreProcessor，超文字預處理器），允許網頁開發人員開發動態網頁，截至2021年被世界上至少70%以上的網頁所使用。 3.4.1 概述 在本小節會說明怎麼安裝 PHP 與 PHP 與 MySQL 溝通的插件。 3.4.2 Step 1 — 安裝 php &amp; php-mysql 插件 先確認 php 是不是我們要安裝的版本 sudo apt info php 可以看到，目前 php 的依賴套件是 php7.4，代表將安裝的版本為 php7.4 Package: php Version: 2:7.4+75 Priority: optional Section: php Source: php-defaults (75) Origin: Ubuntu Maintainer: Ubuntu Developers &lt;ubuntu-devel-discuss@lists.ubuntu.com&gt; Original-Maintainer: Debian PHP Maintainers &lt;team+pkg-php@tracker.debian.org&gt; Bugs: https://bugs.launchpad.net/ubuntu/+filebug Installed-Size: 13.3 kB Depends: php7.4 Download-Size: 2,712 B APT-Sources: http://tw.archive.ubuntu.com/ubuntu focal/main amd64 Packages Description: server-side, HTML-embedded scripting language (default) PHP (recursive acronym for PHP: Hypertext Preprocessor) is a widely-used open source general-purpose scripting language that is especially suited for web development and can be embedded into HTML. . This package is a dependency package, which depends on latest stable PHP version (currently 7.4). 接著，我們再查詢一次 php7.4 會安裝什麼東西 sudo apt info php7.4 這裡可以看到 php7.4 安裝了會安裝一些使 php7.4 順利運作的依賴套件，像是 libapache2-mod-php7.4、php7.4-fpm、php7.4-cgi 與 php7.4-common Package: php7.4 Version: 7.4.3-4ubuntu2.5 Priority: optional Section: php Origin: Ubuntu Maintainer: Ubuntu Developers &lt;ubuntu-devel-discuss@lists.ubuntu.com&gt; Original-Maintainer: Debian PHP Maintainers &lt;team+pkg-php@tracker.debian.org&gt; Bugs: https://bugs.launchpad.net/ubuntu/+filebug Installed-Size: 73.7 kB Provides: php Depends: libapache2-mod-php7.4 | php7.4-fpm | php7.4-cgi, php7.4-common Homepage: http://www.php.net/ Download-Size: 9,244 B APT-Sources: http://tw.archive.ubuntu.com/ubuntu focal-updates/main amd64 Packages Description: server-side, HTML-embedded scripting language (metapackage) This package is a metapackage that, when installed, guarantees that you have at least one of the four server-side versions of the PHP interpreter installed. Removing this package won&#39;t remove PHP from your system, however it may remove other packages that depend on this one. . PHP (recursive acronym for PHP: Hypertext Preprocessor) is a widely-used open source general-purpose scripting language that is especially suited for web development and can be embedded into HTML. 一樣地，這裡也用相同的指令查詢 php-mysql 套件 sudo apt info php-mysql 因為 php 已經有 php-common 依賴的，所以待會兩個套件一起安裝時，只會安裝一個 php-common Package: php-mysql Version: 2:7.4+75 Priority: optional Section: php Source: php-defaults (75) Origin: Ubuntu Maintainer: Ubuntu Developers &lt;ubuntu-devel-discuss@lists.ubuntu.com&gt; Original-Maintainer: Debian PHP Maintainers &lt;team+pkg-php@tracker.debian.org&gt; Bugs: https://bugs.launchpad.net/ubuntu/+filebug Installed-Size: 13.3 kB Depends: php-common, php7.4-mysql Task: lamp-server Download-Size: 2,000 B APT-Sources: http://tw.archive.ubuntu.com/ubuntu focal/main amd64 Packages Description: MySQL module for PHP [default] This package provides a MySQL module for PHP. . PHP (recursive acronym for PHP: Hypertext Preprocessor) is a widely-used open source general-purpose scripting language that is especially suited for web development and can be embedded into HTML. . This package is a dependency package, which depends on Debian&#39;s default PHP version (currently 7.4). 確認完我們要安裝的版本是否正確後，用套件管理程式 apt 安裝套件。 sudo apt install php php-mysql --yes 確認 php 是否安裝完成，可以用 which 指令確認： which php 當系統中有安裝複數個版本的 php 時，php 執行檔的位置可能會有所不同。同樣地在第 5 章設置 Python 3 環境時也會遇到。 /usr/bin/php 確認剛才安裝的 php 版本： php --version PHP 7.4.3 (cli) (built: Jul 5 2021 15:13:35) ( NTS ) Copyright (c) The PHP Group Zend Engine v3.4.0, Copyright (c) Zend Technologies with Zend OPcache v7.4.3, Copyright (c), by Zend Technologies 3.4.3 Step 2 — 建立虛擬網站 虛擬網站（Virtual Host）可以讓你在一台電腦同時架設多個網站，擁有不同的域名。 首先，於 apache2 的設定資料夾中，新建一個叫做 asis.conf 的設定檔： sudo vim /etc/apache2/sites-available/asis.conf 寫入測試用的設定 /etc/apache2/sites-available/asis.conf &lt;VirtualHost *:80&gt; ServerAdmin webmaster@localhost DocumentRoot /var/www/asis ErrorLog ${APACHE_LOG_DIR}/error.log CustomLog ${APACHE_LOG_DIR}/access.log combined &lt;/VirtualHost&gt; ServerAdmin：現在這個變數已經被棄用了，在 Apache 先前的版本當伺服器出錯時會顯示聯絡管理員的方式。而現階段版本還是有點用的，你可以在 PHP 中呼叫 $_SERVER['SERVER_ADMIN'] 變數會顯示 ServerAdmin 所設定的 Email。 DocumentRoot：網站的根目錄 ErrorLog：錯誤訊息路徑 CustomLog：設定 Log 的檔案名稱與格式，詳細說明在此 透過 list 指令可以看到，資料夾的擁有者是 root。 我們在安裝 Apache2 的部分從 http://&lt;虛擬主機的 ip 地址&gt;/ 看到的就是位於 /var/www/html/ 中的首頁，接下來我們要刪除 Apache2 預設的設定，並測試自己建立的虛擬網站（VirtualHost）。 ls -al /var/www/ total 12 drwxr-xr-x 3 root root 4096 Sep 1 06:51 ./ drwxr-xr-x 14 root root 4096 Sep 1 06:51 ../ drwxr-xr-x 2 root root 4096 Sep 1 06:51 html/ 一樣地，以同樣地方法建立 asis 資料夾 sudo mkdir /var/www/asis 產生一個測試用的首頁 sudo vim /var/www/asis/index.html /var/www/asis/index.html &lt;!DOCTYPE html&gt; &lt;html lang=&quot;zh-TW&quot;&gt; &lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt; &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt; &lt;title&gt;Apache VirtualHost config test&lt;/title&gt; &lt;/head&gt; &lt;body&gt; &lt;h1&gt;成功!&lt;/h1&gt; &lt;p&gt;您的 Apache2 虛擬網站的設定順利運作中。&lt;/p&gt; &lt;/body&gt; &lt;/html&gt; 使用 a2dissite 指令關閉預設的設定檔（有興趣可以看一下預設的設定檔 000-default.conf，有助於了解設定檔案怎麼編寫） sudo a2dissite 000-default.conf Site 000-default disabled. To activate the new configuration, you need to run: systemctl reload apache2 接著，啟用剛才創立的設定檔 asis.conf sudo a2ensite asis.conf 重新讀取剛才變更的設定，使新的設定生效 sudo systemctl reload apache2 接著至瀏覽器打上虛擬機器的 ip 位址 http://&lt;虛擬主機的 ip 地址&gt;/ 圖 3.2: Apache2 測試虛擬網站設定 或是直接在終端機中使用指令 curl 測試 asis.conf 設定檔： curl http://&lt;虛擬主機的 ip 地址&gt;/ &lt;!DOCTYPE html&gt; &lt;html lang=&quot;zh-TW&quot;&gt; &lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt; &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt; &lt;title&gt;Apache VirtualHost config test&lt;/title&gt; &lt;/head&gt; &lt;body&gt; &lt;h1&gt;成功!&lt;/h1&gt; &lt;p&gt;您的 Apache2 虛擬網站的設定順利運作中。&lt;/p&gt; &lt;/body&gt; &lt;/html&gt; "],["phpmyadmin.html", "3.5 phpMyAdmin", " 3.5 phpMyAdmin phpMyAdmin 是一個以 PHP 為基礎撰寫的一個軟體，可以讓使用者以簡易的方式新增、查詢、修改、刪除資料庫裡面的紀錄。 3.5.1 概述 本小節會說明怎麼安裝 phpMyAdmin 與基礎的安全性設定。 3.5.2 Step 1 — 安裝 phpMyAdmin 一樣地，確認 phpmyadmin 的版本 sudo apt info phpmyadmin Package: phpmyadmin Version: 4:4.9.5+dfsg1-2 Priority: optional Section: universe/web Origin: Ubuntu Maintainer: Ubuntu Developers &lt;ubuntu-devel-discuss@lists.ubuntu.com&gt; Original-Maintainer: phpMyAdmin Packaging Team &lt;team+phpmyadmin@tracker.debian.org&gt; Bugs: https://bugs.launchpad.net/ubuntu/+filebug Installed-Size: 27.2 MB Depends: php, php-cli, php-mysql, php-json, php-mbstring, php-xml, debconf (&gt;= 0.5) | debconf-2.0, lib js-sphinxdoc (&gt;= 1.0), sensible-utils, dbconfig-mysql | dbconfig-no-thanks | dbconfig-common (&lt;&lt; 2.0.0 ), php-phpseclib (&gt;= 2.0), php-common, php-phpmyadmin-sql-parser (&gt;= 4.3.2), php-phpmyadmin-sql-parser (&lt;&lt; 5~~), php-phpmyadmin-motranslator (&gt;= 5.0), php-phpmyadmin-motranslator (&lt;&lt; 6~~), php-phpmyadmin- shapefile (&gt;= 2.0), php-phpmyadmin-shapefile (&lt;&lt; 3~~), php-phpseclib (&lt;&lt; 3~~), php-google-recaptcha (&gt; = 1.1), php-google-recaptcha (&lt;&lt; 2~~), php-psr-container (&gt;= 1.0), php-psr-container (&lt;&lt; 2~~), php-twi g (&gt;= 2.9), php-twig (&lt;&lt; 3~~), php-twig-extensions (&gt;= 1.5.1), php-twig-extensions (&lt;&lt; 1.6~~), php-sym fony-expression-language, libjs-openlayers, ucf (&gt;= 0.28) Recommends: apache2 | lighttpd | httpd, php-curl, php-gd, php-bz2, php-zip, php-tcpdf Suggests: default-mysql-server | virtual-mysql-server, www-browser, php-recode, php-opcache, php-gd2, php-pragmarx-google2fa, php-bacon-qr-code, php-samyoul-u2f-php-server Homepage: https://www.phpmyadmin.net/ Download-Size: 4,426 kB [...] 確認完畢後安裝 sudo apt install phpmyadmin --yes 這裏用空白鍵勾選 apache2 使中括號中變成星號 * 圖 3.3: phpMyAdmin 安裝導覽 這裏選擇 Yes 即可除非你想對 phpmyadmin 做更詳細的設定 圖 3.4: phpMyAdmin 安裝導覽 留空會自動產生供 phpmyadmin 連線至 MySQL 用的密碼，所以這裡直接按 Ok 圖 3.5: phpMyAdmin 安裝導覽 當出現此錯誤時不用太慌張，是因為安裝 MySQL 時，有開啟 Validate Password 插件導致的，只需要透過下列指令暫時關閉即可。 圖 3.6: phpMyAdmin 安裝導覽，錯誤訊息 以 root 登入資料庫 mysql -u root -p 解除安裝插件 valid password uninstall component &#39;file://component_valid_password&#39;; exit; 在安裝一次 phpmyadmin sudo apt install phpmyadmin --yes mysql -u root -p 將 valid password 裝回去 install component &#39;file://component_valid_password&#39; exit; 啟動 phpMyAdmin 的依賴插件 sudo phpenmod mbstring 重新啟動 Apache2 sudo systemctl restart apache2 從網站進入 phpMyAdmin 操作介面 http://&lt;虛擬主機的 ip 地址&gt;/phpmyadmin/ 如果找不到是正常的（如下圖），在 Ubuntu 20.04 安裝 phpMyAdmin 時，沒有正確的設定到 phpMyAdmin。 可以參考這裡三樓的解法： 圖 3.7: phpMyAdmin 沒有成功設定的頁面 手動軟連結到 Apache2 的設定資料夾 sudo ln -s /etc/phpmyadmin/apache.conf /etc/apache2/conf-available/phpmyadmin.conf 接著啟動 phpMyAdmin 的設定檔 sudo a2enconf phpmyadmin \b重新啟動 Apache2 sudo systemctl restart apache2 再從瀏覽器嘗試一次連線 http://&lt;虛擬主機的 ip 地址&gt;/phpmyadmin/ 成功～ 🎊 圖 3.8: phpMyAdmin 頁面 3.5.3 Step 2 — 使 phpMyAdmin 更加安全 預設的網址 http://&lt;虛擬機器的 ip 位置&gt;/phpmyadmin 實在是太危險了，如果有人有意破壞，又被猜到管理員的密碼，那將會一發不可收拾，所以接下來要改的是 phpMyAdmin 在 Apache2 中的設定，將預設的位置改掉至少會安全一點。 sudo vim /etc/phpmyadmin/apache.conf /etc/phpmyadmin/apache.conf # phpMyAdmin default Apache configuration Alias /sql /usr/share/phpmyadmin # 變更這裡 &lt;Directory /usr/share/phpmyadmin&gt; Options SymLinksIfOwnerMatch DirectoryIndex index.php AllowOverride All # 新增這行 [...] &lt;/Directory&gt; [...] 因為 /etc/phpmyadmin/apache.conf 已軟連結（soft-link）至 /etc/apache2/conf-available/phpmyadmin.conf 所以變更apache.conf 時，位於 Apache2 中的設定檔也會跟著變更。 重新啟動 Apache2 sudo systemctl restart apache2 從新的 ip 位址進入 http://&lt;虛擬機器的 ip 位址&gt;/sql/ 圖 3.9: 剛才更新的路由 3.5.4 Step 3 — 再多一層存取的密碼保護 [可跳過] 新增一個叫做 .htaccess 的檔案 sudo vim /usr/share/phpmyadmin/.htaccess 放入設定 AuthType Basic AuthName &quot;限制存取的檔案&quot; AuthUserFile /etc/phpmyadmin/.htpasswd Require valid-user 用 htpasswd 指令以 .htpasswd 生成帳號，這個帳號叫做 asis，此時會提示你輸入密碼。 sudo htpasswd -c /etc/phpmyadmin/.htpasswd asis 如果要新增其他使用者，請將 -c 參數移除 sudo htpasswd /etc/phpmyadmin/.htpasswd otheruser 再進入一次 phpMyAdmin 的位址嘗試： 圖 3.10: phpMyAdmin 登入提示 此時會跳出一個登入介面，需要輸入密碼才能進入 phpMyAdmin 的頁面。 如果不需要此設定，直接刪除位於 /etc/phpmyadmin/.htpasswd 的檔案即可。 "],["rstudio-rshiny-server.html", "Chapter 4 RStudio &amp; RShiny Server", " Chapter 4 RStudio &amp; RShiny Server 本章節會說明怎麼安裝 RStudio 與 RShiny Server 到系統上。 "],["事前準備-3.html", "4.1 事前準備", " 4.1 事前準備 先確認目前的使用者 asis 擁有 sudo 的權限。 "],["r-base.html", "4.2 R base", " 4.2 R base R 是一個跨平台的統計繪圖開放原始碼軟體。除了 R 基本的功能之外，還有龐大的社群一起合作創造新的功能，使 R 的功能更為豐富。 4.2.1 概述 本小節會介紹怎麼安裝 R Base。 4.2.2 Step 1 — 安裝 R Base 安裝軟體之前，先更新套件管理程式的來源 sudo apt update 再來安裝安裝 r-base 所需要的程式 software-properties-common 與 dirmngr。 sudo apt install software-properties-common dirmngr --yes 切換到暫存資料夾後，將 GPG 簽名下載下來，添加至目的地 cd /tmp &amp;&amp; \\ wget -qO- https://cloud.r-project.org/bin/linux/ubuntu/marutter_pubkey.asc \\ | sudo tee -a /etc/apt/trusted.gpg.d/cran_ubuntu_key.asc 添加 apt 來源 sudo add-apt-repository \\ &quot;deb https://cloud.r-project.org/bin/linux/ubuntu $(lsb_release -cs)-cran40/&quot; 安裝 r-base sudo apt install r-base --yes 4.2.3 Step 2 — 確認 R Base 是否成功安裝 在命令列介面下要確認 R 有無正常安裝很簡單，輸入一個大寫 R 就可以進到 R 的 Console。 R 輸入下列指令查看 R 的相關訊息。 sessionInfo() R version 4.2.0 (2022-04-22) Platform: x86_64-pc-linux-gnu (64-bit) Running under: Ubuntu 21.10 Matrix products: default BLAS: /usr/lib/x86_64-linux-gnu/blas/libblas.so.3.9.0 LAPACK: /usr/lib/x86_64-linux-gnu/lapack/liblapack.so.3.9.0 locale: [1] LC_CTYPE=en_US.UTF-8 LC_NUMERIC=C LC_TIME=C.UTF-8 [4] LC_COLLATE=C.UTF-8 LC_MONETARY=C.UTF-8 LC_MESSAGES=C.UTF-8 [7] LC_PAPER=C.UTF-8 LC_NAME=C LC_ADDRESS=C [10] LC_TELEPHONE=C LC_MEASUREMENT=C.UTF-8 LC_IDENTIFICATION=C attached base packages: [1] stats graphics grDevices utils datasets methods base loaded via a namespace (and not attached): [1] compiler_4.2.0 pbdZMQ_0.3-7 確認沒問題後使用指令 q 退出。 q(save=&#39;no&#39;) "],["rstudio-server.html", "4.3 RStudio Server", " 4.3 RStudio Server RStudio Server 是 RStudio 的網頁版本，使用者可以透過網頁存取一個位於網路上的 RStudio。 4.3.1 概述 本小節會介紹怎麼安裝 RStudio Server 與設定 Apache 的反向代理。 4.3.2 Step 1 — 安裝 RStudio Server 伺服器 sudo apt install gdebi-core 切到暫存資料夾後，自官網下載 rstudio 伺服器的安裝程式。 cd /tmp &amp;&amp; \\ wget https://download2.rstudio.org/server/bionic/amd64/rstudio-server-1.4.1717-amd64.deb 這個指令會下載當前撰寫這個頁面的最新版本 RStudio Server。如果你想要下載最新版本請到官方的下載頁面確認。 透過 ubuntu 的密鑰伺服器取回對應的簽名 gpg --keyserver keyserver.ubuntu.com --recv-keys 3F32EE77E331692F 安裝確認檔案簽名所需要的程式 sudo apt install dpkg-sig --yes 檢查檔案簽名，加上 --verify 選項驗證檔案簽名 dpkg-sig --verify rstudio-server-1.4.1717-amd64.deb 出現 GOODSIG 字樣代表該檔案沒有問題，檔案於下載圖中沒有被修改過，可以繼續安裝 Processing rstudio-server-1.4.1717-amd64.deb... GOODSIG _gpgbuilder FE8564CFF1AB93F1728645193F32EE77E331692F 1621900692 最後再使用 gdebi 指令安裝 .deb 格式安裝程式 sudo gdebi rstudio-server-1.4.1717-amd64.deb 將防火牆的 8787 埠號打開 sudo ufw allow 8787 接著用瀏覽器進入下列網址 http://&lt;虛擬主機的 ip 位址&gt;:8787 圖 4.1: RStudio 登入頁面 或是在shell中直接使用 curl 指令查看 curl &lt;虛擬主機的 ip 位址&gt;:8787 4.3.3 Step 2 — 設定 Apache 的反向代理（Reverse Proxy） 用指令 a2enmod 將 Apache 內建的插件啟用 sudo a2enmod proxy &amp;&amp; sudo a2enmod proxy_http &amp;&amp; sudo a2enmod proxy_wstunnel 繼續編輯Step 2 — 建立虛擬網站所建立的 asis.conf sudo vim /etc/apache2/sites-available/asis.conf 在 VirtualHost 節點下面新增 RStudio Proxy 的區塊 /etc/apache2/sites-available/asis.conf &lt;VirtualHost *:80&gt; ServerAdmin webmaster@localhost DocumentRoot /var/www/asis ErrorLog ${APACHE_LOG_DIR}/error.log CustomLog ${APACHE_LOG_DIR}/access.log combined ### # RStudio Proxy ### &lt;proxy *&gt; Allow from localhost &lt;/proxy&gt; RedirectMatch permanent ^/rstudio$ /rstudio/ RewriteEngine on RewriteCond %{HTTP:Upgrade} =websocket RewriteRule /rstudio/(.*) ws://localhost:8787/$1 [P,L] RewriteCond %{HTTP:Upgrade} !=websocket RewriteRule /rstudio/(.*) http://localhost:8787/$1 [P,L] ProxyPass /rstudio/ http://localhost:8787/ ProxyPassReverse /rstudio/ http://localhost:8787/ ProxyRequests Off &lt;/VirtualHost&gt; 完成後需要重新啟動 Apache sudo systemctl restart apache2 最後以瀏覽器打開下面的連結會發現，可以直接使用具有名字的路徑，透過反向代理，連結到目的地 8787 埠號。 http://&lt;虛擬主機的 ip 位址&gt;/rstudio/ 圖 4.2: 透過剛才更新的路由，所看到的 RStudio 登入頁面 在Step 1 — 安裝 RStudio Server 伺服器開的 8787 埠號可以關掉了。在 status 的後面加上 numbered 可以將設定的編號也一起列出來，再藉由編號編輯該設定。 sudo ufw status numbered Status: active To Action From -- ------ ---- [ 1] 60000 ALLOW IN Anywhere [ 2] mosh ALLOW IN Anywhere [ 3] Apache ALLOW IN Anywhere [ 4] Apache Secure ALLOW IN Anywhere [ 5] 8787 ALLOW IN Anywhere [ 6] 60000 (v6) ALLOW IN Anywhere (v6) [ 7] mosh (v6) ALLOW IN Anywhere (v6) [ 8] Apache (v6) ALLOW IN Anywhere (v6) [ 9] Apache Secure (v6) ALLOW IN Anywhere (v6) [10] 8787 (v6) ALLOW IN Anywhere (v6) 刪除第 5 個設定（8787） sudo ufw delete 5 刪除第 9 個設定（8787 (v6)），因為第 5 個設定刪除之後，第 10 順位的設定就會往前移，重新編號。 sudo ufw delete 9 更動後的設定。 Status: active To Action From -- ------ ---- 60000 ALLOW Anywhere mosh ALLOW Anywhere Apache ALLOW Anywhere Apache Secure ALLOW Anywhere 60000 (v6) ALLOW Anywhere (v6) mosh (v6) ALLOW Anywhere (v6) Apache (v6) ALLOW Anywhere (v6) Apache Secure (v6) ALLOW Anywhere (v6) "],["r-shiny-server.html", "4.4 R Shiny Server", " 4.4 R Shiny Server RShiny Server 是一個可以讓 Shiny App 部署在伺服器上，透過特定的網址啟動特定的 Shiny App。 4.4.1 概述 本小節會說明怎麼安裝 R Shiny Server 在 Ubuntu 上、設定 Apache 的反向代理、再來對 R Shiny Server 做更進階的設定，最後驗證剛才的設定是否有效。 4.4.2 Step 1 — 安裝 R Shiny Server 首先透過一行指令用 root 權限安裝 shiny 套件。 sudo su - \\ -c &quot;R -e \\&quot;install.packages(&#39;shiny&#39;, repos=&#39;https://cran.rstudio.com/&#39;)\\&quot;&quot; su 指令可以用來切換使用者，不過我們這裡的用法是切換到 root 並執行指令的指令。 - [使用者]：如果不指定使用者，將會以 root 代替 --command, -c：需要目標使用者執行的指令 R 除了可以開啟互動式的 R Console 之外，也可以使用 -e 參數讓 R 僅執行 R 指令，完成後即退出。 接下來切換目錄到 /tmp 資料夾並下載 R Shiny Server 安裝程式。 cd /tmp &amp;&amp; \\ wget https://download3.rstudio.org/ubuntu-14.04/x86_64/shiny-server-1.5.16.958-amd64.deb 這個指令會下載當前撰寫這個頁面的最新版本 R Shiny Server。如果你想要下載最新版本請到官方的下載頁面確認。 使用 sha256sum 計算安裝程式的 sha256，並在網站上確認有沒有相同。 sha256sum shiny-server-1.5.16.958-amd64.deb 圖 4.3: R Shiny Server 官方下載頁面的 sha256 依樣地，使用 gdebi 指令安裝 .deb 格式安裝程式 sudo gdebi shiny-server-1.5.16.958-amd64.deb 最後從 http://&lt;虛擬機器的 ip 位址&gt;:3838 進入 R Shiny Server 首頁 圖 4.4: R Shiny Server 首頁 如果右下角顯示的是錯誤訊息，代表伺服器沒有安裝 rmarkdown 套件，下列指令安裝即可： sudo su - \\ -c &quot;R -e \\&quot;install.packages(&#39;rmarkdown&#39;)\\&quot;&quot; 4.4.3 Step 2 — 設定 Apache 的反向代理 繼續編輯 Apache 的網頁設定文件 asis.conf sudo vim /etc/apache2/sites-available/asis.conf 一樣地，將 R Shiny Server 的設定也一同放入設定檔案中。 /etc/apache2/sites-available/asis.conf &lt;VirtualHost *:80&gt; [...] ### # RStudio Proxy ### [...] ### # RShiny Server Proxy ### RedirectMatch permanent ^/shiny$ /shiny/ RewriteCond %{HTTP:Upgrade} =websocket RewriteRule /shiny/(.*) ws://localhost:3838/$1 [P,L] RewriteCond %{HTTP:Upgrade} !=websocket RewriteRule /shiny/(.*) http://localhost:3838/$1 [P,L] ProxyPass /shiny/ http://localhost:3838/ ProxyPassReverse /shiny/ http://localhost:3838/ &lt;/VirtualHost&gt; 編輯完成後，須重新啟動 Apache2 sudo systemctl restart apache2 最後使用已命名的網址進入 R Shiny Server 首頁 http://&lt;虛擬機器的 ip 地址&gt;/shiny/ 圖 4.5: 透過 Apache 反向代理進入的R Shiny Server 首頁 4.4.4 Step 3 — R Shiny Server 進階設定 這個步驟會編輯 R Shiny Server 的設定，可以根據需求去區分 Shiny App，例如我想要使用者群組為學生的放在一起，為教師的使用者群組放在一起，都是做得到的。更詳盡的設定可以看 R Shiny Server 官方的說明文件設定。 首先我們先編輯 Shiny Server 的設定檔案： sudo vim /etc/shiny-server/shiny-server.conf /etc/shiny-server/shiny-server.conf # 主要執行 App 為的使用者為該 App 的擁有者，沒有擁有者的 App 將由備取使用者 shiny 執行。 run_as :HOME_USER: shiny; access_log /var/log/shiny-server/access.log tiny; server { listen 3838; # 110.09.21 跟明輝老師的結果是只留下 &#39;老師&#39; 與 &#39;學生群組&#39; # 重新導向舊群組 /asisstuc 至學生群組 /stu location /asisstuc { redirect &quot;https://&lt;虛擬主機 ip 位址&gt;/shiny/stu/&quot; 302 true; } location /defstu { redirect &quot;https://&lt;虛擬主機 ip 位址&gt;/shiny/stu/&quot; 302 true; } location /asisstuc { redirect &quot;https://&lt;虛擬主機 ip 位址&gt;/shiny/stu/&quot; 302 true; } location /stu { user_dirs; members_of stu; directory_index on; } location /teacher { user_dirs; members_of teacher; directory_index off; } # Shiny 首頁 location / { site_dir /srv/shiny-server; log_dir /var/log/shiny-server; directory_index on; } } 這裡的 run_as 設定的 :HOME_USER: 會將符合 members_of 所指定的群組的使用者家目錄底下的資料夾（~/ShinyApps）有效，會以該使用者所安裝的 R 套件為第一優先執行 Shiny Apps，如果使用者家目錄沒有安裝該套件才會落到 R 的系統套件。這個方法能讓系統不用常常以管理員的權限安裝套件，讓使用者可以自己安裝所需的套件，達到減少管理員工作的目的。而緊接在 :HOME_USER: 後面的使用者是 shiny 預設執行 Shiny Apps 的使用者。 access_log 是存放任何人透過網址執行 Shiny Apps 的所有訊息的位置，而後面的 tiny 字樣是設定紀錄的詳細程度，詳細的說明可以參考官方的說明文件。 在開始設定之前要知道一件事，所有的路由設定都是放在 server { } 之中，不會跑到大括號外面。listen 後面設定的數字是 R Shiny Server 佈置 Apps 的埠號，不要重複即可。 4.4.4.1 佈置單一個 App 單一個 App 可以看預設首頁（如圖4.5所示）的設置，首頁的設定如下： [...] server { [...] # Shiny 首頁 location / { site_dir /srv/shiny-server; log_dir /var/log/shiny-server; directory_index on; } } location / 設定的是這個頁面的位置，/ 代表的是根頁面，跟網址加在一起就變成 http://&lt;虛擬機器的 ip 位置&gt;/shiny/ 。而 site_dir 指的是這個頁面的網頁檔案位置，/srv/shiny-server/ 的目錄結構如下： total 8 drwxr-xr-x 2 root root 4096 Jul 4 19:44 ./ drwxr-xr-x 3 root root 4096 May 29 10:02 ../ lrwxrwxrwx 1 root root 38 Feb 1 03:43 index.html -&gt; /opt/shiny-server/samples/welcome.html lrwxrwxrwx 1 root root 37 Feb 1 03:43 sample-apps -&gt; /opt/shiny-server/samples/sample-apps/ 它會將 index.html 作為 / 路由（也就是首頁）的頁面。如果底下有資料夾，透過網頁的相對路徑也是進得去的。 R Shiny Server 會將資料夾底下的 Shiny Apps 或是 R Markdown 佈置到對應的路由上。例如這裡有一個 sample-apps 資料夾，裏面分別有一個 Shiny App，與一個 R Markdown 檔案，路徑如下： /srv/shiny-server/sample-apps/ ├── hello │ ├── server.R │ └── ui.R └── rmd └── index.Rmd hello 資料夾底下是一個 Shiny App，而 rmd 資料夾底下是一個 R Markdown 檔案。兩者皆可以透過首頁下的 sample-apps/ 路由存取。以 hello 的 Shiny App 為例，App 的路由為：http://&lt;虛擬機器的 ip 位置&gt;/shiny/sample-apps/hello。 圖 4.6: 透過 http:///shiny/sample-apps/hello 訪問的 Shiny App 而 directory_index 設定為 on ，且該路由沒有首頁檔案（index.html）、Shiny Apps 或是 R Markdown 時，會將資料夾與檔案顯示出來。這裡同樣的以 /srv/shiny-server 底下的 /sample-apps 為例，如下圖所示： 圖 4.7: /shiny/sample-apps 的頁面 4.4.4.2 根據使用者群組佈置 App R Shiny Server 可以根據使用者群組創建對應的路由，像是規定學生只能從 /stu 存取他們自己的 Shiny App。具體設定如下： [...] server{ [...] # 學生頁面 location /stu { user_dirs; members_of stu; directory_index on; } } 這個設定會限制使用者群組為 stu 的使用者從 http://&lt;虛擬機器的 ip 位置&gt;/shiny/&lt;使用者名稱&gt; 存取他們存放位於家目錄底下名為ShinyApps（~/ShinyApps）資料夾內的 Shiny Apps。 4.4.4.3 重新導向頁面 重新導向頁面可以將舊的網址導向至新的網址，一般的設定如下： [...] server { [...] # 將網址為 /asisstuc 的路由重新導向至新的網址 location /asisstuc { redirect &quot;https://&lt;虛擬主機 ip 位址&gt;/shiny/stu/&quot; 302 true; } } redirect 後面第一個參數是目的地網址，第二個參數是網頁重新導向的種類（301 為永久，302 為暫時），最後一個參數是否要套用完全一樣的路由，如果設為 true，路由為 /asisstuc 才會重新導向。如果設為 false ，則它的路由只要包含 /asisstuc，不管它底下才有沒有其他路由（例如：/asisstuc/08170875/example），都會重新導向至指定的網頁。 這裏要先跳至Step 4 — 使用使用者測試設定是否有效先建立使用者群組後再重新啟動 R Shiny Server。因為設定檔中設有使用者群組（MCU、teacher）而沒有創建的話，重新啟動 R Shiny Server 會因為找不到該使用者群組而出現錯誤。 4.4.5 Step 4 — 使用使用者測試設定是否有效 這裡會大概講一下怎麼創建使用者群組、使用者帳戶，以及在創建使用者帳戶的同時，也一起於家目錄創建 ShinyApps 資料夾。詳細的說明會於附錄的帳號管理說明。 首先用下面的指令創建兩個使用者群組，分別是 stu 與 teacher。 sudo groupadd MCU &amp;&amp; sudo groupadd teacher 接著編輯使用指令 useradd 創建使用者時，預設的使用者設定，後續建立使用者才不會多打很多指令。 sudo vim /etc/default/useradd /etc/default/useradd # Default values for useradd(8) # # The SHELL variable specifies the default login shell on your # system. # Similar to DSHELL in adduser. However, we use &quot;sh&quot; here because # useradd is a low level utility and should be as general # as possible SHELL=/usr/bin/bash 將 SHELL 的部分取消註解，並把 bash 的程式路徑填上去。只要變更這一行就好，如果不清楚路徑可以參考下面的說明。 這裡的 SHELL 就是指 linux 與使用者之間的溝通方式，指定 bash 為我們使用者預設的 SHELL。 如果不知道 bash 程式的位置，可以使用 which 指令查詢後，再來做這一步，例如： which bash /usr/bin/bash 接著於 /etc/skel 的路徑創建一個叫做 ShinyApps 的資料夾。位於此路徑的所有檔案都會在創建使用者時複製一份到使用者的家目錄。 sudo mkdir /etc/skel/ShinyApps/ 創建完後，再將範例的 sample-apps 連結到模板資料夾 /etc/skel 的 ShinyApps 資料夾中。讓新創立的使用者有測試用的 Shiny App。 sudo ln -s /srv/shiny-server/sample-apps \\ /etc/skel/ShinyApps/example 最後再用 useradd 指令隨意創建兩個帳戶 sudo useradd --badnames -N -g stu -m 08170875 --badnames：新版的 useradd 指令新增的參數，讓不安全的使用者（例如全部都是數字的使用者）可以創建。 -N, --no-user-group：預設 useradd 在創建使用者帳戶時，會根據使用者名稱再創立一個主要的使用者群組。 -g, --gid GROUP：直接指定使用者的主要的使用者群組。 -m, --create-home：建立使用者時，順帶建立家目錄。 sudo useradd --badnames -N -g teacher -m ms00000000 新增完成後，為了使剛才 R Shiny Server 的設定生效，重新啟動 R Shiny Server。 sudo systemctl restart shiny-server 最後再從剛才設定的路由進入使用者的 Shiny Apps 目錄，網址為：http://&lt;虛擬機器 ip 位址&gt;/shiny/stu/08170875/ 圖 4.8: Shiny Server 使用者 08170875 的 Shiny Apps 如果輸入了 http://&lt;虛擬機器 ip 位址&gt;/shiny/stu 是不會出現所有使用者的，這點要注意。不過我們也可以根據這個路由，利用 site_dir 參數設計一個專屬於使用者群組 stu 的網頁。 圖 4.9: 路由 /stu 的網頁（找不到網頁） "],["jupyterlab-on-jupyterhub.html", "Chapter 5 JupyterLab on JupyterHub", " Chapter 5 JupyterLab on JupyterHub 本篇教學完全照著(mangecoeur et al. 2021)所寫的教學操作。旨在建立 Jupyterhub 環境。 參考資料 "],["事前準備-4.html", "5.1 事前準備", " 5.1 事前準備 先確認目前的使用者 asis 擁有 sudo 的權限。 "],["設置-python-3-環境.html", "5.2 設置 Python 3 環境", " 5.2 設置 Python 3 環境 首先，一樣地，只要安裝套件都需要先更新套件來源。這裡我們用 &amp;&amp; 連接兩個指令，讓更新與安裝依序執行。 sudo apt update &amp;&amp; sudo apt install python3-dev python3-pip --yes 安裝 python3-venv ，後續建立 python 虛擬環境時會用到 sudo apt install python3-venv 因為目前 Ubuntu 內建的 python 版本通常都是 python 2.X，所以我們還要再多裝一個叫做 python-is-python3 的套件，將 python 設為 python3 的別名，這個會使你以後呼叫 python 指令確保 python 的版本是 python 3。 sudo apt install python-is-python3 --yes "],["jupyterlab-與-jupyterhub.html", "5.3 JupyterLab 與 JupyterHub", " 5.3 JupyterLab 與 JupyterHub 5.3.1 概述 5.3.2 於虛擬環境中設置 JupyterLab 與 JupyterHub sudo python3 -m venv /opt/jupyterhub sudo /opt/jupyterhub/bin/python -m pip install wheel sudo /opt/jupyterhub/bin/python -m pip install jupyterlab jupyterhub sudo /opt/jupyterhub/bin/python -m pip install ipywidgets curl -fsSL https://deb.nodesource.com/setup_lts.x | sudo -E bash - sudo apt-get install -y nodejs sudo npm install -g configurable-http-proxy 5.3.3 設定 JupyterHub sudo mkdir -p /opt/jupyterhub/etc/jupyterhub/ cd /opt/jupyterhub/etc/jupyterhub/ sudo /opt/jupyterhub/bin/jupyterhub --generate-config sudo vim jupyterhub_config.py /opt/jupyterhub/etc/jupyterhub/jupyterhub_config.py c.JupyterHub.bind_url = &#39;http://:8000/jhub&#39; c.Spawner.default_url = &#39;/lab&#39; c.Authenticator.admin_users = {&#39;asis&#39;} c.Spawner.cmd = [&#39;jupyter-labhub&#39;] c.Spawner.args = [&#39;--collaborative&#39;] 5.3.4 新增開機自動啟動 JupyterHub 的服務 sudo mkdir -p /opt/jupyterhub/etc/systemd sudo vim /opt/jupyterhub/etc/systemd/jupyterhub.service /opt/jupyterhub/etc/systemd/jupyterhub.service [Unit] Description=JupyterHub After=syslog.target network.target [Service] User=root Environment=&quot;PATH=/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/opt/jupyterhub/bin&quot; ExecStart=/opt/jupyterhub/bin/jupyterhub -f /opt/jupyterhub/etc/jupyterhub/jupyterhub_config.py [Install] WantedBy=multi-user.target sudo ln -s /opt/jupyterhub/etc/systemd/jupyterhub.service \\ /etc/systemd/system/jupyterhub.service sudo systemctl daemon-reload sudo systemctl enable jupyterhub.service sudo systemctl start jupyterhub.service sudo systemctl status jupyterhub.service "],["jupyterhub-中的運算核心.html", "5.4 JupyterHub 中的運算核心", " 5.4 JupyterHub 中的運算核心 5.4.1 Conda 的 Python🐍 環境 cd ~ curl https://repo.anaconda.com/pkgs/misc/gpgkeys/anaconda.asc \\ | gpg --dearmor &gt; conda.gpg sudo install -o root -g root -m 644 conda.gpg /etc/apt/trusted.gpg.d/ rm conda.gpg echo \\ &quot;deb [arch=amd64] https://repo.anaconda.com/pkgs/misc/debrepo/conda stable main&quot; \\ | sudo tee /etc/apt/sources.list.d/conda.list sudo apt update &amp;&amp; sudo apt install conda --yes sudo mkdir /opt/conda/envs cd /opt/conda/envs/ &amp;&amp; sudo vim environment.yml /opt/conda/envs/environment.yml name: python channels: - defaults dependencies: - python=3.9 - ipykernel - pip: - ipython-sql - PyMySQL - matplotlib - plotly - dash - pandas prefix: /opt/conda/envs/python sudo /opt/conda/bin/conda env create -f environment.yml sudo /opt/conda/envs/python/bin/python -m \\ ipykernel install \\ --prefix=/opt/jupyterhub/ \\ --name &#39;python3&#39; \\ --display-name &quot;Python (default)&quot; 圖 5.1: jupyterhub 登入後的頁面 5.4.2 R 環境 sudo su - -c &quot;R -e \\&quot;install.packages(&#39;IRkernel&#39;)\\&quot;&quot; sudo su - -c &quot;R -e \\&quot; IRkernel::installspec( name=&#39;ir41&#39;, displayname=&#39;R 4.1&#39;, user=FALSE, prefix=&#39;/opt/jupyterhub&#39; ) \\&quot;&quot; Error in IRkernel::installspec(name = &quot;ir41&quot;, displayname = &quot;R 4.1&quot;) : jupyter-client has to be installed but “jupyter kernelspec --version” exited with code 127. In addition: Warning message: In system2(&quot;jupyter&quot;, c(&quot;kernelspec&quot;, &quot;--version&quot;), FALSE, FALSE) : error in running command Execution halted 主要原因是因為，系統找不到 jupyter 指令。可以自己在終端機重現一次： jupyter kernelspec --version Command &#39;jupyter&#39; not found, but can be installed with: sudo snap install jupyter # version 1.0.0, or sudo apt install jupyter-core # version 4.6.3-3 See &#39;snap info jupyter&#39; for additional versions. 找不到指令，出現了推薦安裝方式，不過這不是我們要的。 這裡會用一個技巧讓系統找得到位於 /opt/jupyter/bin/jupyter 的指令。 藉由軟連結到系統的 path 變數中讓 R 找得到。 首先先印出 PATH 變數： echo $PATH /home/asis/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin 放置於其中一個位置就行，注意不要放置在 /home 底下，執行 R 時事使用 root 權限，用 root 權限執行時，並不會翻 /home/asis/ 底下的資料夾。 這裡我們選用 /usr/local/bin 作為軟連結放置 jupyter 執行檔。 sudo ln -s /opt/jupyterhub/bin/jupyter /usr/local/bin 接著用 which 指令查詢指令是否存在： which jupyter 列出二進制執行檔存在位置： ls -al $(which jupyter) lrwxrwxrwx 1 root root 27 Sep 17 16:23 /usr/local/bin/jupyter -&gt; /opt/jupyterhub/bin/jupyter* 可以看到指令 jupyter 之所以會存在是因為軟連結至 /opt/jupyterhub/bin/jupyter 後，因為 /usr/local/bin 在變數 path 內，讓系統找得到，才可以使用這個指令。 再執行一次剛開始的指令： sudo su - -c &quot;R -e \\&quot; IRkernel::installspec( name=&#39;ir41&#39;, displayname=&#39;R 4.1&#39;, user=FALSE, prefix=&#39;/opt/jupyterhub&#39; ) \\&quot;&quot; jupyter kernelspec list Available kernels: ir41 /opt/jupyterhub/share/jupyter/kernels/ir41 python3 /opt/jupyterhub/share/jupyter/kernels/python3 圖 5.2: jupyterhub 安裝完 R 核心與預設 Python 的頁面 5.4.3 C 與 C++ 環境 sudo vim /opt/conda/envs/c_cpp.yml /opt/conda/envs/c_cpp.yml name: c-cpp channels: - defaults - conda-forge dependencies: - xeus-cling - python=3.* - pip - ipykernel prefix: /opt/conda/envs/c-cpp sudo conda env create -f c_cpp.yml sudo jupyter kernelspec install \\ /opt/conda/envs/c-cpp/share/jupyter/kernels/xcpp11 --sys-prefix sudo jupyter kernelspec install \\ /opt/conda/envs/c-cpp/share/jupyter/kernels/xcpp14 --sys-prefix sudo jupyter kernelspec install \\ /opt/conda/envs/c-cpp/share/jupyter/kernels/xcpp17 --sys-prefix sudo /opt/conda/envs/c-cpp/bin/python3.9 -m \\ pip install git+https://github.com/XaverKlemenschits/jupyter-c-kernel.git sudo vim /opt/conda/envs/c-cpp/share/jupyter/kernels/c/kernel.json /opt/conda/envs/c-cpp/share/jupyter/kernels/c/kernel.json { &quot;display_name&quot;: &quot;C&quot;, &quot;argv&quot;: [ &quot;/opt/conda/envs/c-cpp/bin/python3&quot;, &quot;-m&quot;, &quot;jupyter_c_kernel&quot;, &quot;-f&quot;, &quot;{connection_file}&quot; ], &quot;language&quot;: &quot;C&quot; } sudo mv ~/Downloads/logo** /opt/conda/envs/c-cpp/share/jupyter/c/ 圖 5.3: C 語言核心圖標，32x32 圖 5.4: C 語言核心圖標，64x64 ls -al /opt/conda/envs/c-cpp/share/jupyter/kernels/c drwxrwxr-x 2 root root 4096 Oct 23 17:20 ./ drwxrwxr-x 7 root root 4096 Oct 23 15:31 ../ -rw-rw-r-- 1 root root 181 Oct 23 15:26 kernel.json -rw-r--r-- 1 root root 1536 Oct 23 17:02 logo-32x32.png -rw-r--r-- 1 root root 4079 Oct 23 17:02 logo-64x64.png sudo jupyter kernelspec install /opt/conda/envs/c-cpp/share/jupyter/c --sys-prefix 圖 5.5: jupyterhub 加上了 C 與 CPP 核心的頁面 5.4.4 SAS 環境 sudo vim /opt/conda/envs/sas.yml /opt/conda/envs/sas.yml name: sas channels: - defaults - conda-forge - anaconda dependencies: - sas_kernel - python=3.* - pip - ipykernel prefix: /opt/conda/envs/sas sudo conda env create -f sas.yml sudo vim /opt/conda/envs/sas/share/jupyter/kernels/sas/kernel.json /opt/conda/envs/sas/share/jupyter/kernels/sas/kernel.json { &quot;argv&quot;: [ &quot;/opt/conda/envs/sas/bin/python&quot;, &quot;-m&quot;, &quot;sas_kernel&quot;, &quot;-f&quot;, &quot;{connection_file}&quot; ], &quot;display_name&quot;: &quot;SAS&quot;, &quot;codemirror_mode&quot;: &quot;sas&quot;, &quot;language&quot;: &quot;sas&quot;, &quot;name&quot;: &quot;sas&quot; } sudo cp \\ /opt/conda/envs/sas/lib/python3.9/site-packages/sas_kernel/data/logo-64x64.png \\ /opt/conda/envs/sas/share/jupyter/kernels/sas "],["設置-apache-的反向代理.html", "5.5 設置 Apache 的反向代理", " 5.5 設置 Apache 的反向代理 sudo vim /etc/apache2/sites-available/asis.conf /etc/apache2/sites-available/asis.conf &lt;VirtualHost *:80&gt; [...] ### # JupyterHub Reverse Proxy ### # add trailing slash RedirectMatch ^/jhub$ /jhub/ RewriteCond %{HTTP:Connection} Upgrade [NC] RewriteCond %{HTTP:Upgrade} websocket [NC] RewriteRule /jhub/(.*) ws://127.0.0.1:8000/jhub/$1 [P,L] RewriteRule /jhub/(.*) http://127.0.0.1:8000/jhub/$1 [P,L] &lt;Location /jhub/&gt; # preserve Host header to avoid cross-origin problems # this setting screws up Rstudio, use for JupyterHub only ProxyPreserveHost On # proxy to JupyterHub, omit location parameter from ProxyPass etc ProxyPass http://127.0.0.1:8000/jhub/ ProxyPassReverse http://127.0.0.1:8000/jhub/ &lt;/Location&gt; &lt;/VirtualHost&gt; http://&lt;虛擬主機的 ip 位址&gt;/jhub "],["jupyterhub-擴充套件.html", "5.6 JupyterHub 擴充套件", " 5.6 JupyterHub 擴充套件 jupyterlab-drawio sudo /opt/jupyterhub/bin/pip install jupyterlab-drawio jupyterlab-git sudo /opt/jupyterhub/bin/pip \\ install --upgrade jupyterlab jupyterlab-git jupyterlab-variable-inspector sudo /opt/jupyterhub/bin/pip \\ install lckr_jupyterlab_variableinspector sudo su - -c &quot;R -e \\&quot;install.packages(&#39;repr&#39;)\\&quot;&quot; jupyterext-text-shortcuts sudo jupyter labextension install @techrah/text-shortcuts jupyterlab-spreadsheet sudo jupyter labextension install jupyterlab-spreadsheet ipympl sudo /opt/jupyterhub/bin/pip install ipympl jupyter-dash (待更新，目前不能用 2021.09.18) sudo /opt/jupyterhub/bin/pip install jupyter-dash jupyterlab-link-share sudo /opt/jupyterhub/bin/pip install jupyterlab-link-share language-packs sudo /opt/jupyterhub/bin/pip install jupyterlab-language-pack-zh-TW sudo /opt/jupyterhub/bin/pip install jupyterlab-language-pack-zh-CN jupyterlab-lsp sudo /opt/jupyterhub/bin/pip install &#39;jupyterlab&gt;=3.0.0,&lt;4.0.0a0&#39; jupyterlab-lsp sudo apt install libcurl4-openssl-dev libxml2-dev --yes sudo su - -c &quot;R -e \\&quot;install.packages(&#39;languageserver&#39;)\\&quot;&quot;&quot; sudo /opt/jupyterhub/bin/pip install -U jedi-language-server nbgitpuller sudo /opt/jupyterhub/bin/pip install nbgitpuller sudo systemctl restart jupyterhub.service "],["相關軟體.html", "A 相關軟體", " A 相關軟體 "],["putty.html", "A.1 PuTTY", " A.1 PuTTY 使用 PuTTY 連線至 OpenSSH 伺服器 A.1.1 以 PuTTY 產生 key 另一個方法不會需要你手動安裝 OpenSSH Client，不過、一樣地，要安裝PuTTY 程式。 A.1.1.1 Step 1 — 安裝 PuTTY 到開發者的網站，然後下載適合你 Windows 的版本 (副檔名為 *.msi 的安裝程式) https://www.chiark.greenend.org.uk/~sgtatham/putty/latest.html 根據你的需求設定安裝程式 待安裝程式安裝完成 安裝完成後，點選「開始」，找到 PuTTYgen開啟，或是點選「開始」，鍵入 puttygen 後按 Enter↩︎ A.1.1.2 Step 2 — 經由 PuTTYgen 產生 ssh key pairs 跟 OpenSSH Client 一樣地，你可以在下方的 Types 選擇你偏好的加密方式。點選「Generate」開始產生 key，此時不要傻傻地在那邊等，要在程式進度條下方空白處隨意移動你的滑鼠鼠標。 完成後，可以在 Comment 的輸入框註解一下這個 key 是從哪裡來的，以後擁有多個 key pairs 時才不會搞混。當然你也可以用密碼保護這個 key pairs，如果有需要在 Key passphrase 與 Confirm passphrase 輸入一模一樣的密碼。 A.1.1.3 Step 3 — 妥善保存好產生的 Key 分別按下「Save public key」與「Save private key」找到適合的地方儲存它。 A.1.2 上傳 ssh key pairs PuTTY 產生的 public key 與 private key 格式比較特別，並不能直接把 public key 裡面的文字直接貼到遠端電腦的 ~/.ssh/authorized_keys 檔案裡面，需要經由 PuTTYgen.exe 讀取 *.ppk 才能得到正確格式的 public key。首先把 PuTTYgen 程式打開。 接著按「Load」把剛剛產生的 *.ppk 檔案讀取進來。會看到一行字「Public key for pasting into OpenSSH authorized_keys file」下面的可複製區域就是 public key，把它整段複製起來。 接著打開「PowerShell」或是「命令提示字元」，輸入: echo &quot;&lt;YOUR_PUBLIC_KEY&gt;&quot; | ssh asis@192.168.0.13 &quot;cat &gt;&gt; ~/.ssh/authorized_keys&quot; 將 &lt;YOUR_PUBLIC_KEY&gt; 替換成自己的 public key 這裡的 asis 為第一章的使用者設定的預設使用者 192.168.0.13 為我虛擬主機的 ip 位址，查詢 ip 位址可以先手動登入虛擬主機後，用 hostname -I 或是 ip addr show 指令查詢 接著按 Enter↩︎，跳出輸入密碼提示，這裡輸入預設的使用者密碼 asis asis@192.168.0.13&#39;s password: 輸入完成不會出現任何訊息是正常的，代表操作沒有問題且已經可以使用 PuTTY 連線了。 A.1.3 PuTTYgen 產生的 key pairs 的連線方式: SSH 連線方式大同小異: 首先點選「開始」，鍵入 PuTTY 打開客戶端 在左邊的 「Category:」 下，選取 「Session」 於 Host Name 輸入「使用者@目的地 IP」，像是「asis@192.168.0.13」 你可以點選下面的「Default Settings」後，接著按「Save」會把剛剛輸入的 IP 與 Port 儲存至「Default Settings」內，當然你也可以自己取一個新的名字。 接著展開左邊 「Category:」 下的「Connection」 ➜ 點選「SSH」 ➜ 再點選「Auth」，於最下面的「Private key file for authentication:」點選「Browse…」選取 *.ppk 檔案位置 完成後點選「Open」連線 與使用 ssh 指令連線相同，都會先提醒你目的地是否正確。確認無誤按下「Accept」 連接成功! "],["帳號管理.html", "B 帳號管理", " B 帳號管理 帳號管理分為兩個部分，一個部分是系統的帳號管理，另一個部分是 MySQL 資料庫的帳號管理。 "],["系統帳號.html", "B.1 系統帳號", " B.1 系統帳號 這個小節會說明用來管理帳號的腳本的運作流程的活動圖、腳本運行，接著才是指令說明。如果要直接執行腳本請到 腳本運行 的部分。 B.1.1 概述 本腳本（Bash Script）的活動圖，如圖 B.1 所示。一開始會根據使用者設定的選項的設定環境，接著才會進到主要方法的部分。主要方法有兩種，分別是建立帳號（create）與刪除帳號（delete），這兩個方法隨後會另外說明。 圖 B.1: manage-users.sh B.1.2 腳本運行 這個部分會說明怎麼執行腳本。 首先先切換使用者目錄到家目錄底下的 ~/bin cd ~/bin 再來用你喜愛的編輯器在這個目錄底下新增一個叫做 manage-users.sh 的腳本（Bash Script） vim manage-users.sh 將藏在 ▶ 裡面的腳本內容放到腳本內後儲存 管理使用者的腳本 ~/bin/manage-users.sh #!/bin/bash # author: kuaz # created date: 2022.02.24 # last modified: 2022.07.11 # # This script is used to: # 1. Create user accounts from /depts/dept.txt files (one student ID per line). # 環境變數 depts_dir=&#39;depts&#39; # 放置用來建置 linux 帳號的系資料夾 # pass_dir=&#39;passwd&#39; # 放置建置完成的 linux 帳號密碼的資料夾 gp=false # 是否產生新密碼 new=true # 是否是新版的 shiny app 連結方式；如果設為 true， # 將不會使用 systemetic link 的方式連結 dryrun=false # 試運行；如果設為 true，將不會創立帳號 # useradd 是否支援 badname badname_supported=$(useradd 2&gt;&amp;1 | grep -q &quot;badname&quot;; echo $?) check_permission() { if [ ${dryrun} == true ]; then : else if [ $(id -u) -ne 0 ]; then echo &quot;必須以 root 權限執行此腳本！&quot;; exit 1; fi fi } user_exists() { id &quot;$1&quot; &amp;&gt; /dev/null } check_depts_dir() { if [ -d ${depts_dir} ]; then grps=&quot;$(ls ./${depts_dir} | grep &quot;.txt&quot; | cut -d &quot;.&quot; -f 1)&quot; for grp in ${grps} do # https://stackoverflow.com/questions/28038633/wc-l-is-not-counting-last-of-the-file-if-it-does-not-have-end-of-line-character count=$(awk &#39;END{print NR}&#39; ./${depts_dir}/${grp}.txt) file=$(realpath ./${depts_dir}/${grp}.txt) if [ $count -lt 1 ]; then echo &quot;請再檢查一次 ${depts_dir} 內是否含有正確格式的學號檔案！&quot; echo &quot;有問題的檔案: $file&quot; exit 1 else echo &quot;於 $file 發現了 $count 個學生&quot; fi done else echo &quot;系資料夾 ${depts_dir} 不存在！請先手動創建或是由選項 -c, --generate-configuration 建立。&quot; exit 1; fi } # create_pass_dir() { # if [ ! -d ${pass_dir} ]; then # echo &quot;存放密碼的 ${pass_dir} 資料夾不存在，將建立 ${pass_dir} 資料夾&quot; # mkdir ${pass_dir} # else # read -p &quot;存放密碼的 ${pass_dir} 資料夾已存在！是否要將其移除後繼續建立帳號? (yes/No)&quot; yn # case $yn in # [Yy]* ) # rm -rf ${pass_dir} # make_pass_dir # ;; # [Nn]* ) exit 1;; # esac # fi # } create_users() { # 如果有產生密碼的需求 # if [ ${gp} = true ]; then # create_pass_dir # fi for grp in ${grps} do # 確認使用者群組是否存在，如果不存在將自動建立 if $(grep -q &quot;^${grp}:&quot; /etc/group); then : else # 非試運行 if [ ${dryrun} = false ]; then groupadd ${grp} fi echo &quot;已建立 ${grp} 使用者群組&quot; fi done for grp in ${grps} do # 使用舊方法連結 ShinyApps if [ ${new} = false ] &amp;&amp; [ ! -d /srv/shiny-server/${grp} ]; then echo &quot;/srv/shiny-server/${grp} 資料夾不存在，將建立群組資料夾&quot; # 非試運行 if [ ${dryrun} = false ]; then mkdir /srv/shiny-server/${grp} fi fi created=0 skip=0 # 逐行讀取學號 while IFS= read -r stu || [ -n &quot;$stu&quot; ]; do cur_user=${stu} if user_exists &quot;${cur_user}&quot;; then (( skip += 1 )) elif [ ${dryrun} = false ]; then # 如果不支援 badname if [ ${badname_supported} == false ]; then useradd -N -g stu -G ${grp} -m ${cur_user} else useradd --badnames -N -g stu -G ${grp} -m ${cur_user} fi # 產生隨機密碼 # if [ ${gp} = false ]; then cur_user_password=${cur_user} # else # cur_user_password=$(openssl rand -base64 6) # fi # 以 root 權限創立使用者帳號，並設定密碼 echo &quot;${cur_user}:${cur_user_password}&quot; | chpasswd # 將設定的帳號密碼儲存一份到資料夾中 # echo &quot;${cur_user},${cur_user_password}&quot;| tee -a ./${pass_dir}/${grp}.csv &gt; /dev/null 2&gt;&amp;1 # 將 ShinyApp 軟連結至使用者資料夾 if [ ${new} = false ]; then # 需要先在 /etc/skel/ 建立 ShinyApps 資料夾，才可成功連結 ln -s /home/${cur_user}/ShinyApps /srv/shiny-server/${grp}/${cur_user} fi (( created += 1 )) else # 如果為試運行模式 (( created += 1 )) fi done &lt; ./${depts_dir}/${grp}.txt echo &quot;成功從群組 ${grp} 建立了 ${created} 個帳號，忽略了 ${skip} 個已存在帳號。&quot; done } delete_users() { for grp in ${grps} do skip=0 deleted=0 while IFS= read -r stu || [ -n &quot;$stu&quot; ]; do cur_user=${stu} if user_exists &quot;${cur_user}&quot;; then userdel -r ${cur_user} &gt; /dev/null 2&gt;&amp;1 if [ ${new} = false ]; then rm -rf /srv/shiny-server/${grp}/${stu} fi (( deleted += 1 )) else (( skip += 1 )) fi done &lt; ./${depts_dir}/${grp}.txt echo &quot;成功從群組 ${grp} 移除了 ${deleted} 個帳號，其中共有 ${skip} 個帳號不存在。&quot; done # read -p &quot;使用者已移除，是否要順便移除存放密碼的資料夾 ${pass_dir}? (yes/No)&quot; yn # case $yn in # [Yy]* ) # rm -rf ${pass_dir} # ;; # [No]* ) exit 0;; # esac } create_prompt() { read -p &quot;即將建立使用者帳戶，確認使用者資料是否無誤?（Yes/No）&quot; yn echo case $yn in [Yy]* ) create_users;; [Nn]* ) exit 0;; esac } delete_prompt() { read -p &quot;即將 &#39;刪除&#39; 使用者帳戶，於 /home/&lt;使用者&gt; 的資料將會消失，是否執行?（Yes/No）&quot; yn case $yn in [Yy]* ) delete_users;; [Nn]* ) exit 0;; esac } generate_configuration() { if [ -d ${depts_dir} ]; then echo &quot;資料夾已存在！請先刪除 ${depts_dir} 資料夾&quot; else mkdir ${depts_dir} touch ${depts_dir}/asis.txt touch ${depts_dir}/eco.txt echo 08170875 &gt; ${depts_dir}/asis.txt echo 08220855 &gt; ${depts_dir}/eco.txt echo &quot;設定檔案建立完成&quot; fi exit 0; } display_help() { cat &lt;&lt; EOF 使用方法: $0 [ 選項... ] &lt; create | delete &gt; 選項: -h, --help 產生此說明文字 -d, --dry-run 試運行腳本，不實際執行 -c, --generate-configuration 產生範例設定 -o, --old-shiny-server ShinyApps 將使用軟連結的方式連結（不推薦） EOF } while : do case &quot;$1&quot; in -h | --help) display_help exit 0 ;; -d | --dry-run) dryrun=true shift 1 break ;; # -p | --generate-password) # gp=true # shift 1 # break # ;; -c | --generate-configuration) generate_configuration exit 0 ;; -o | --old-shiny-server) new=false shift 1 break ;; -*) echo &quot;錯誤：未知的選項：$1&quot; display_help exit 1 ;; *) break ;; esac done case &quot;$1&quot; in create) check_permission check_depts_dir create_prompt ;; delete) check_permission check_depts_dir delete_prompt ;; *) echo &quot;錯誤，請參考下列指令說明：&quot; echo display_help exit 1 ;; esac 接著使用 chmod 指令為腳本加上可執行的權限 chmod +x manage-users.sh 使用腳本名稱加上 -h 或是 --help 選項可以顯示使用腳本的說明哦～ ./manage-users.sh --help 使用方法: ./manage-users.sh [選項...] &lt;create | delete&gt; 選項: -h, --help 產生此說明文字 -d, --dry-run 試運行腳本，不實際執行 -c, --generate-configuration 產生範例設定 -o, --old-shiny-server ShinyApps 將使用軟連結的方式連結（不推薦） 如果是第一次使用此腳本，可以使用 -c 選項產生範例設定 ./manage-users.sh -c ├── depts │   ├── asis.txt │   └── eco.txt └── manage-users.sh 這個腳本會根據所設定的系資料夾新增帳號，新增的使用者帳號的主要使用者群組是 stu，副使用者群組為 .txt 的名稱，這一點要多加注意。 預設腳本產生的資料有兩個帳號，分別是屬於使用者群組 asis 的 08170875 與屬於使用者群組 eco 的 08220855。 接著使用 sudo 權限建立使用者帳號 sudo ./manage-users.sh create 於 /home/kuaz/Downloads/depts/asis.txt 發現了 1 個學生 於 /home/kuaz/Downloads/depts/eco.txt 發現了 1 個學生 即將建立使用者帳戶，確認使用者資料是否無誤?（Yes/No） 這時候會預覽在檔案中發現的使用者數目，此時輸入 Yes/No 可以繼續或是中斷腳本，這裡選擇繼續所以輸入 Y 後按 Enter↩︎。 完成後也會提示建立帳號的說明 成功從群組 asis 建立了 1 個帳號，忽略了 0 個已存在帳號。 成功從群組 eco 建立了 1 個帳號，忽略了 0 個已存在帳號。 完成後可以用指令 id 確認使用者有無成功建立 id 08170875; id 08220855 uid=1026(08170875) gid=1006(stu) groups=1006(stu),1007(asis) uid=1027(08220855) gid=1006(stu) groups=1006(stu),1005(eco) 測試完後可以用腳本附帶的 detele 方法刪除帳號 sudo ./manage-users.sh delete 與建立帳號相同，刪除帳號一樣會有提示，這裡也是輸入 Y 後繼續刪除帳號的方法 於 /home/kuaz/Downloads/depts/asis.txt 發現了 1 個學生 於 /home/kuaz/Downloads/depts/eco.txt 發現了 1 個學生 即將 &#39;刪除&#39; 使用者帳戶，於 /home/&lt;使用者&gt; 的資料將會消失，是否執行?（Yes/No） 成功從群組 asis 移除了 1 個帳號，其中共有 0 個帳號不存在。 成功從群組 eco 移除了 1 個帳號，其中共有 0 個帳號不存在。 再用相同的指令確認使用者是否存在 id 08170875; id 08220855 提示使用者不存在 id: ‘08170875’: no such user id: ‘08220855’: no such user B.1.3 指令說明 B.1.3.1 讀取選項的迴圈 首先是第一個迴圈，第一個迴圈是檢查選項用的，這裡使用的是 Bash Script 的 Case 語法（類似 Switch 的概念）。 while : do case &quot;$1&quot; in -h | --help) display_help exit 0 ;; -d | --dry-run) dryrun=true shift 1 break ;; # -p | --generate-password) # gp=true # shift 1 # break # ;; -c | --generate-configuration) generate_configuration exit 0 ;; -o | --old-shiny-server) new=false shift 1 break ;; -*) echo &quot;錯誤：未知的選項：$1&quot; display_help exit 1 ;; *) break ;; esac done 首先 while : 的意思在 Bash Script 裡面就是 while true 的意思。而 do-done 是接續 while 的語句。接著會碰到 $1，$1 代表的是指令以空白區隔，第一個位置的參數在 Bash Script 裡面就會被設為 $1，例如： ./manage-users.sh -c 所以這裡的 $1 就代表著第一個參數位置，-c。所以當腳本碰到 - 開頭的選項時，就會落到 Case 的 Pattern 裡面去匹配選項。那為什麼腳本丟到 Case 裡面的變數一直都是 $1 也可以跑？是因為搭配了 shift 1 指令，當腳本碰到 shift 1，它會將 $1 丟棄，$2 遞補上來變為 $1，直到遇到其他終止的條件，像是 break 或是 exit。 B.1.3.2 讀取方法的 Switch Case 一樣的，這裡會用到相同的 Switch Case 概念，假如上一個迴圈被 break 終止後，且 $1 被包含在 Switch Case 的選項中就會觸發對應的方法。這裡我針對 create 與 delete 設定了不同的方法。 case &quot;$1&quot; in create) check_permission check_depts_dir create_prompt ;; delete) check_permission check_depts_dir delete_prompt ;; *) echo &quot;錯誤，請參考下列指令說明：&quot; echo display_help exit 1 ;; esac 建立使用者會依序呼叫 3 個方法，分別是 check_permission（檢查權限是否為 root）、check_depts_dir（檢查系資料夾是否符合規範）最後才是 create_prompt （建立使用者提示）。 B.1.3.3 建立使用者 建立使用者的流程如下圖，圖 B.2 活動圖所示： 圖 B.2: 建立使用者 這裡用到非常多的 if 判斷環境，所以本腳本還有很多改善的空間。 B.1.3.3.1 檢查權限（check_permission）方法： check_permission() { if [ ${dryrun} == true ]; then : else if [ $(id -u) -ne 0 ]; then echo &quot;必須以 root 權限執行此腳本！&quot;; exit 1; fi fi } 這段程式碼做了： 第 1 行，方法名稱 第 2 行，檢查變數 dryrun（試運行）是否為 true。如果試運行選項有設定時，會直接略過這個 if 語句。 第 3 行，: 在腳本中代表的是 true 的別名，因為 if 與句不能為空，所以這裡放一個 :。詳細說明可以參考這裡 第 5 行，檢查當前的使用者編號是否為 0，這裡的 0 是代表 root。 第 6 行，輸出訊息 第 7 行，結束程式，錯誤代碼為 1 B.1.3.3.2 檢查系資料夾是否符合規範（check_depts_dir） check_depts_dir() { if [ -d ${depts_dir} ]; then grps=&quot;$(ls ./${depts_dir} | grep &quot;.txt&quot; | cut -d &quot;.&quot; -f 1)&quot; for grp in ${grps} do count=$(awk &#39;END{print NR}&#39; ./${depts_dir}/${grp}.txt) file=$(realpath ./${depts_dir}/${grp}.txt) if [ $count -lt 1 ]; then echo &quot;請再檢查一次 ${depts_dir} 內是否含有正確格式的學號檔案！&quot; echo &quot;有問題的檔案: $file&quot; exit 1 else echo &quot;於 $file 發現了 $count 個學生&quot; fi done else echo &quot;系資料夾 ${depts_dir} 不存在！請先手動創建或是由選項 -c, --generate-configuration 建立。&quot; exit 1; fi } 這段程式碼做了： 第 1 行，方法名稱 第 2 行，檢查資料夾 depts 是否存在 第 3 行，ls 會列出於 depts 資料夾中所有的檔案，| 會將前一個指令的結果傳到下一個指令裡面，grep \".txt\" 會抓出含有 .txt 的檔案，接著最後的 cut -d \".\" -f 1 會將資料以 . 作為分隔符號切割，取出第一個結果。例如資料夾中有著三個 .txt 的檔案，asis.txt、eco.txt與 fin.txt，最後輸出的結果為：asis、eco 與 fin。 第 4-5 行，將前一個結果放到 For 迴圈中。 第 6 行，awk 是一種文字處理工具，這裡的功用是計算系資料中的檔案有幾列（不包含空行），估算要建立的使用者數目。 第 7 行，realpath 會將檔案完整的路進印出來，並儲存在變數 file 中 第 8 行，if 語句，如果數量少於 1 第 9-11 行，輸出訊息並中止 第 13 行，輸出訊息 第 17-18 行，輸出訊息並中止 B.1.3.3.3 建立使用者提示（create_prompt） create_prompt() { read -p &quot;即將建立使用者帳戶，確認使用者資料是否無誤?（Yes/No）&quot; yn echo case $yn in [Yy]* ) create_users;; [Nn]* ) exit 0;; esac } 這段程式碼做了： 第 1 行，方法名稱 第 2 行，讀取使用者輸入，並儲存到變數 yn 中 第 5 行，Switch Case 語句 第 6 行，當第一個字母為 Y 或是 y 會落到此語句，並執行 create_users 方法 第 7 行，當第一個字母為 N 或是 n 會落到此語句，直接退出程式 B.1.3.3.4 建立使用者（create_users） create_users() { # 如果有產生密碼的需求 # if [ ${gp} = true ]; then # create_pass_dir # fi for grp in ${grps} do # 確認使用者群組是否存在，如果不存在將自動建立 if $(grep -q &quot;^${grp}:&quot; /etc/group); then : else # 非試運行 if [ ${dryrun} = false ]; then groupadd ${grp} fi echo &quot;已建立 ${grp} 使用者群組&quot; fi done for grp in ${grps} do # 使用舊方法連結 ShinyApps if [ ${new} = false ] &amp;&amp; [ ! -d /srv/shiny-server/${grp} ]; then echo &quot;/srv/shiny-server/${grp} 資料夾不存在，將建立群組資料夾&quot; # 非試運行 if [ ${dryrun} = false ]; then mkdir /srv/shiny-server/${grp} fi fi created=0 skip=0 # 逐行讀取學號 while IFS= read -r stu || [ -n &quot;$stu&quot; ]; do cur_user=${stu} if user_exists &quot;${cur_user}&quot;; then (( skip += 1 )) elif [ ${dryrun} = false ]; then # 如果不支援 badname if [ ${badname_supported} == false ]; then useradd -N -g stu -G ${grp} -m ${cur_user} else useradd --badnames -N -g stu -G ${grp} -m ${cur_user} fi # 產生隨機密碼 # if [ ${gp} = false ]; then cur_user_password=${cur_user} # else # cur_user_password=$(openssl rand -base64 6) # fi # 以 root 權限創立使用者帳號，並設定密碼 echo &quot;${cur_user}:${cur_user_password}&quot; | chpasswd # 將設定的帳號密碼儲存一份到資料夾中 # echo &quot;${cur_user},${cur_user_password}&quot;| tee -a ./${pass_dir}/${grp}.csv &gt; /dev/null 2&gt;&amp;1 # 將 ShinyApp 軟連結至使用者資料夾 if [ ${new} = false ]; then # 需要先在 /etc/skel/ 建立 ShinyApps 資料夾，才可成功連結 ln -s /home/${cur_user}/ShinyApps /srv/shiny-server/${grp}/${cur_user} fi (( created += 1 )) else # 如果為試運行模式 (( created += 1 )) fi done &lt; ./${depts_dir}/${grp}.txt echo &quot;成功從群組 ${grp} 建立了 ${created} 個帳號，忽略了 ${skip} 個已存在帳號。&quot; done } 這段程式碼做了： 第 1 行，方法名稱 第 7 行，根據 check_depts_dir 產生的變數 grps 做 For 迴圈 第 10 行，檢查當前 For 迴圈群組使否存在 第 11 行，: 在腳本中代表的是 true 的別名，因為 if 與句不能為空，所以這裡放一個 :。詳細說明可以參考這裡 第 14 行，檢查 dryrun（試運行）變數 第 15 行，新增使用者群組 第 21 行，根據 check_depts_dir 產生的變數 grps 做 For 迴圈 第 24 行，檢查 new（是否使用新方法創建 ShinyApps 資料夾）與 /srv/shiny-server/群組名稱 第 25 行，輸出訊息 第 27 行，檢查 dryrun（試運行）變數 第 28 行，建立使用者群組 第 32-33 行，初始化變數，created 用來計算成功建立的使用者，skip 是用來計算已經存在的使用者。 第 36-37、76 行，逐行讀入指定的檔案，&lt; ./${depts_dir}/${grp}.txt，這裡會逐行讀入係檔案的學號，每行代表一個要建立的使用者，並儲存到 stu 變數中。 while IFS= read -r stu || [ -n &quot;$stu&quot; ]; do [ 省略... ] done &lt; ./${depts_dir}/${grp}.txt 第 38 行，複製一個 stu 變數儲存到 cur_stu 變數中 第 40 行，用方法 user_exists 判斷使用者是否存在，隨後的是方法是輸入變數 第 41 行，變數 skip 加 1 第 43 行，檢查 dryrun（試運行）變數 第 45 行，檢查 badname_supported 變數 第 46 行，使用 useradd 指令建立使用者，參數說明如下： -N, --no-user-group：不建立使用者的個人使用者群組，須與 -g 同時使用 -g, --gid 群組：指定使用者的主要群組 -G, --groups 群組1[, 群組2, ...[,群組N]]：指定使用者的副群組 -m, --create-home：建立使用者的家目錄 第 48 行，多了 --badnames 選項，為了使不安全命名方式的使用者成功建立，例如數字開頭的使用者。 第 53 行，設定 cur_user_password（使用者密碼）變數為 cur_user（目前的使用者）變數 第 59 行，使用 chpasswd 變更 cur_user（目前的使用者）的使用者密碼 第 65 行，檢查 new（是否使用新方法創建 ShinyApps 資料夾） 第 67 行，將 ShinyApp 軟連結至使用者資料夾 第 70、73 行，變數 created 加 1 第 78 行，輸出訊息 "],["其他.html", "C 其他 ", " C 其他 "],["更改預設的文本編輯器.html", "C.1 更改預設的文本編輯器", " C.1 更改預設的文本編輯器 這個指令可以變更系統編輯文件所用的程式 sudo update-alternatives --config editor 按了 Enter↩︎ 之後，會出現現在可用的編輯器，輸入對應的編號即可變更。有標 * 號的編輯器為目前設定的預設編輯器。 There are 4 choices for the alternative editor (providing /usr/bin/editor). Selection Path Priority Status ------------------------------------------------------------ 0 /bin/nano 40 auto mode 1 /bin/ed -100 manual mode 2 /bin/nano 40 manual mode * 3 /usr/bin/vim.basic 30 manual mode 4 /usr/bin/vim.tiny 15 manual mode Press &lt;enter&gt; to keep the current choice[*], or type selection number: 3 "],["mysql-8.0-root-密碼重設.html", "C.2 Mysql 8.0 root 密碼重設", " C.2 Mysql 8.0 root 密碼重設 先建立一個含有改變 root 密碼的 sql 語法文字檔案 vim mysql-init ALTER USER &#39;root&#39;@&#39;localhost&#39; IDENTIFIED with caching_sha2_password by &#39;&lt;新的 root 密碼&gt;&#39;; 如存好後將擁有者與使用者群組改成 mysql 後，移至 /tmp 資料夾，使 mysql 使用者可以存取。 chown mysql.mysql mysql-init &amp;&amp; mv mysql-init /tmp 切換至 root 使用者進行後續操作 sudo su - 將目前的 mysql 關閉 killall -9 mysqld 或是使用 systemctl 指令關閉 mysql 服務 {.bash prefixed} systemctl stop mysql.service 接著使用 mysqld 指令啟動 mysql 並指定 --user、--defaults-file 與 --init-file 參數。 mysqld --defaults-file=/etc/mysql/mysql.conf.d/mysqld.cnf \\ --user=mysql \\ --init-file=/tmp/mysql-init &amp; --defaults-file: MySQL 預設啟動的設定檔案 --user: 以使用者 mysql 執行 --init-file: 初始化時，執行 /tmp/mysql-init 指令，變更密碼 &amp;: 將 mysql deamon 放至背景執行。 此時，應該可以正常登入了。 如果不行的話，請檢查位於 /var/log/mysql/error.log 的錯誤紀錄，如果有看到類似 /var/run/mysqld 的錯誤，需要手動建立資料夾，並把權限變更為 mysql 用戶的權限。 操作完之後再從關閉 mysql 服務開始，再嘗試一次。 參考指令如下： mkdir /var/run/mysqld &amp;&amp; chown mysql.mysql /var/run/mysqld 最後以正常的服務啟動 mysql： systemctl restart mysql.service 退出 root 帳號 exit 試以新密碼登入 mysql root 帳號： mysql -u root -p 成功 🎊 Welcome to the MySQL monitor. Commands end with ; or \\g. Your MySQL connection id is 17 Server version: 8.0.26-0ubuntu0.20.04.3 (Ubuntu) Copyright (c) 2000, 2021, Oracle and/or its affiliates. Oracle is a registered trademark of Oracle Corporation and/or its affiliates. Other names may be trademarks of their respective owners. Type &#39;help;&#39; or &#39;\\h&#39; for help. Type &#39;\\c&#39; to clear the current input statement. mysql&gt; "],["參考資料.html", "參考資料", " 參考資料 "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
