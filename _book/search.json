[{"path":"index.html","id":"引言","chapter":"引言","heading":"引言","text":"本書會從虛擬環境的建立、安裝 Ubuntu、Ubuntu 環境設定、安裝 LAMP 於 Ubuntu、安裝 Rstudio 與 RShiny 於Ubuntu…等，分章節介紹。","code":""},{"path":"index.html","id":"關於我","chapter":"引言","heading":"關於我","text":"","code":""},{"path":"intro.html","id":"intro","chapter":"章節 1 虛擬主機","heading":"章節 1 虛擬主機","text":"因為使用者的經驗、能力與解決問題的能力會有所差異，在接觸新的系統之前，最好還是先在虛擬主機上先運行過一次，確認沒問題之後再把操作搬到實體電腦上去，才不會遇到預料之外的問題。本書所使用運行虛擬主機的軟體為 VirtualBox。","code":""},{"path":"intro.html","id":"preparing","chapter":"章節 1 虛擬主機","heading":"1.1 事前準備","text":"在開始教學之前，確定你的環境要能上網存取網路上的資源。 再來是檢查自己的電腦可不可以運行 VirtualBox（或是其他可以運行虛擬主機的軟體），要運行虛擬主機通常都要去 BIOS 打開一個叫做擬化功能（Virtualization Technology）的功能。下列是我所整理各廠牌虛擬化功能的開啟方式：","code":""},{"path":"intro.html","id":"downloading-ubuntu-image","chapter":"章節 1 虛擬主機","heading":"1.2 下載 Ubuntu 映像檔","text":"進到 Ubuntu 官方網站後，點選右上角的「Download」展開下載頁面。\n圖 1.1: ubuntu.com 官方網站\n點選「Get Ubuntu Server」跳轉至下載頁面。\n圖 1.2: ubuntu.com 官方網站下載頁面\n按畫面中的綠色按鈕「Download Ubuntu Server 22.04.2 LTS」會跳轉到下載頁面，開始下載 Ubuntu 系統映像檔案 (*.iso)。\n圖 1.3: ubuntu.com Ubuntu 伺服器版本下載\n選項的簡易說明:Option 1 - Manual server installation: 下載映像檔案。Option 1 - Manual server installation: 下載映像檔案。Option 2 - Instant Ubuntu VMs: Multipass 是快速部屬虛擬主機的軟體，詳細說明可以看這裡，而這裡我們已經選用 VirtualBox 了所以不會用到。Option 2 - Instant Ubuntu VMs: Multipass 是快速部屬虛擬主機的軟體，詳細說明可以看這裡，而這裡我們已經選用 VirtualBox 了所以不會用到。Option 3 - Automated server provisioning: 利用 MaaS (Metal---Service) 安裝虛擬機。MaaS是管理數台虛擬主機用的服務，並不局限於 Ubuntu，Windows、CentOS 與 ESXi都可以在上面部屬。Option 3 - Automated server provisioning: 利用 MaaS (Metal---Service) 安裝虛擬機。MaaS是管理數台虛擬主機用的服務，並不局限於 Ubuntu，Windows、CentOS 與 ESXi都可以在上面部屬。","code":""},{"path":"intro.html","id":"installing-virtualbox","chapter":"章節 1 虛擬主機","heading":"1.3 安裝 VirtualBox","text":"首先到 VirtualBox 官方網站的下載頁面，下載適合你電腦系統的安裝執行檔，假如是 Windows 系統就點擊 「Windows hosts」的下載連結，如果是其他作業系統就根據你的作業系統下載對應的安裝程式。\n圖 1.4: www.virtualbox.org 的下載頁面\n安裝的過程中只需使用預設的設定即可，預設設定做了安裝虛擬主機的驅動程式、關聯檔案…等等，正常來說不需要變更它。\n圖 1.5: virtualbox 安裝程式\n這裡按下一步即可，安裝過程中可能會跳出一些警告，點擊「是」即可。\n圖 1.6: virtualbox 安裝程式（驅動程式安裝）\n依賴程式提示訊息。\n圖 1.7: virtualbox 安裝程式（依賴程式安裝）\n安裝程式安裝中。\n圖 1.8: virtualbox 安裝程式（安裝中）\n最後看到安裝成功畫面代表安裝完成。\n圖 1.9: virtualbox 安裝程式（安裝完成）\n","code":""},{"path":"intro.html","id":"virtualbox-interface","chapter":"章節 1 虛擬主機","heading":"1.4 VirtualBox 介面簡介","text":"在安裝完 VirtualBox 後，打開並不會有預先安裝好的作業系統，需要在 VirtualBox 內自行新增虛擬主機後，再將作業系統安裝至虛擬主機內；又或是匯入現有的虛擬主機映像檔（*.ova、*.ovf 格式）。首先介紹 VirtualBox 的使用者介面:\n圖 1.10: VirtualBox 的操作介面\n如圖 1.10 所示，右邊主要功能圖示由左而右的功能分別是:喜好設定: 設定 VirtualBox 的整體設定，像是軟體語言、虛擬主機預設存放位置…等等匯入: 匯入虛擬主機檔案 (.ovf)匯出: 匯出虛擬主機檔案新增: 新增新的虛擬主機加入: 加入已經存在的虛擬主機","code":""},{"path":"intro.html","id":"adding-vm-configuration","chapter":"章節 1 虛擬主機","heading":"1.5 新增虛擬主機設定","text":"按「新增」新增新的虛擬主機。這裡先點選「專家模式」，專家模式可以一併設定虛擬主機的所有設定。\n圖 1.11: 建立虛擬主機\n","code":""},{"path":"intro.html","id":"name-and-operating-system","chapter":"章節 1 虛擬主機","heading":"1.5.1 名稱和作業系統","text":"名稱填入「Ubuntu」，ISO 映像選擇剛才下載下來的 Ubuntu 映像檔。這裡請勾選「略過無人值守安裝」。\n圖 1.12: 名稱和作業系統設定\n","code":""},{"path":"intro.html","id":"unattended-installation","chapter":"章節 1 虛擬主機","heading":"1.5.2 無人值守安裝","text":"如果上一步有勾選略過無人值守安裝，畫面會像下圖一樣：\n圖 1.13: 略過無人值守安裝設定\n","code":""},{"path":"intro.html","id":"hardware","chapter":"章節 1 虛擬主機","heading":"1.5.3 硬體","text":"記憶體大小根據每個人電腦的性能做調整，虛擬主機沒用來做什麼事那設定 4 GB 很夠用了。處理器可以設定為 2 或是更高，但是建議不要超過圖上的綠色指示，不然電腦會負荷不了。\n圖 1.14: 硬體設定\n因為我寫教學時是使用虛擬主機撰寫，電腦資源沒有那麼多，所以上圖才會只有設定 2 GB，自己安裝時照上面說明建議的就可以了","code":""},{"path":"intro.html","id":"disk","chapter":"章節 1 虛擬主機","heading":"1.5.4 硬碟","text":"將虛擬硬碟設定為 1.0 TB，且將硬碟類型變更為「VMDK」格式，並勾選「分割成 2 GB 部分」，如下圖：\n圖 1.15: 硬碟設定\n預設的虛擬主機存放位置位於使用者資料夾中的 Virtual VMs 資料夾，假如的使用者是 kuaz，那虛擬主機就位於:設定完後點擊「完成」以建立虛擬主機。這裡我會選 VMDK 格式的原因是因為，轉移虛擬主機檔案時，單個檔案會輕易地超過 4 GB，而超過此上限的檔案在複製時，如果隨身硬碟裝置格式不是 NTFS 格式 的話，會沒有辦法複製。\n為了免去到時候分割虛擬主機的麻煩，在這邊先選擇 VMDK 作為虛擬主機的檔案格式。完成後，會在 VirtualBox 左邊的選單看見剛剛新建的虛擬主機，不過此時的虛擬主機內還沒有作業系統。\n圖 1.16: 完成建立虛擬主機\n為了要使用跟伺服器一樣的設定，需要再新增另一顆跟原本硬碟一樣大小的硬碟做鏡像備份。點選右邊橘色的齒輪「設定⚙」。在存儲裝置的「控制器：SATA」部分，點選硬碟圖案（有綠色加符號的）新增新的硬碟。\n圖 1.17: 虛擬主機存放裝置設定\n點選「建立」建立與第一顆硬碟條件一樣的硬碟。\n圖 1.18: 虛擬主機，管理存放裝置\n選取「專家模式」一併設定。\n圖 1.19: 虛擬硬碟格式\n與第一個硬碟相同，硬碟檔類型為「VMDK」，硬碟大小「1 TB」，並勾選「分割成 2 GB 部分」。\n圖 1.20: 虛擬硬碟格式\n完成後，點擊「選擇」選擇剛才新增的硬碟。\n圖 1.21: 虛擬硬碟格式\n建立完後成果如下：\n圖 1.22: 虛擬主機完成存放裝置設定\n會看到「控制器：SATA」裡面有兩個磁碟。到這裡虛擬主機的設定就完成啦。","code":"C:\\Users\\kuaz\\VirtualBox VMs"},{"path":"intro.html","id":"installing-operating-system","chapter":"章節 1 虛擬主機","heading":"1.6 安裝作業系統","text":"看到這個畫面點擊「啟動」，啟動剛才設定的作業系統。\n圖 1.23: 設定完成畫面\n接下來應該會進到作業系統的安裝畫面。進到安裝畫面後，如果是第一次啟動會出現主機鍵的訊息，這裡先按「擷取」按鈕擷取。主機鍵在安裝作成中很重要，這裡要先記下來目前的主機鍵被定義成什麼按鈕，預設為右 Ctrl。擷取按鈕後將會無法切回 Windows 操作，即在退出擷取模式前都無法操作虛擬主機以外的視窗。退出擷取模式按下主機鍵即可退出。\n圖 1.24: 安裝過程中提示的主機鍵\n在安裝過程中使用方向鍵⬆️⬇️⬅️➡️（選擇）、Enter↪️（確認）與 Esc（返回）操控安裝程式介面。擷取後用方向鍵選取「Try install Ubuntu」進到下一個畫面。","code":""},{"path":"intro.html","id":"language","chapter":"章節 1 虛擬主機","heading":"1.6.1 語言","text":"稍待 Ubuntu 作業系統映像檔載入後，安裝程式會跳出選擇語言的畫面，在這裡選擇適合你的語言。\n圖 1.25: Ubuntu 安裝畫面，選擇系統語言\n","code":""},{"path":"intro.html","id":"update-prompt","chapter":"章節 1 虛擬主機","heading":"1.6.2 更新提示","text":"當 Ubuntu 在安裝過程中，如果有連上網路，安裝程式會偵測當前的安裝程式是否需要更新，如果出現了這個畫面代表安裝程式有新的版本，可以選擇「Update new installer」將安裝程式更新至最新版本。當然，也可以在系統安裝完後更新。\n圖 1.26: Ubuntu 安裝畫面，安裝程式更新\n","code":""},{"path":"intro.html","id":"keyboard-configuration","chapter":"章節 1 虛擬主機","heading":"1.6.3 鍵盤配置","text":"這裡可以設定鍵盤的：Layout（布局）：鍵盤的語言Layout（布局）：鍵盤的語言Variant（鍵位）：一般在台灣都是用 QWERTY 配置與預設的 English（US）相同。詳細說明可以在這找到Variant（鍵位）：一般在台灣都是用 QWERTY 配置與預設的 English（US）相同。詳細說明可以在這找到\n圖 1.27: Ubuntu 安裝畫面，選擇鍵盤配置\n","code":""},{"path":"intro.html","id":"installation-type","chapter":"章節 1 虛擬主機","heading":"1.6.4 安裝類型","text":"在安裝類型選擇 Ubuntu Server 就好，minimized 版本會少一些我們之後會用到的功能，到時候還是要自己裝回來。\n圖 1.28: Ubuntu 安裝畫面，系統安裝類型\n","code":""},{"path":"intro.html","id":"network-connection","chapter":"章節 1 虛擬主機","heading":"1.6.5 網路連線","text":"這裡可以設定 Ubuntu 的網路連線，預設是由 DHCP 設定，通常不用變更，如果這裡連線失敗，也可以等開機後再做設定。\n圖 1.29: Ubuntu 安裝畫面，網路連線設定\n","code":""},{"path":"intro.html","id":"proxy","chapter":"章節 1 虛擬主機","heading":"1.6.6 Proxy","text":"除非當前的網路環境需要設定 proxy（代理伺服器），否則不需要設定。\n圖 1.30: Ubuntu 安裝畫面，proxy 設定\n","code":""},{"path":"intro.html","id":"mirror","chapter":"章節 1 虛擬主機","heading":"1.6.7 鏡像","text":"同上，不需要特別設定 mirror（鏡像），安裝程式會自動判斷選擇哪個地方的鏡像網址更新。\n圖 1.31: Ubuntu 安裝畫面，套件鏡像位置設定\n","code":""},{"path":"intro.html","id":"system-space-configuration","chapter":"章節 1 虛擬主機","heading":"1.6.8 系統空間配置","text":"以下 Raid-1 相關的設定是參考 (Evangelou 2020) 的 Gist 翻譯成中文文章。這裡選擇下面的「Custom storage layout」來製作 [Raid-1](https://linux.vbird.org/linux_basic_train/centos8/unit14.php#14.1)。\n圖 1.32: Ubuntu 安裝程式，磁碟配置設定\n如果分割錯了、或是硬碟中有已經分割好的磁區也沒關係，從 AVAILABLE DEVICES 下面選擇要變更的硬碟 ➜「Reformat」➜「Reformat」，這會把硬碟的分割表刪除。\n圖 1.33: Ubuntu 安裝程式，磁碟配置重新格式化\n選擇第一個磁碟 ➜ 「Use Boot Device」 當作開機磁碟\n圖 1.34: Ubuntu 安裝程式，磁碟配置選擇開機磁碟\n對第二個磁碟「VBOX_HARDDISK_VBf5d43868-04077409」也做同樣的事情，「Add Another Boot Device」。對第二個磁碟「VBOX_HARDDISK_VBf5d43868-04077409」也做同樣的事情，「Add Another Boot Device」。接著為 / 、 /boot 和 [SWAP] 做分區。\n/boot：開機磁區\n[SWAP]：SWAP（記憶體置換空間）主要功能是當記憶體滿載時，會把現在沒有用到的程式先放到 SWAP 中，空給目前正在運行的程式使用\n/：系統根目錄磁區\n接著為 / 、 /boot 和 [SWAP] 做分區。/boot：開機磁區/boot：開機磁區[SWAP]：SWAP（記憶體置換空間）主要功能是當記憶體滿載時，會把現在沒有用到的程式先放到 SWAP 中，空給目前正在運行的程式使用[SWAP]：SWAP（記憶體置換空間）主要功能是當記憶體滿載時，會把現在沒有用到的程式先放到 SWAP 中，空給目前正在運行的程式使用/：系統根目錄磁區/：系統根目錄磁區選擇第一個磁碟的「free space」 ➜「Add GPT Partitation」，照下面的設定設定後，按「Create」建立。再來為 /boot 分區，通常開機磁區 512 Mb ~ 1Gb 就很夠用了，這裡我選擇 1Gb。\nSize: 1G\nFormat: [ Leave unformatted ▾ ]\n選擇第一個磁碟的「free space」 ➜「Add GPT Partitation」，照下面的設定設定後，按「Create」建立。再來為 /boot 分區，通常開機磁區 512 Mb ~ 1Gb 就很夠用了，這裡我選擇 1Gb。Size: 1GSize: 1GFormat: [ Leave unformatted ▾ ]Format: [ Leave unformatted ▾ ]\n圖 1.35: Ubuntu 安裝程式，磁碟配置開機磁區\n對第二顆硬碟做同樣的事。\n圖 1.36: Ubuntu 安裝程式，磁碟配置開機磁區\n再來是 [SWAP] 磁區，一般來說會用實體記憶體容量除以 2 或與記憶體相同容量作為 [SWAP] 磁區的容量，這裡我使用 32 Gb。選擇第一個磁碟 ➜「Add GPT Partitation」，照以下的設定設定後，按「Create」。\nSize: 32G\nFormat: [ Leave unformatted ▾ ]\n再來是 [SWAP] 磁區，一般來說會用實體記憶體容量除以 2 或與記憶體相同容量作為 [SWAP] 磁區的容量，這裡我使用 32 Gb。選擇第一個磁碟 ➜「Add GPT Partitation」，照以下的設定設定後，按「Create」。Size: 32GSize: 32GFormat: [ Leave unformatted ▾ ]Format: [ Leave unformatted ▾ ]對第二顆硬碟做同樣的事。對第二顆硬碟做同樣的事。\n圖 1.37: Ubuntu 安裝程式，磁碟配置 SWAP\n最後才是系統硬碟 / ，系統硬碟使用 /boot 、[SWAP] 與 grub 剩下來的空間。選擇第一個磁碟 ➜ 「Add GPT Partitation」，照下面的設定設定後，按「Create」。\nSize: 留空 預設為剩下硬碟的容量，正是我們所要的\nFormat: [ Leave unformatted ▾ ]\n最後才是系統硬碟 / ，系統硬碟使用 /boot 、[SWAP] 與 grub 剩下來的空間。選擇第一個磁碟 ➜ 「Add GPT Partitation」，照下面的設定設定後，按「Create」。Size: 留空 預設為剩下硬碟的容量，正是我們所要的Size: 留空 預設為剩下硬碟的容量，正是我們所要的Format: [ Leave unformatted ▾ ]Format: [ Leave unformatted ▾ ]對第二顆硬碟做同樣的事。對第二顆硬碟做同樣的事。\n圖 1.38: Ubuntu 安裝程式，磁碟配置系統\n接著設定 Raid-1。選取「[ Create software RAID (md) ▸ ]」，選取兩個「partition 2」建立 md0 softRaid 磁區\n圖 1.39: Ubuntu 安裝程式，磁碟配置 md-0\n同上，選取「[ Create software RAID (md) ▸ ]」，選取兩個「partition 3」建立 md1 softRaid 磁區同上，選取「[ Create software RAID (md) ▸ ]」，選取兩個「partition 3」建立 md1 softRaid 磁區同上，選取「[ Create software RAID (md) ▸ ]」，選取兩個「partition 4」建立 md2 softRaid 磁區同上，選取「[ Create software RAID (md) ▸ ]」，選取兩個「partition 4」建立 md2 softRaid 磁區\n圖 1.40: Ubuntu 安裝程式，磁碟配置完成 raid-1 配置\n選擇 md0 (new) ➜ format ➜ Format: 選擇 ext4 格式 ➜ Mount: 掛載於 /boot ➜ 完成後選擇 Done選擇 md0 (new) ➜ format ➜ Format: 選擇 ext4 格式 ➜ Mount: 掛載於 /boot ➜ 完成後選擇 Done選擇 md1 (new) ➜ format ➜ Format: 選擇 swap 格式 ➜ 完成後選擇 Done選擇 md1 (new) ➜ format ➜ Format: 選擇 swap 格式 ➜ 完成後選擇 Done選擇 md2 (new) ➜ format ➜ Format: 選擇 ext4 格式 ➜ Mount: 掛載於 / ➜ 完成後選擇 Done選擇 md2 (new) ➜ format ➜ Format: 選擇 ext4 格式 ➜ Mount: 掛載於 / ➜ 完成後選擇 Done設定完成🎉設定完成🎉\n圖 1.41: Ubuntu 安裝程式，磁碟配置總覽\n截圖（續）\n圖 1.42: Ubuntu 安裝程式，磁碟配置總覽\n在最下面選擇「Done」，至下一步。","code":"這裡選擇下面的「Custom storage layout」來製作 [Raid-1](https://linux.vbird.org/linux_basic_train/centos8/unit14.php#14.1)。"},{"path":"intro.html","id":"user-configuration","chapter":"章節 1 虛擬主機","heading":"1.6.9 使用者設定","text":"在這邊設定自己的使用者名稱與電腦名稱。\n圖 1.43: Ubuntu 安裝程式，使用者設定\nname: asisYour name: asisYour server’s name: asis0721Your server’s name: asis0721Pick username: asisPick username: asisChoose password: asisChoose password: asisConfirm password: asisConfirm password: asis","code":""},{"path":"intro.html","id":"ubuntu-pro","chapter":"章節 1 虛擬主機","heading":"1.6.10 Ubuntu Pro","text":"跳過。\n圖 1.44: Ubuntu 安裝程式，Ubuntu Pro\n","code":""},{"path":"intro.html","id":"ssh","chapter":"章節 1 虛擬主機","heading":"1.6.11 SSH","text":"OpenSSH 是使用 SSH 通訊協定來遠端連線電腦的工具。防止連線中被竊聽、劫持或是其他攻擊。這裡先勾選「Install OpenSSH Server」讓安裝程式安裝。如果擁有 Github 帳號，且有設定過 SSH，即可藉 Github 匯入綁定在 Github 的公鑰。如果這邊不匯入的話，也可以待稍後開機後再用指令 ssh-import-id-gh <username> 匯入。","code":""},{"path":"intro.html","id":"snaps","chapter":"章節 1 虛擬主機","heading":"1.6.12 Snaps","text":"這裡會列出一些伺服器常用的應用程式，如果沒有需求可以跳過。\n圖 1.45: Ubuntu 安裝程式，伺服器常用應用程式\n","code":""},{"path":"intro.html","id":"completion","chapter":"章節 1 虛擬主機","heading":"1.7 完成安裝","text":"這個頁面是預覽 Ubuntu 安裝程式做過了什麼，都會記錄在這裡，通常不會有什麼問題所以可以不用理他，待安裝完成即可。\n圖 1.46: Ubuntu 安裝程式，安裝中\n安裝完成後選擇「Reboot Now」重新啟動\n圖 1.47: Ubuntu安裝程式，完成安裝\n","code":""},{"path":"intro.html","id":"virtual-machine-managment","chapter":"章節 1 虛擬主機","heading":"1.8 VirtualBox 管理虛擬主機","text":"","code":""},{"path":"intro.html","id":"boot-virtual-machine","chapter":"章節 1 虛擬主機","heading":"1.8.1 啟動虛擬主機","text":"依序選擇欲啟動的虛擬主機 → 「啟動」啟動虛擬主機。\n圖 1.48: VirtualBox 將虛擬主機開機\n","code":""},{"path":"intro.html","id":"shutdown-virtual-machine","chapter":"章節 1 虛擬主機","heading":"1.8.2 關閉虛擬主機","text":"虛擬主機的導覽列 → 「檔案」 → 「關閉電源」 → 「傳送關機訊號」正常關閉虛擬主機電源。\n圖 1.49: VirtualBox 將虛擬主機關機\n\n圖 1.50: VirtualBox 將虛擬主機關機\n","code":""},{"path":"intro.html","id":"configure-virtual-machine","chapter":"章節 1 虛擬主機","heading":"1.8.3 虛擬主機設定","text":"依序選擇欲編輯的虛擬主機 → 「⚙️設定」編輯虛擬主機。\n圖 1.51: VirtualBox 設定虛擬主機\n","code":""},{"path":"ubuntu-basic-configuration.html","id":"ubuntu-basic-configuration","chapter":"章節 2 Ubuntu 的基本設定","heading":"章節 2 Ubuntu 的基本設定","text":"本章主要會說明如何透過 SSH 存取虛擬機器與虛擬機器基本設定。","code":""},{"path":"ubuntu-basic-configuration.html","id":"preparing-2","chapter":"章節 2 Ubuntu 的基本設定","heading":"2.1 事前準備","text":"從這個章節開始會出現一些特殊前綴的方框（如下表）表示，不同的前綴代表不同種類的終端機，或是使用終端機的身份，請多多注意。PS: powershell 指令前綴\ndirPS: powershell 指令前綴$: 終端機指令前綴（一般使用者）\nls -al$: 終端機指令前綴（一般使用者）#: 終端機指令前綴（超級使用者）\nsudo rm -rf ~/Downloads#: 終端機指令前綴（超級使用者）OUTPUT: 終端機輸出\ntotal 12\ndrwxrwxr-x  3 kuaz kuaz 4096 Sep 22 02:11 ./\ndrwxr-x--- 15 kuaz kuaz 4096 Oct 10 22:30 ../\ndrwxrwxr-x  6 kuaz kuaz 4096 Oct  6 14:06 School/OUTPUT: 終端機輸出","code":"dirls -alsudo rm -rf ~/Downloadstotal 12\ndrwxrwxr-x  3 kuaz kuaz 4096 Sep 22 02:11 ./\ndrwxr-x--- 15 kuaz kuaz 4096 Oct 10 22:30 ../\ndrwxrwxr-x  6 kuaz kuaz 4096 Oct  6 14:06 School/"},{"path":"ubuntu-basic-configuration.html","id":"apt","chapter":"章節 2 Ubuntu 的基本設定","heading":"2.2 APT","text":"在 Ubuntu 上安裝任何程式大多都是用 APT (Advanced Packaging Tools) 安裝，這裡有兩個指令，用 && 串接在一起:apt update: 更新可安裝的套件列表或版本apt update: 更新可安裝的套件列表或版本apt upgrade: 安裝程式apt upgrade: 安裝程式&&: && 之前的指令執行成功才會接續執行 && 後面的指令&&: && 之前的指令執行成功才會接續執行 && 後面的指令-y, --yes, --assume-yes: 自動對安裝提示回答 yes，安裝時會提示是否確認要安裝該軟體，因為我們清楚自己在做什麼為了方便而把提示關掉-y, --yes, --assume-yes: 自動對安裝提示回答 yes，安裝時會提示是否確認要安裝該軟體，因為我們清楚自己在做什麼為了方便而把提示關掉","code":"sudo apt update && sudo apt upgrade -y"},{"path":"ubuntu-basic-configuration.html","id":"install-guest-additions","chapter":"章節 2 Ubuntu 的基本設定","heading":"2.3 安裝驅動程式","text":"在安裝驅動程式之前，需要從上面的設定將 Guest Additions 的光碟映像檔掛載至虛擬主機上面。\n圖 2.1: VirtualBox 插入 Guest Additions ISO\n掛載後先在 /media/ 資料夾建立新的 iso 資料夾查詢目前掛載的位置掛載光碟至指定資料夾安裝安裝程式所需的依賴套件安裝驅動程式","code":"sudo mkdir /media/isolsblksudo mount /dev/sr0 /media/isosudo apt update && sudo apt install bzip2 gcc make perl -ysudo /media/iso/VBoxLinuxAdditions.run"},{"path":"ubuntu-basic-configuration.html","id":"access-virtual-machine-network","chapter":"章節 2 Ubuntu 的基本設定","heading":"2.4 存取虛擬主機的網路","text":"首先將虛擬主機關閉電源，關閉電源後要新增一張「僅限主機」的網路卡。對虛擬主機右鍵後點選設定。\n圖 2.2: VirtualBox 對虛擬主機右鍵\n接著，依序點選「網路」 → 「介面卡 2」 → 「僅限主機」介面卡 → 「進階」，記下目前的 mac 位址。\n圖 2.3: VirtualBox 虛擬主機位址\n再來回到虛擬主機安裝 net-tools確認目前的裝置名稱，可以看到 08:00:27:59:b3:11 與剛才新增的介面卡 mac 位址相同。這裡 enp0s8 即為剛才插入的新的「僅限主機」網路卡，這個裝置名稱需要把它記下來。另外一張網路卡 enp0s3 的網路卡是預設 NAT 介面的虛擬主機網路卡。可以看到剛才新增的的網路卡沒有 ip 位址，這是因為系統沒有為這張網卡打開 dhcp 的設定。我們可以透過修改 netplan 的設定將 dhcp 伺服器打開。將 enp0s8 的設定添加在 enp0s3 下面。套用剛才的設定再次確認目前虛擬主機的 ip 位置後續我們就可以透過剛才新增的網路卡 ip 位址 192.168.56.101 存取這台虛擬主機。","code":"sudo apt install net-toolsifconfig -aenp0s3: flags=4163<UP,BROADCAST,RUNNING,MULTICAST>  mtu 1500\n        inet 10.0.2.15  netmask 255.255.255.0  broadcast 10.0.2.255\n        inet6 fe80::a00:27ff:fed3:c805  prefixlen 64  scopeid 0x20<link>\n        ether 08:00:27:d3:c8:05  txqueuelen 1000  (Ethernet)\n        RX packets 28  bytes 5374 (5.3 KB)\n        RX errors 0  dropped 0  overruns 0  frame 0\n        TX packets 56  bytes 6063 (6.0 KB)\n        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0\n\nenp0s8: flags=4163<UP,BROADCAST,RUNNING,MULTICAST>  mtu 1500\n        inet6 fe80::a00:27ff:fe59:b311  prefixlen 64  scopeid 0x20<link>\n        ether 08:00:27:59:b3:11  txqueuelen 1000  (Ethernet)\n        RX packets 870  bytes 79177 (79.1 KB)\n        RX errors 0  dropped 0  overruns 0  frame 0\n        TX packets 630  bytes 111436 (111.4 KB)\n        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0\n\nlo: flags=73<UP,LOOPBACK,RUNNING>  mtu 65536\n        inet 127.0.0.1  netmask 255.0.0.0\n        inet6 ::1  prefixlen 128  scopeid 0x10<host>\n        loop  txqueuelen 1000  (Local Loopback)\n        RX packets 84  bytes 6368 (6.3 KB)\n        RX errors 0  dropped 0  overruns 0  frame 0\n        TX packets 84  bytes 6368 (6.3 KB)\n        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0sudo vim /etc/netplan/00-installer-config.yaml# This is the network config written by 'subiquity'\nnetwork:\n  ethernets:\n    enp0s3:\n      dhcp4: true\n    enp0s8:\n      dhcp4: true\n  version: 2sudo netplan applyifconfigenp0s3: flags=4163<UP,BROADCAST,RUNNING,MULTICAST>  mtu 1500\n        inet 10.0.2.15  netmask 255.255.255.0  broadcast 10.0.2.255\n        inet6 fe80::a00:27ff:fed3:c805  prefixlen 64  scopeid 0x20<link>\n        ether 08:00:27:d3:c8:05  txqueuelen 1000  (Ethernet)\n        RX packets 32  bytes 7734 (7.7 KB)\n        RX errors 0  dropped 0  overruns 0  frame 0\n        TX packets 71  bytes 8490 (8.4 KB)\n        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0\n\nenp0s8: flags=4163<UP,BROADCAST,RUNNING,MULTICAST>  mtu 1500\n        inet 192.168.56.101  netmask 255.255.255.0  broadcast 192.168.56.255\n        inet6 fe80::a00:27ff:fe59:b311  prefixlen 64  scopeid 0x20<link>\n        ether 08:00:27:59:b3:11  txqueuelen 1000  (Ethernet)\n        RX packets 1068  bytes 98415 (98.4 KB)\n        RX errors 0  dropped 0  overruns 0  frame 0\n        TX packets 791  bytes 132687 (132.6 KB)\n        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0\n\nlo: flags=73<UP,LOOPBACK,RUNNING>  mtu 65536\n        inet 127.0.0.1  netmask 255.0.0.0\n        inet6 ::1  prefixlen 128  scopeid 0x10<host>\n        loop  txqueuelen 1000  (Local Loopback)\n        RX packets 84  bytes 6368 (6.3 KB)\n        RX errors 0  dropped 0  overruns 0  frame 0\n        TX packets 84  bytes 6368 (6.3 KB)\n        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0"},{"path":"ubuntu-basic-configuration.html","id":"ufw","chapter":"章節 2 Ubuntu 的基本設定","heading":"2.5 UFW","text":"UFW（Uncomplicated Firewall）是預設在 Ubuntu 系統上的防火牆，這裡先為了下一節 OpenSSH 而打開埠號 60000。首先用 status 查詢 UFW 服務的狀態，這裡需要輸入超級使用者 (sudo) 的密碼。如果服務沒有啟用，使用指令 enable 啟動。用 status 確認防火牆狀態看來預設的 UFW 是關閉的接著用 enable 指令打開防火牆查詢防火牆狀態允許埠號 60000 從任何地方連入查詢防火牆狀態目前只有兩條規則，分別是 從任何地方連入埠號 60000 與 ipv6 從任何地方連入埠號 60000","code":"sudo systemctl status ufwsudo systemctl enable ufwsudo ufw statusStatus: inactivesudo ufw enablesudo ufw statusStatus: activesudo ufw allow 60000sudo ufw statusStatus: active\n\nTo                         Action      From\n--                         ------      ----\n60000                      ALLOW       Anywhere\n60000 (v6)                 ALLOW       Anywhere (v6)"},{"path":"ubuntu-basic-configuration.html","id":"windows-終端機","chapter":"章節 2 Ubuntu 的基本設定","heading":"2.6 Windows 終端機","text":"Windows 的用戶建議可以安裝 Windows 終端機。可以參考附錄的 Windows 終端機 介紹。","code":""},{"path":"ubuntu-basic-configuration.html","id":"openssh","chapter":"章節 2 Ubuntu 的基本設定","heading":"2.7 OpenSSH","text":"在這個小節會逐步解釋 OpenSSH 的使用方法，從 OpenSSH 客戶端安裝、產生 SSH 金鑰再來是連線。","code":""},{"path":"ubuntu-basic-configuration.html","id":"overview","chapter":"章節 2 Ubuntu 的基本設定","heading":"2.7.1 概述","text":"OpenSSH 是 SSH（Secure Shell）一個開源的版本。SSH 是一種透過 SSH 傳輸協定來管理系統、傳輸檔案的一個系統套件。它現在被廣泛的使用在各個資料中心與大企業中。\n圖 2.4: SSH 傳輸協定驗證流程 圖片來源：https://www.ssh.com/academy/ssh\n","code":""},{"path":"ubuntu-basic-configuration.html","id":"installing-openssh-client","chapter":"章節 2 Ubuntu 的基本設定","heading":"2.7.2 安裝 OpenSSH 客戶端","text":"要連接到虛擬機器的 OpenSSH 伺服器之前，你需要有一個可以讓你連接的 OpenSSH 用戶端。如果你是 Linux 或是 MacOS，通常都有內建 OpenSSH 用戶端，可以直接跳至下一節。如果是 Windows 系統，需要在選用功能裡面啟用 OpenSSH 用戶端。MacOS 或 其他 Unix-like 系統可以用指令 ssh 查詢 ssh 客戶端有無安裝，如沒有安裝可以使用套件管理程式安裝 openssh-server，以 Ubuntu 為例：Windows 系統Windows 11 已經有內建 OpenSSH 客戶端，要確認有無安裝一樣可以打開 PowerShell 並輸入 ssh 檢查指令有無安裝。如沒有安裝可以使用下列流程進行安裝Windows 11 的安裝流程：點擊「開始」點擊「開始」打開「設定⚙」打開「設定⚙」選取「應用程式」 ➜ 點選「選用功能」選取「應用程式」 ➜ 點選「選用功能」請在頁面頂端點選「檢視功能」，然後在搜尋列中搜尋「OpenSSH 用戶端」，點選安裝請在頁面頂端點選「檢視功能」，然後在搜尋列中搜尋「OpenSSH 用戶端」，點選安裝Windows 10 的安裝流程：點擊「開始」點擊「開始」打開「設定⚙」打開「設定⚙」選取「應用程式」 ➜ 「應用程式與功能」 ➜ 找到黑體字「程式與功能」，並點選下面的「選用功能」選取「應用程式」 ➜ 「應用程式與功能」 ➜ 找到黑體字「程式與功能」，並點選下面的「選用功能」在已安裝的篩選列上面篩選 ssh ，如果沒有，請在頁面頂端點選「新增功能」，找到「OpenSSH 用戶端」後，點選安裝在已安裝的篩選列上面篩選 ssh ，如果沒有，請在頁面頂端點選「新增功能」，找到「OpenSSH 用戶端」後，點選安裝安裝完成後，你可以打開命令提示字元或是 PowerShell 輸入指令 ssh 來確認是否安裝完成。如果正常出現指令描述，代表成功安裝。","code":"sudo apt install openssh-serversshusage: ssh [-46AaCfGgKkMNnqsTtVvXxYy] [-B bind_interface]\n           [-b bind_address] [-c cipher_spec] [-D [bind_address:]port]\n           [-E log_file] [-e escape_char] [-F configfile] [-I pkcs11]\n           [-i identity_file] [-J [user@]host[:port]] [-L address]\n           [-l login_name] [-m mac_spec] [-O ctl_cmd] [-o option] [-p port]\n           [-Q query_option] [-R address] [-S ctl_path] [-W host:port]\n           [-w local_tun[:remote_tun]] destination [command]"},{"path":"ubuntu-basic-configuration.html","id":"generating-ssh-keys","chapter":"章節 2 Ubuntu 的基本設定","heading":"2.7.3 產生 SSH 金鑰","text":"使用 ssh-keygen 指令產生金鑰，加密方式有 dsa、ecdsa、ecdsa-sk、ed25519、ed25519-sk 與 rsa，預設的加密方式是 rsa，詳細指令用法可以透過 ssh-keygen --help 指令查詢，這裡我們用最簡單的 ssh-keygen 指令。產生後，Windows 的用戶預設會把金鑰儲存在 C:\\Users\\<USERNAME>\\.ssh\\ 的位置，而 Linux 的用戶會儲存在 ~/.ssh/ 的位置。這裡會詢問你要不要把產生的 SSH 金鑰重新命名，如果沒有複數的金鑰一般不會動到它的名字，按 Enter↩︎，接續下一步。這一步再詢問你需不需要將 SSH 金鑰加密，如果加密了，每次連線都需要輸入密碼。如果怕麻煩不想設定密碼就留空按 Enter↩︎ 進入下一步。產生金鑰會順帶產生這個金鑰的指紋。產生完畢，儲存在 C:\\Users\\<USERNAME>\\.ssh\\id_rsa 的檔案是私鑰（private key），而另一個 id_rsa.pub 的檔案是公鑰（public key）。當你丟失了遠端主機的金鑰，你再也不能透過遠端存取遠端的伺服器，只能透過直接接觸那台主機來更新 SSH 金鑰，所以要妥善保存。","code":"ssh-keygenGenerating public/private rsa key pair.\nEnter file in which to save the key (C:\\Users\\<USERNAME>/.ssh/id_rsa):Created directory 'C:\\Users\\<USERNAME>/.ssh'.\nEnter passphrase (empty for no passphrase):\nEnter same passphrase again:Your identification has been saved in C:\\Users\\<USERNAME>/.ssh/id_rsa.\nYour public key has been saved in C:\\Users\\<USERNAME>/.ssh/id_rsa.pub.\nThe key fingerprint is:\nSHA256:8NE76AD294Tjze76pEPtvZgqaqw9OuCF7T8HWPo6fUc qaz85@DESKTOP-OH6HA84\nThe key's randomart image is:\n+---[RSA 3072]----+\n|                 |\n|         .       |\n|    o . . .      |\n|   . + o + .     |\n|  o + o S.+      |\n|.. = . =.E..     |\n|..o.o ..+.=.     |\n| ..+++.o.=.o.    |\n|  o**++.=** ..   |\n+----[SHA256]-----+"},{"path":"ubuntu-basic-configuration.html","id":"uploading-ssh-keys","chapter":"章節 2 Ubuntu 的基本設定","heading":"2.7.4 上傳 SSH 金鑰","text":"當你擁有了 SSH 金鑰，接下來要將公鑰上傳至遠端的伺服器。另外公鑰給別人看到是沒問題的，公鑰並不能用來產生私鑰，它是用來認證是否跟你所持有的私鑰相吻合。Linux 系統如果你是的系統是 Linux 那上傳的指令會稍微短一些，上傳至遠端電腦的指令如下:-: 參數代表的是你要上傳的公鑰的檔案路徑-: 參數代表的是你要上傳的公鑰的檔案路徑-p: p 參數則是目的地主機 OpenSSH 伺服器的埠號-p: p 參數則是目的地主機 OpenSSH 伺服器的埠號id_ed25519.pub 為我產生的公鑰，如果你前面是照著我的步驟產生，這裡應該改為 id_rsa.pubid_ed25519.pub 為我產生的公鑰，如果你前面是照著我的步驟產生，這裡應該改為 id_rsa.pub這裡的 asis 為第一章 使用者設定 的使用者這裡的 asis 為第一章 使用者設定 的使用者192.168.56.101 為我虛擬主機的 ip 位址，查詢 ip 位址可以先手動登入虛擬主機後，用 hostname -或是 ip addr show 指令查詢192.168.56.101 為我虛擬主機的 ip 位址，查詢 ip 位址可以先手動登入虛擬主機後，用 hostname -或是 ip addr show 指令查詢完成後會提示你已經可以使用 ssh 連線如果你是 Windows 的使用者也不用擔心有多複雜，一樣一行指令就能搞定，這裡我是參考(Christopher 2020)的教學，指令如下：$env:USERPROFILE 為 Windows 內建環境變數，會根據現在的使用者變更。如果我的使用者名稱為 qaz855175b 那 $env:USERPROFILE 就會產生 C:\\Users\\qaz855175b\\ 的字串，當然你可以直接把這行指令的公鑰路徑替換為 C:\\Users\\qaz855175b\\.ssh\\id_rsa.pub$env:USERPROFILE 為 Windows 內建環境變數，會根據現在的使用者變更。如果我的使用者名稱為 qaz855175b 那 $env:USERPROFILE 就會產生 C:\\Users\\qaz855175b\\ 的字串，當然你可以直接把這行指令的公鑰路徑替換為 C:\\Users\\qaz855175b\\.ssh\\id_rsa.pubid_rsa.pub 為剛剛產生的公鑰名稱id_rsa.pub 為剛剛產生的公鑰名稱asis 為 [user-configuration] 的預設使用者asis 為 [user-configuration] 的預設使用者192.168.56.101 為我虛擬主機的 ip 位址，查詢 ip 位址可以先手動登入虛擬主機後，用 hostname -或是 ip addr show 指令查詢192.168.56.101 為我虛擬主機的 ip 位址，查詢 ip 位址可以先手動登入虛擬主機後，用 hostname -或是 ip addr show 指令查詢其實 Linux 的 ssh-copy-id、和第一章安裝程式 ssh 環節的「由 Github 匯入（ssh-import-id-gh）」選項與這裡的 cat file >> ~/.ssh/authorized_keys 都是在做同一件事情，就是把公鑰貼到遠端伺服器的使用者家目錄的 authorized_keys 檔案裡面。接著按 Enter↩︎，跳出輸入密碼提示，這裡輸入預設的使用者密碼 asis輸入完後雖然沒有任何提示訊息，但其實已經可以使用 ssh 連線至遠端主機啦～","code":"ssh-copy-id -i ~/.ssh/id_ed25519.pub -p 22 asis@192.168.56.101/usr/bin/ssh-copy-id: INFO: Source of key(s) to be installed: \"/home/kuaz/.ssh/id_ed25519.pub\"\n/usr/bin/ssh-copy-id: INFO: attempting to log in with the new key(s), to filter out any that are already installed\n/usr/bin/ssh-copy-id: INFO: 1 key(s) remain to be installed -- if you are prompted now it is to install the new keys\n\nNumber of key(s) added: 1\n\nNow try logging into the machine, with:   \"ssh -p '22' 'asis@192.168.56.101'\"\nand check to make sure that only the key(s) you wanted were added.cat $env:USERPROFILE\\.ssh\\id_rsa.pub | ssh asis@192.168.56.101 \"cat >> ~/.ssh/authorized_keys\"asis@192.168.56.101's password:"},{"path":"ubuntu-basic-configuration.html","id":"testing-ssh-connection","chapter":"章節 2 Ubuntu 的基本設定","heading":"2.7.5 測試 SSH 連線","text":"最後，使用 ssh 指令連接至遠端主機。使用 ssh-keygen 產生的金鑰可以直接使用 ssh 指令連線。這裡介紹幾個常常與 ssh 一起出現的參數：-v：verbose，顯示連接時更詳細的訊息，除錯時常用-v：verbose，顯示連接時更詳細的訊息，除錯時常用-p：port，遠端伺服器的埠號-p：port，遠端伺服器的埠號-：手動指定私鑰位置-：手動指定私鑰位置指令參數通常會在指令後面隨後出現，參數名稱前面前面會插入 -，而參數名稱後面有時會需要加入詳細的設定，有時不用。參數與參數之間用空格隔開，詳細指令的使用方法可以在 Linux 系統用 man <指令名稱> 查詢假如我們要看連線的詳細訊息，且指定伺服器埠號為 60000 與指定私鑰檔案位置等等，組合起來就是:目前連線不需要加上任何參數，連線指令為：一樣地，asis 是使用者名稱，而 192.168.56.101 是 OpenSSH 伺服器的 ip 位址，輸入完後按 Enter↩︎。這邊打 yes 即可，確認連接目的地沒有錯之後，會把 fingerprint 寫入 ~/.ssh/known_hosts 中，以後不再詢問。這裡不用指定私鑰的原因是因為，當你用 ssh 連線至目的地伺服器且你沒有指定認證檔案（私鑰）時，ssh 會在將金鑰一個一個拿去詢問這個金鑰可不可以使用。連接成功！\n圖 2.5: Windows Terminal 下的 SSH 連接成功畫面\n測試完確認沒問題在下個章節會介紹一些設定，使 OpenSSH 伺服器更加安全。\n圖 2.6: VirtualBox 的虛擬主機終端機畫面\n","code":"ssh -v -p 60000 -i ~/.ssh/id_rsa asis@192.168.56.101ssh asis@192.168.56.101The authenticity of host '192.168.56.101 (192.168.56.101)' can't be established.\nECDSA key fingerprint is SHA256:/HoocrLXe63zycdlmkh/+U3RuUfkawNq/xA0gTJmqmM.\nAre you sure you want to continue connecting (yes/no/[fingerprint])?"},{"path":"ubuntu-basic-configuration.html","id":"openssh-server-configuration","chapter":"章節 2 Ubuntu 的基本設定","heading":"2.7.6 OpenSSH 伺服器設定","text":"變更 SSH 伺服器預設的埠號將 #Port 22 取消註解，並把 22 改成其他介於 1-65535 之間的數字。這裡我使用 60000。關閉密碼驗證將 PasswordAuthentication（以密碼驗證）設為 。使用 SSH 連線時，允許使用者密碼以輸入密碼驗證。當然如果密碼驗證為 ，且同時遺失 SSH 的 pair key 時，你就無法以 SSH 連線至遠端主機，需要使用其他方法補救。關閉遠端 root 登入避免 root 登入可以使系統避免過大的權限暴露。限制能使用 SSH 連線的使用者只允許特定的使用者使用 SSH 連線可大大降低風險。關閉無密碼的使用者使用 SSH將沒有密碼就可以登入的使用者撤銷 SSH 連線的權限。-t 參數可以測試 SSH 的設定是否有效，可以避免一些錯字造成的錯誤。將系統上的 SSH daemon 重新啟動，重新啟動 SSH 服務。確認 SSH 服務正常運行，沒有出現錯誤。最後指令 exit 斷開連線，再重新測試 ssh 遠端連線至伺服器，使用公鑰與私鑰驗證登入。連線成功。最後可以用 PowerShell 將設定檔寫入設定中切換資料夾至使用者資料夾中的 .ssh使用筆記本編輯設定將下列設定檔加入設定。接下來就可以用別名 vm 進行連線了","code":"sudo vim /etc/ssh/sshd_configPort 60000PasswordAuthentication noPermitRootLogin noAllowUsers asisPermitEmptyPasswords nosudo sshd -tsudo systemctl restart sshdsudo systemctl status sshd● ssh.service - OpenBSD Secure Shell server\n     Loaded: loaded (/lib/systemd/system/ssh.service; enabled; vendor preset: enabled)\n     Active: active (running) since Sun 2021-08-15 16:08:55 UTC; 19h ago\n       Docs: man:sshd(8)\n             man:sshd_config(5)\n    Process: 850 ExecStartPre=/usr/sbin/sshd -t (code=exited, status=0/SUCCESS)\n   Main PID: 893 (sshd)\n      Tasks: 1 (limit: 4617)\n     Memory: 5.4M\n     CGroup: /system.slice/ssh.service\n             └─893 sshd: /usr/sbin/sshd -D [listener] 0 of 10-100 startups\n\nAug 15 16:08:54 asis01 systemd[1]: Starting OpenBSD Secure Shell server...\nAug 15 16:08:55 asis01 sshd[893]: Server listening on 0.0.0.0 port 60000.\nAug 15 16:08:55 asis01 sshd[893]: Server listening on :: port 60000.\nAug 15 16:08:55 asis01 systemd[1]: Started OpenBSD Secure Shell server.ssh -p 60000 asis@192.168.56.101Welcome to Ubuntu 22.04.3 LTS (GNU/Linux 5.15.0-79-generic x86_64)\n\n * Documentation:  https://help.ubuntu.com\n * Management:     https://landscape.canonical.com\n * Support:        https://ubuntu.com/advantage\n\n  System information as of Tue Aug 15 06:04:51 AM UTC 2023\n\n  System load:  0.173828125        Processes:               131\n  Usage of /:   0.3% of 974.24GB   Users logged in:         0\n  Memory usage: 13%                IPv4 address for enp0s3: 10.0.2.15\n  Swap usage:   0%                 IPv4 address for enp0s8: 192.168.56.101\n\n * Strictly confined Kubernetes makes edge and IoT secure. Learn how MicroK8s\n   just raised the bar for easy, resilient and secure K8s cluster deployment.\n\n   https://ubuntu.com/engage/secure-kubernetes-at-the-edge\n\nExpanded Security Maintenance for Applications is not enabled.\n\n3 updates can be applied immediately.\nTo see these additional updates run: apt list --upgradable\n\nEnable ESM Apps to receive additional future security updates.\nSee https://ubuntu.com/esm or run: sudo pro status\n\n\nLast login: Tue Aug 15 06:04:51 2023 from 192.168.56.1cd $env:USERPROFILE\\.sshnotepad config.Host vm\n    Hostname 192.168.56.101\n    User asis\n    Port 60000ssh vm"},{"path":"lamp-程式集.html","id":"lamp-程式集","chapter":"章節 3 LAMP 程式集","heading":"章節 3 LAMP 程式集","text":"LAMP 是由 4 個單字開頭的字組成的詞。 LAMP 讓你可以在一台系統為 Linux 的電腦上，用 Apache 架設網站伺服器，其中資料儲存在 MySQL 裡面，最後用 PHP 執行動態的網站。這章會教你怎麼安裝 LAMP 程式集。","code":""},{"path":"lamp-程式集.html","id":"事前準備","chapter":"章節 3 LAMP 程式集","heading":"3.1 事前準備","text":"在安裝軟體之前，你需要有一個可以執行 sudo 指令的使用者。 如果你是照著先前的教學做的話，這個使用者為安裝時的預設使用者 asis。","code":""},{"path":"lamp-程式集.html","id":"apache","chapter":"章節 3 LAMP 程式集","heading":"3.2 Apache","text":"Apache HTTP Server（簡稱 Apache），是一個開放原始碼的程式，被用來當作網頁的伺服器，是目前流行的網頁伺服器之一。","code":""},{"path":"lamp-程式集.html","id":"概述","chapter":"章節 3 LAMP 程式集","heading":"3.2.1 概述","text":"本章節會講述 Apache 網頁伺服器的安裝與防火牆的安全性設定。","code":""},{"path":"lamp-程式集.html","id":"安裝-apache","chapter":"章節 3 LAMP 程式集","heading":"3.2.2 安裝 Apache","text":"首先先更新套件管理程式（APT）的來源：確認是否是我們要安裝的 Apache 版本可以從套件的描述看到，確實是我們要的 Apache HTTP Server。接著進行安裝 Apache2。這裡用鍵盤輸入 y 後按 Enter↩︎ 送出。也可以在安裝時加上 --yes 或是 -y 略過確認安裝提示。","code":"sudo apt updatesudo apt info apache2Package: apache2\nVersion: 2.4.52-1ubuntu4.6\nPriority: optional\nSection: web\nOrigin: Ubuntu\nMaintainer: Ubuntu Developers <ubuntu-devel-discuss@lists.ubuntu.com>\nOriginal-Maintainer: Debian Apache Maintainers <debian-apache@lists.debian.org>\nBugs: https://bugs.launchpad.net/ubuntu/+filebug\nInstalled-Size: 546 kB\nProvides: httpd, httpd-cgi\nPre-Depends: init-system-helpers (>= 1.54~)\nDepends: apache2-bin (= 2.4.52-1ubuntu4.6), apache2-data (= 2.4.52-1ubuntu4.6), apache2-utils (= 2.4.52-1ubuntu4.6), lsb-base, mime-support, perl:any, procps\nRecommends: ssl-cert\nSuggests: apache2-doc, apache2-suexec-pristine | apache2-suexec-custom, www-browser, ufw\nConflicts: apache2.2-bin, apache2.2-common\nReplaces: apache2.2-bin, apache2.2-common\nHomepage: https://httpd.apache.org/\nTask: lamp-server\nDownload-Size: 97.8 kB\nAPT-Sources: http://tw.archive.ubuntu.com/ubuntu jammy-updates/main amd64 Packages\nDescription: Apache HTTP Server\n The Apache HTTP Server Project's goal is to build a secure, efficient and\n extensible HTTP server as standards-compliant open source software. The\n result has long been the number one web server on the Internet.\n .\n Installing this package results in a full installation, including the\n configuration files, init scripts and support scripts.\n\nN: There are 2 additional records. Please use the '-a' switch to see them.sudo apt install apache2Reading package lists... Done\nBuilding dependency tree       \nReading state information... Done\nThe following additional packages will be installed:\n  apache2-bin apache2-data apache2-utils libapr1 libaprutil1 libaprutil1-dbd-sqlite3 libaprutil1-ldap\n  libjansson4 liblua5.2-0 ssl-cert\nSuggested packages:\n  apache2-doc apache2-suexec-pristine | apache2-suexec-custom www-browser openssl-blacklist\nThe following NEW packages will be installed:\n  apache2 apache2-bin apache2-data apache2-utils libapr1 libaprutil1 libaprutil1-dbd-sqlite3\n  libaprutil1-ldap libjansson4 liblua5.2-0 ssl-cert\n0 upgraded, 11 newly installed, 0 to remove and 0 not upgraded.\nNeed to get 1,865 kB of archives.\nAfter this operation, 8,083 kB of additional disk space will be used.\nDo you want to continue? [Y/n] sudo apt install apache2 -y"},{"path":"lamp-程式集.html","id":"調整防火牆設定","chapter":"章節 3 LAMP 程式集","heading":"3.2.3 調整防火牆設定","text":"有些程式會自動把設定檔加入 UFW 中，這樣就可以透過設定檔啟用/關閉設定防火牆允許的埠號，不用再特別記下該軟體的設定，像是 Apache 就是其中之一。透過指令顯示有什麼可用的應用程式設定檔。下列是目前可用的設定檔：Apache：會在防火牆新增一個允許從任何地方連線至埠號 80 的規則。Apache：會在防火牆新增一個允許從任何地方連線至埠號 80 的規則。Apache Full：會在防火牆新增一個允許從任何地方連線至埠號 80 與埠號 443 的規則。Apache Full：會在防火牆新增一個允許從任何地方連線至埠號 80 與埠號 443 的規則。Apache Secure：在防火牆新增一個允許從任何地方連線至埠號 443 的規則。Apache Secure：在防火牆新增一個允許從任何地方連線至埠號 443 的規則。使用方式很簡單，跟允許埠號時的指令一樣，把埠號改成設定檔名稱即可。確認剛才有沒有新增成功：接著可以透過瀏覽器連線到下列網址：就是前一章記下來的 192.168.56.1\n圖 3.1: Apache 安裝後，預設的首頁\n忘記怎麼找 ip 可以用下列的方法找到：ip addr show | grep -B 2 \"inet \"網路介面卡 enp0s8 上面的 inet 後面的數字就是 IP。另一張網卡 enp0s3 是 NAT 網路的 IP。這裡我們應該用前者的 IP 作為網址。hostname -I同樣地，192.168.56.1 才是我們需要的 IP。","code":"sudo ufw app listAvailable applications:\n  Apache\n  Apache Full\n  Apache Secure\n  OpenSSHsudo ufw allow \"Apache\"Rule added\nRule added (v6)sudo ufw statusStatus: active\n\nTo                         Action      From\n--                         ------      ----\n60000                      ALLOW       Anywhere                  \nApache                     ALLOW       Anywhere                  \n60000 (v6)                 ALLOW       Anywhere (v6)             \nApache (v6)                ALLOW       Anywhere (v6) http://<虛擬主機的 ip 位址>/1: lo: <LOOPBACK,UP,LOWER_UP> mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000\n    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00\n    inet 127.0.0.1/8 scope host lo\n--\n2: enp0s3: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc fq_codel state UP group default qlen 1000\n    link/ether 08:00:27:d3:c8:05 brd ff:ff:ff:ff:ff:ff\n    inet 10.0.2.15/24 metric 100 brd 10.0.2.255 scope global dynamic enp0s3\n--\n3: enp0s8: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc fq_codel state UP group default qlen 1000\n    link/ether 08:00:27:59:b3:11 brd ff:ff:ff:ff:ff:ff\n    inet 192.168.56.101/24 metric 100 brd 192.168.56.255 scope global dynamic enp0s810.0.2.15 192.168.56.1"},{"path":"lamp-程式集.html","id":"mysql","chapter":"章節 3 LAMP 程式集","heading":"3.3 MySQL","text":"MySQL（讀作 -S-Q-L）因為其效能高、成本低、可信賴的原因，被廣大企業所使用，目前也是受歡迎的開放原始碼資料庫系統之一。","code":""},{"path":"lamp-程式集.html","id":"概述-1","chapter":"章節 3 LAMP 程式集","heading":"3.3.1 概述","text":"這個小節會說明怎麼安裝 MySQL，與做簡易的安裝後設定。","code":""},{"path":"lamp-程式集.html","id":"安裝-mysql","chapter":"章節 3 LAMP 程式集","heading":"3.3.2 安裝 MySQL","text":"首先，透過 Apt 安裝 MySQL：","code":"sudo apt info mysql-serverPackage: mysql-server\nVersion: 8.0.34-0ubuntu0.22.04.1\nPriority: optional\nSection: database\nSource: mysql-8.0\nOrigin: Ubuntu\nMaintainer: Ubuntu Developers <ubuntu-devel-discuss@lists.ubuntu.com>\nOriginal-Maintainer: Debian MySQL Maintainers <pkg-mysql-maint@lists.alioth.debian.org>\nBugs: https://bugs.launchpad.net/ubuntu/+filebug\nInstalled-Size: 35.8 kB\nDepends: mysql-server-8.0\nHomepage: http://dev.mysql.com/\nTask: lamp-server\nDownload-Size: 9,460 B\nAPT-Sources: http://tw.archive.ubuntu.com/ubuntu jammy-updates/main amd64 Packages\nDescription: MySQL database server (metapackage depending on the latest version)\n This is an empty package that depends on the current \"best\" version of\n mysql-server (currently mysql-server-8.0), as determined by the MySQL\n maintainers. Install this package if in doubt about which MySQL\n version you need. That will install the version recommended by the\n package maintainers.\n .\n MySQL is a fast, stable and true multi-user, multi-threaded SQL database\n server. SQL (Structured Query Language) is the most popular database query\n language in the world. The main goals of MySQL are speed, robustness and\n ease of use.\n\nN: There is 1 additional record. Please use the '-a' switch to see itsudo apt install mysql-server -y"},{"path":"lamp-程式集.html","id":"設定-mysql","chapter":"章節 3 LAMP 程式集","heading":"3.3.3 設定 MySQL","text":"指令 mysql_secure_installation 會做以下幾件事（詳細的說明可以在這裡找到）：你可以設定 root 帳號的密碼。你可以設定 root 帳號的密碼。你可以移除 root 帳號預設可以從任何地方連線至本機的設定。你可以移除 root 帳號預設可以從任何地方連線至本機的設定。你可以移除沒有名稱的匿名帳號（anonymous-user）詳細說明可以從這裡找到。你可以移除沒有名稱的匿名帳號（anonymous-user）詳細說明可以從這裡找到。你可以移除預設的 test 資料庫（這個資料庫任何人都可以存取，甚至是匿名帳號），和任何使用者名稱是 test_ 開頭的使用者帳號可以存取任何資料庫的權限。你可以移除預設的 test 資料庫（這個資料庫任何人都可以存取，甚至是匿名帳號），和任何使用者名稱是 test_ 開頭的使用者帳號可以存取任何資料庫的權限。安裝完成後，打下面這段指令啟動 MySQL 安全安裝程序。建議這裡選 。如果這裡選了 Yes，那之後只要是創建使用者都會要求你使用密碼強度很高的密碼，因為要設定複雜的密碼，所以不適合給學生使用。這個版本預設是使用 auth_socket 插件驗證，如果系統檢測到你的使用者名稱與 MySQL 中的使用者名稱相同，則允許登入。例如：sudo mysql 會以 root 的使用者執行指令，此時使用者會是 root，且 root 在資料庫中有帳號，最終會允許 root 登入資料庫。這個階段是問你要不要刪除匿名帳號，輸入 Yes這裏是問你要不要讓 root 帳號可以從任何地方連入，這裡當然是選 No如果選擇Yes，會將使用者帳號的可連線網域設為 ％，代表任何地方都可以連入的意思MySQL 安裝後，有內建一個叫做 test 的資料庫，用於學習怎麼使用 MySQL。這裡可以選擇將它移除或是保留。這裡會詢問要不要重新讀取權限表，選 Y 即可。完成！最後使用指令測試 MySQL 連線：--user, -u：使用者帳號","code":"sudo mysql_secure_installationSecuring the MySQL server deployment.\n\nConnecting to MySQL using a blank password.\n\nVALIDATE PASSWORD COMPONENT can be used to test passwords\nand improve security. It checks the strength of password\nand allows the users to set only those passwords which are\nsecure enough. Would you like to setup VALIDATE PASSWORD component?\n\nPress y|Y for Yes, any other key for No:Skipping password set for root as authentication with auth_socket is used by default.\nIf you would like to use password authentication instead, this can be done with the \"ALTER_USER\" command.\nSee https://dev.mysql.com/doc/refman/8.0/en/alter-user.html#alter-user-password-management for more information.By default, a MySQL installation has an anonymous user,\nallowing anyone to log into MySQL without having to have\na user account created for them. This is intended only for\ntesting, and to make the installation go a bit smoother.\nYou should remove them before moving into a production\nenvironment.\n\nRemove anonymous users? (Press y|Y for Yes, any other key for No) : yNormally, root should only be allowed to connect from\n'localhost'. This ensures that someone cannot guess at\nthe root password from the network.\n\nDisallow root login remotely? (Press y|Y for Yes, any other key for No) :By default, MySQL comes with a database named 'test' that\nanyone can access. This is also intended only for testing,\nand should be removed before moving into a production\nenvironment.\n\n\nRemove test database and access to it? (Press y|Y for Yes, any other key for No) : - Dropping test database...\nSuccess.\n\n - Removing privileges on test database...\nSuccess.\n\nReloading the privilege tables will ensure that all changes\nmade so far will take effect immediately.\n\nReload privilege tables now? (Press y|Y for Yes, any other key for No) :Success.\n\nAll done!sudo mysql -u root"},{"path":"lamp-程式集.html","id":"php","chapter":"章節 3 LAMP 程式集","heading":"3.4 PHP","text":"PHP（Hypertext PreProcessor，超文字預處理器），允許網頁開發人員開發動態網頁，截至2021年被世界上至少70%以上的網頁所使用。","code":""},{"path":"lamp-程式集.html","id":"安裝-php","chapter":"章節 3 LAMP 程式集","heading":"3.4.1 安裝 PHP","text":"除了 php 套件之外，libapache2-mod-php 套件是讓 apache2 認識 php 這個檔案，而 php-mysql 是讓 PHP 與 MySQL 溝通的套件。\nTODO: 連結至第五章 python 說明 -指令 -->","code":"sudo apt install php libapache2-mod-php php-mysql"},{"path":"lamp-程式集.html","id":"建立虛擬網站","chapter":"章節 3 LAMP 程式集","heading":"3.4.2 建立虛擬網站","text":"虛擬網站（Virtual Host）可以讓你在一台電腦同時架設多個網站，擁有不同的域名。在這裡的用處就是建立一個新的網站。首先，於 apache2 的設定資料夾中，新建一個叫做 asis.conf 的設定檔：寫入測試用的設定/etc/apache2/sites-available/asis.confServerAdmin：現在這個變數已經被棄用了，在 Apache 先前的版本當伺服器出錯時會顯示聯絡管理員的方式。而現階段版本還是有點用的，你可以在 PHP 中呼叫 $_SERVER['SERVER_ADMIN'] 變數會顯示 ServerAdmin 所設定的 Email。ServerAdmin：現在這個變數已經被棄用了，在 Apache 先前的版本當伺服器出錯時會顯示聯絡管理員的方式。而現階段版本還是有點用的，你可以在 PHP 中呼叫 $_SERVER['SERVER_ADMIN'] 變數會顯示 ServerAdmin 所設定的 Email。DocumentRoot：網站的根目錄DocumentRoot：網站的根目錄ErrorLog：錯誤訊息路徑ErrorLog：錯誤訊息路徑CustomLog：設定 Log 的檔案名稱與格式，詳細說明在此CustomLog：設定 Log 的檔案名稱與格式，詳細說明在此透過 list 指令可以看到，資料夾的擁有者是 root。 我們在安裝 Apache2 的部分從 http://<虛擬主機的 ip 地址>/ 看到的就是位於 /var/www/html/ 中的首頁，接下來我們要刪除 Apache2 預設的設定，並測試自己建立的虛擬網站（VirtualHost）。一樣地，以同樣地方法建立 asis 資料夾產生一個測試用的首頁使用 a2dissite 指令關閉預設的設定檔。\n接著，啟用剛才創立的設定檔 asis.conf重新讀取剛才變更的設定，使新的設定生效接著至瀏覽器打上虛擬機器的 ip 位址\n圖 3.2: Apache2 測試虛擬網站設定\n或是直接在終端機中使用指令 curl 測試 asis.conf 設定檔：","code":"sudo vim /etc/apache2/sites-available/asis.conf<VirtualHost *:80>\n    ServerAdmin webmaster@localhost\n    DocumentRoot /var/www/asis\n    ErrorLog ${APACHE_LOG_DIR}/error.log\n    CustomLog ${APACHE_LOG_DIR}/access.log combined\n<\/VirtualHost>ls -al /var/www/total 16\ndrwxr-xr-x  4 root root 4096 Aug 22 02:50 .\ndrwxr-xr-x 14 root root 4096 Aug 21 05:16 ..\ndrwxr-xr-x  2 root root 4096 Aug 21 05:16 htmlsudo mkdir /var/www/asissudo vim /var/www/asis/index.html<!DOCTYPE html>\n<html lang=\"zh-TW\">\n<head>\n  <meta charset=\"UTF-8\">\n  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n  <title>Apache VirtualHost config test<\/title>\n<\/head>\n<body>\n  <h1>成功!<\/h1>\n  <p>您的 Apache2 虛擬網站的設定順利運作中。<\/p>\n<\/body>\n<\/html>sudo a2dissite 000-default.confSite 000-default disabled.\nTo activate the new configuration, you need to run:\n  systemctl reload apache2sudo a2ensite asis.confsudo systemctl reload apache2http://<虛擬主機的 ip 地址>/curl http://<虛擬主機的 ip 地址>/<!DOCTYPE html>\n<html lang=\"zh-TW\">\n<head>\n  <meta charset=\"UTF-8\">\n  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n  <title>Apache VirtualHost config test<\/title>\n<\/head>\n<body>\n  <h1>成功!<\/h1>\n  <p>您的 Apache2 虛擬網站的設定順利運作中。<\/p>\n<\/body>\n<\/html>"},{"path":"lamp-程式集.html","id":"測試-php","chapter":"章節 3 LAMP 程式集","heading":"3.4.3 測試 PHP","text":"在網站資料夾中新增一個 info.php 檔案貼入以下程式碼進到網站 http://192.168.56.101/info.php\n圖 3.3: Apache2 測試 PHP\n成功顯示目前 PHP 的所有設定。測試完後記得要刪除 info.php。","code":"sudo vim /var/www/asis/info.php<?php\nphpinfo();\nsudo rm /var/www/asis/info.php"},{"path":"lamp-程式集.html","id":"phpmyadmin","chapter":"章節 3 LAMP 程式集","heading":"3.5 phpMyAdmin","text":"phpMyAdmin 是一個以 PHP 為基礎撰寫的一個軟體，可以讓使用者以簡易的方式新增、查詢、修改或是刪除資料庫裡面的紀錄。","code":""},{"path":"lamp-程式集.html","id":"概述-2","chapter":"章節 3 LAMP 程式集","heading":"3.5.1 概述","text":"本小節會說明怎麼安裝 phpMyAdmin 與基礎的安全性設定。","code":""},{"path":"lamp-程式集.html","id":"安裝-phpmyadmin","chapter":"章節 3 LAMP 程式集","heading":"3.5.2 安裝 phpMyAdmin","text":"一樣地，確認 phpmyadmin 的版本確認完畢後安裝這裏用空白鍵勾選 apache2 使中括號中變成星號 *\n圖 3.4: phpMyAdmin 安裝導覽\n這裏選擇 Yes 即可除非你想對 phpmyadmin 做更詳細的設定\n圖 3.5: phpMyAdmin 安裝導覽\n留空會自動產生供 phpmyadmin 連線至 MySQL 用的密碼，所以這裡直接按 Ok\n圖 3.6: phpMyAdmin 安裝導覽\n當出現此錯誤時不用太慌張，是因為安裝 MySQL 時，有開啟 Validate Password 插件導致的，只需要透過下列指令暫時關閉即可。\n圖 3.7: phpMyAdmin 安裝導覽，錯誤訊息\n以 root 登入資料庫解除安裝插件 valid password在安裝一次 phpmyadmin將 valid password 裝回去重新啟動 Apache2從網站進入 phpMyAdmin 操作介面如果找不到是正常的（如下圖），在 Ubuntu 20.04 安裝 phpMyAdmin 時，沒有正確的設定到 phpMyAdmin。 可以參考這裡三樓的解法：\n圖 3.8: phpMyAdmin 沒有成功設定的頁面\n手動軟連結到 Apache2 的設定資料夾接著啟動 phpMyAdmin 的設定檔重新啟動 Apache2再從瀏覽器嘗試一次連線成功～ 🎊\n圖 3.9: phpMyAdmin 頁面\n因為目前 MySQL 的版本 root 帳號驗證方式是使用 socket_auth。但是，phpMyAdmin 預設帳戶需要有密碼當入，所以這裡有兩個做法：創建一個新的擁有所有權限的使用者用 root 權限進入 MySQL 指令介面建立一個使用密碼 asis0721 驗證的使用者 asis賦予所有權限在 asis 使用者上立刻刷新權限，使權限立即生效將原本的帳號認證方式改掉用 root 權限進入 MySQL 指令介面將 root 使用者改為使用密碼 notSecureChangeMe 驗證一旦將 root 使用者的驗證方式改成用密碼驗證，那往後登入 MySQL 的指令介面都需要加上提供密碼參數 -p","code":"sudo apt info phpmyadminPackage: phpmyadmin\nVersion: 4:5.1.1+dfsg1-5ubuntu1\nPriority: optional\nSection: universe/web\nOrigin: Ubuntu\nMaintainer: Ubuntu Developers <ubuntu-devel-discuss@lists.ubuntu.com>\nOriginal-Maintainer: phpMyAdmin Packaging Team <team+phpmyadmin@tracker.debian.org>\nBugs: https://bugs.launchpad.net/ubuntu/+filebug\nInstalled-Size: 36.5 MB\n[...]sudo apt install phpmyadmin --yesmysql -u root -puninstall component 'file://component_valid_password';exit;sudo apt install phpmyadmin --yesmysql -u root -pinstall component 'file://component_valid_password'exit;sudo systemctl restart apache2http://<虛擬主機的 ip 地址>/phpmyadmin/sudo ln -s /etc/phpmyadmin/apache.conf /etc/apache2/conf-available/phpmyadmin.confsudo a2enconf phpmyadminsudo systemctl restart apache2http://<虛擬主機的 ip 地址>/phpmyadmin/sudo mysqlCREATE USER 'asis'@'localhost' IDENTIFIED BY 'asis0721';GRANT ALL PRIVILEGES ON *.* TO 'asis'@'localhost';FLUSH PRIVILEGES;sudo mysqlALTER USER 'root'@'localhost' IDENTIFIED WITH caching_sha2_password BY 'notSecureChangeMe';mysql -u root -p"},{"path":"lamp-程式集.html","id":"設定-phpmyadmin","chapter":"章節 3 LAMP 程式集","heading":"3.5.3 設定 phpMyAdmin","text":"預設的網址 http://<虛擬機器的 ip 位置>/phpmyadmin 實在是太危險了，如果有人有意破壞，又被猜到管理員的密碼，那將會一發不可收拾，所以接下來要改的是 phpMyAdmin 在 Apache2 中的設定，將預設的位置改掉至少會安全一點。/etc/phpmyadmin/apache.conf因為 /etc/phpmyadmin/apache.conf 已軟連結（soft-link）至 /etc/apache2/conf-available/phpmyadmin.conf 所以變更apache.conf 時，位於 Apache2 中的設定檔也會跟著變更。重新啟動 Apache2從新的 ip 位址進入\n圖 3.10: 剛才更新的路由\n","code":"sudo vim /etc/phpmyadmin/apache.conf# phpMyAdmin default Apache configuration\n\nAlias /sql /usr/share/phpmyadmin # 變更這裡\n\n<Directory /usr/share/phpmyadmin>\n    Options SymLinksIfOwnerMatch\n    DirectoryIndex index.php\n    AllowOverride All # 新增這行\n\n    [...]\n\n<\/Directory>\n\n[...]sudo systemctl restart apache2http://<虛擬機器的 ip 位址>/sql/"},{"path":"rstudio-rshiny-server.html","id":"rstudio-rshiny-server","chapter":"章節 4 RStudio & RShiny Server","heading":"章節 4 RStudio & RShiny Server","text":"本章節會說明怎麼安裝 RStudio 與 RShiny Server 到系統上。","code":""},{"path":"rstudio-rshiny-server.html","id":"事前準備-1","chapter":"章節 4 RStudio & RShiny Server","heading":"4.1 事前準備","text":"先確認目前的使用者 asis 擁有 sudo 的權限。","code":""},{"path":"rstudio-rshiny-server.html","id":"r","chapter":"章節 4 RStudio & RShiny Server","heading":"4.2 R","text":"R 是一個跨平台的統計繪圖開放原始碼軟體。除了 R 基本的功能之外，還有龐大的社群一起合作創造新的功能，使 R 的功能更為豐富。","code":""},{"path":"rstudio-rshiny-server.html","id":"安裝-r-base","chapter":"章節 4 RStudio & RShiny Server","heading":"4.2.1 安裝 R Base","text":"安裝軟體之前，先更新套件管理程式的來源再來安裝安裝 r-base 所需要的程式 software-properties-common 與 dirmngr。切換到暫存資料夾後，將 GPG 簽名下載下來，添加至目的地添加 apt 來源安裝 r-base","code":"sudo apt updatesudo apt install software-properties-common dirmngr --yescd /tmp && \\\n    wget -qO- https://cloud.r-project.org/bin/linux/ubuntu/marutter_pubkey.asc \\\n    | sudo tee -a /etc/apt/trusted.gpg.d/cran_ubuntu_key.ascsudo add-apt-repository \"deb https://cloud.r-project.org/bin/linux/ubuntu $(lsb_release -cs)-cran40/\" -ysudo apt install r-base --yes"},{"path":"rstudio-rshiny-server.html","id":"確認-r-base-是否成功安裝","chapter":"章節 4 RStudio & RShiny Server","heading":"4.2.2 確認 R Base 是否成功安裝","text":"在命令列介面下要確認 R 有無正常安裝很簡單，輸入一個大寫 R 就可以進到 R 的 Console。輸入下列指令查看 R 的相關訊息。確認沒問題後使用指令 q 退出。","code":"R\nsessionInfo()R version 4.3.1 (2023-06-16) -- \"Beagle Scouts\"\nCopyright (C) 2023 The R Foundation for Statistical Computing\nPlatform: x86_64-pc-linux-gnu (64-bit)\n\nR is free software and comes with ABSOLUTELY NO WARRANTY.\nYou are welcome to redistribute it under certain conditions.\nType 'license()' or 'licence()' for distribution details.\n\n  Natural language support but running in an English locale\n\nR is a collaborative project with many contributors.\nType 'contributors()' for more information and\n'citation()' on how to cite R or R packages in publications.\n\nType 'demo()' for some demos, 'help()' for on-line help, or\n'help.start()' for an HTML browser interface to help.\nType 'q()' to quit R.\nq(save='no')"},{"path":"rstudio-rshiny-server.html","id":"rstudio-server","chapter":"章節 4 RStudio & RShiny Server","heading":"4.3 RStudio Server","text":"RStudio Server 是 RStudio 的網頁版本，使用者可以透過網頁存取一個位於網路上的 RStudio。","code":""},{"path":"rstudio-rshiny-server.html","id":"安裝-rstudio-server","chapter":"章節 4 RStudio & RShiny Server","heading":"4.3.1 安裝 RStudio Server","text":"本小節會介紹怎麼安裝 RStudio Server 與設定 Apache 的反向代理。切到暫存資料夾後，自官網下載 rstudio 伺服器的安裝程式。這個指令會下載當前撰寫這個頁面的最新版本 RStudio Server。如果你想要下載最新版本請到官方的下載頁面確認。使用 gdebi 指令安裝 .deb 格式安裝程式將防火牆的 8787 埠號打開接著用瀏覽器進入下列網址\n圖 4.1: RStudio 登入頁面\n或是在shell中直接使用 curl 指令查看","code":"sudo apt install gdebi-core -ycd /tmp && \\\n    wget wget https://download2.rstudio.org/server/jammy/amd64/rstudio-server-2023.06.1-524-amd64.debsudo gdebi rstudio-server-2023.06.1-524-amd64.debsudo ufw allow 8787http://<虛擬主機的 ip 位址>:8787curl <虛擬主機的 ip 位址>:8787"},{"path":"rstudio-rshiny-server.html","id":"設定-apache-的反向代理","chapter":"章節 4 RStudio & RShiny Server","heading":"4.3.2 設定 Apache 的反向代理","text":"用指令 a2enmod 將 Apache 內建的插件啟用繼續編輯[Step 2 — 建立虛擬網站]所建立的 asis.conf在 VirtualHost 節點下面新增 RStudio Proxy 的區塊/etc/apache2/sites-available/asis.conf完成後需要重新啟動 Apache最後以瀏覽器打開下面的連結會發現，可以直接使用具有名字的路徑，透過反向代理，連結到目的地 8787 埠號。\n圖 4.2: 透過剛才更新的路由，所看到的 RStudio 登入頁面\n在前面開的 8787 埠號可以關掉了。我們可以在 status 的後面加上 numbered 可以將設定的編號也一起列出來，再藉由編號編輯該設定。刪除第 3 個設定（8787）刪除第 5 個設定（8787 (v6)），因為第 3 個設定刪除之後，原本在第 6 順位的設定就會往前移，重新編號。更動後的設定。","code":"sudo a2enmod proxy && \\\n    sudo a2enmod proxy_http && \\\n    sudo a2enmod proxy_wstunnel && \\\n    sudo a2enmod rewritesudo vim /etc/apache2/sites-available/asis.conf<VirtualHost *:80>\n    ServerAdmin webmaster@localhost\n    DocumentRoot /var/www/asis\n    ErrorLog ${APACHE_LOG_DIR}/error.log\n    CustomLog ${APACHE_LOG_DIR}/access.log combined\n\n    ###\n    # RStudio Proxy\n    ###\n    <proxy *>\n    Allow from localhost\n    <\/proxy>\n    RedirectMatch permanent ^/rstudio$ /rstudio/\n  \n    RewriteEngine on\n    RewriteCond %{HTTP:Upgrade} =websocket\n    RewriteRule /rstudio/(.*)     ws://localhost:8787/$1  [P,L]\n    RewriteCond %{HTTP:Upgrade} !=websocket\n    RewriteRule /rstudio/(.*)     http://localhost:8787/$1 [P,L]\n    ProxyPass /rstudio/ http://localhost:8787/\n    ProxyPassReverse /rstudio/ http://localhost:8787/\n    ProxyRequests Off\n<\/VirtualHost>sudo systemctl restart apache2http://<虛擬主機的 ip 位址>/rstudio/sudo ufw status numberedStatus: active\n\n     To                         Action      From\n     --                         ------      ----\n[ 1] 60000                      ALLOW IN    Anywhere\n[ 2] Apache Full                ALLOW IN    Anywhere\n[ 3] 8787                       ALLOW IN    Anywhere\n[ 4] 60000 (v6)                 ALLOW IN    Anywhere (v6)\n[ 5] Apache Full (v6)           ALLOW IN    Anywhere (v6)\n[ 6] 8787 (v6)                  ALLOW IN    Anywhere (v6)\nsudo ufw delete 3sudo ufw delete 5Status: active\n\n     To                         Action      From\n     --                         ------      ----\n[ 1] 60000                      ALLOW IN    Anywhere\n[ 2] Apache Full                ALLOW IN    Anywhere\n[ 3] 60000 (v6)                 ALLOW IN    Anywhere (v6)\n[ 4] Apache Full (v6)           ALLOW IN    Anywhere (v6)\n"},{"path":"rstudio-rshiny-server.html","id":"r-shiny-server","chapter":"章節 4 RStudio & RShiny Server","heading":"4.4 R Shiny Server","text":"RShiny Server 是一個可以讓 Shiny App 部署在伺服器上，透過特定的網址啟動特定的 Shiny App。","code":""},{"path":"rstudio-rshiny-server.html","id":"概述-3","chapter":"章節 4 RStudio & RShiny Server","heading":"4.4.1 概述","text":"本小節會說明怎麼安裝 R Shiny Server 在 Ubuntu 上、設定 Apache 的反向代理、再來對 R Shiny Server 做更進階的設定，最後驗證剛才的設定是否有效。","code":""},{"path":"rstudio-rshiny-server.html","id":"安裝-r-shiny-server","chapter":"章節 4 RStudio & RShiny Server","heading":"4.4.2 安裝 R Shiny Server","text":"首先透過一行指令用 root 權限安裝 shiny 套件。su 指令可以用來切換使用者，不過我們這裡的用法是切換到 root 並執行指令的指令。- [使用者]：如果不指定使用者，將會以 root 代替- [使用者]：如果不指定使用者，將會以 root 代替--command, -c：需要目標使用者執行的指令--command, -c：需要目標使用者執行的指令R 除了可以開啟互動式的 R Console 之外，也可以使用 -e 參數讓 R 僅執行 R 指令，完成後即退出。接下來切換目錄到 /tmp 資料夾並下載 R Shiny Server 安裝程式。這個指令會下載當前撰寫這個頁面的最新版本 R Shiny Server。如果你想要下載最新版本請到官方的下載頁面確認。依樣地，使用 gdebi 指令安裝 .deb 格式安裝程式最後從 http://<虛擬機器的 ip 位址>:3838 進入 R Shiny Server 首頁\n圖 4.3: R Shiny Server 首頁\n如果右下角顯示的是錯誤訊息，代表伺服器沒有安裝 rmarkdown 套件，下列指令安裝即可：","code":"sudo su - -c \"R -e \\\"install.packages('shiny', repos='https://cran.rstudio.com/')\\\"\"cd /tmp && \\\n    wget https://download3.rstudio.org/ubuntu-18.04/x86_64/shiny-server-1.5.20.1002-amd64.debsudo su - \\\n    -c \"R -e \\\"install.packages('rmarkdown')\\\"\""},{"path":"rstudio-rshiny-server.html","id":"step-2-設定-apache-的反向代理","chapter":"章節 4 RStudio & RShiny Server","heading":"4.4.3 Step 2 — 設定 Apache 的反向代理","text":"繼續編輯 Apache 的網頁設定文件 asis.conf一樣地，將 R Shiny Server 的設定也一同放入設定檔案中。/etc/apache2/sites-available/asis.conf編輯完成後，須重新啟動 Apache2最後使用已命名的網址進入 R Shiny Server 首頁\n圖 4.4: 透過 Apache 反向代理進入的R Shiny Server 首頁\n","code":"sudo vim /etc/apache2/sites-available/asis.conf<VirtualHost *:80>\n    [...]\n\n    ###\n    # RStudio Proxy\n    ###\n    [...]\n    \n    ###\n    # RShiny Server Proxy\n    ###\n    RedirectMatch permanent ^/shiny$ /shiny/\n    \n    RewriteCond %{HTTP:Upgrade} =websocket\n    RewriteRule /shiny/(.*) ws://localhost:3838/$1 [P,L]\n    RewriteCond %{HTTP:Upgrade} !=websocket\n    RewriteRule /shiny/(.*) http://localhost:3838/$1 [P,L]\n    ProxyPass /shiny/ http://localhost:3838/\n    ProxyPassReverse /shiny/ http://localhost:3838/\n<\/VirtualHost>sudo systemctl restart apache2http://<虛擬機器的 ip 地址>/shiny/"},{"path":"rstudio-rshiny-server.html","id":"step-3-r-shiny-server-進階設定","chapter":"章節 4 RStudio & RShiny Server","heading":"4.4.4 Step 3 — R Shiny Server 進階設定","text":"這個步驟會編輯 R Shiny Server 的設定，可以根據需求去區分 Shiny App，例如我想要使用者群組為學生的放在一起，為教師的使用者群組放在一起，都是做得到的。更詳盡的設定可以看 R Shiny Server 官方的說明文件設定。首先我們先編輯 Shiny Server 的設定檔案：/etc/shiny-server/shiny-server.conf這裡的 run_as 設定的 :HOME_USER: 會將符合 members_of 所指定的群組的使用者家目錄底下的資料夾（~/ShinyApps）有效，會以該使用者所安裝的 R 套件為第一優先執行 Shiny Apps，如果使用者家目錄沒有安裝該套件才會落到 R 的系統套件。這個方法能讓系統不用常常以管理員的權限安裝套件，讓使用者可以自己安裝所需的套件，達到減少管理員工作的目的。而緊接在 :HOME_USER: 後面的使用者是 shiny 預設執行 Shiny Apps 的使用者。access_log 是存放任何人透過網址執行 Shiny Apps 的所有訊息的位置，而後面的 tiny 字樣是設定紀錄的詳細程度，詳細的說明可以參考官方的說明文件。在開始設定之前要知道一件事，所有的路由設定都是放在 server { } 之中，不會跑到大括號外面。listen 後面設定的數字是 R Shiny Server 佈置 Apps 的埠號，不要重複即可。","code":"sudo vim /etc/shiny-server/shiny-server.conf# 主要執行 App 為的使用者為該 App 的擁有者，沒有擁有者的 App 將由備取使用者 shiny 執行。\nrun_as :HOME_USER: shiny;\naccess_log /var/log/shiny-server/access.log tiny;\n  \nserver {\n    listen 3838;\n\n    # 110.09.21 跟明輝老師的結果是只留下 '老師' 與 '學生群組'\n    # 重新導向舊群組 /asisstuc 至學生群組 /stu\n    location /asisstuc {\n      redirect \"https://<虛擬主機 ip 位址>/shiny/stu/\" 302 true;\n    }\n    \n    location /defstu {\n      redirect \"https://<虛擬主機 ip 位址>/shiny/stu/\" 302 true;\n    }\n    \n    location /asisstuc {\n      redirect \"https://<虛擬主機 ip 位址>/shiny/stu/\" 302 true;\n    }\n    \n    location /stu {\n        user_dirs;\n        members_of stu;\n        directory_index on;\n    }\n\n    location /teacher {\n        user_dirs;\n        members_of teacher;\n        directory_index off;\n    }\n\n    # Shiny 首頁\n    location / {\n        site_dir /srv/shiny-server;\n        log_dir /var/log/shiny-server;\n        directory_index on;\n    }\n}"},{"path":"rstudio-rshiny-server.html","id":"佈置單一個-app","chapter":"章節 4 RStudio & RShiny Server","heading":"4.4.4.1 佈置單一個 App","text":"單一個 App 可以看預設首頁（如圖4.4所示）的設置，首頁的設定如下：location / 設定的是這個頁面的位置，/ 代表的是根頁面，跟網址加在一起就變成 http://<虛擬機器的 ip 位置>/shiny/ 。而 site_dir 指的是這個頁面的網頁檔案位置，/srv/shiny-server/ 的目錄結構如下：它會將 index.html 作為 / 路由（也就是首頁）的頁面。如果底下有資料夾，透過網頁的相對路徑也是進得去的。R Shiny Server 會將資料夾底下的 Shiny Apps 或是 R Markdown 佈置到對應的路由上。例如這裡有一個 sample-apps 資料夾，裏面分別有一個 Shiny App，與一個 R Markdown 檔案，路徑如下：hello 資料夾底下是一個 Shiny App，而 rmd 資料夾底下是一個 R Markdown 檔案。兩者皆可以透過首頁下的 sample-apps/ 路由存取。以 hello 的 Shiny App 為例，App 的路由為：http://<虛擬機器的 ip 位置>/shiny/sample-apps/hello。\n圖 4.5: 透過 http:///shiny/sample-apps/hello 訪問的 Shiny App\n而 directory_index 設定為 ，且該路由沒有首頁檔案（index.html）、Shiny Apps 或是 R Markdown 時，會將資料夾與檔案顯示出來。這裡同樣的以 /srv/shiny-server 底下的 /sample-apps 為例，如下圖所示：\n圖 4.6: /shiny/sample-apps 的頁面\n","code":"[...]\n\nserver {\n    [...]\n    \n    # Shiny 首頁\n    location / {\n        site_dir /srv/shiny-server;\n        log_dir /var/log/shiny-server;\n        directory_index on;\n    }\n}total 8\ndrwxr-xr-x 2 root root 4096 Jul  4 19:44 ./\ndrwxr-xr-x 3 root root 4096 May 29 10:02 ../\nlrwxrwxrwx 1 root root   38 Feb  1 03:43 index.html -> /opt/shiny-server/samples/welcome.html\nlrwxrwxrwx 1 root root   37 Feb  1 03:43 sample-apps -> /opt/shiny-server/samples/sample-apps//srv/shiny-server/sample-apps/\n├── hello\n│   ├── server.R\n│   └── ui.R\n└── rmd\n    └── index.Rmd"},{"path":"rstudio-rshiny-server.html","id":"根據使用者群組佈置-app","chapter":"章節 4 RStudio & RShiny Server","heading":"4.4.4.2 根據使用者群組佈置 App","text":"R Shiny Server 可以根據使用者群組創建對應的路由，像是規定學生只能從 /stu 存取他們自己的 Shiny App。具體設定如下：這個設定會限制使用者群組為 stu 的使用者從 http://<虛擬機器的 ip 位置>/shiny/<使用者名稱> 存取他們存放位於家目錄底下名為ShinyApps（~/ShinyApps）資料夾內的 Shiny Apps。","code":"[...]\n\nserver{\n    [...]\n    \n    # 學生頁面\n    location /stu {\n        user_dirs;\n        members_of stu;\n        directory_index on;\n    }\n}"},{"path":"rstudio-rshiny-server.html","id":"重新導向頁面","chapter":"章節 4 RStudio & RShiny Server","heading":"4.4.4.3 重新導向頁面","text":"重新導向頁面可以將舊的網址導向至新的網址，一般的設定如下：redirect 後面第一個參數是目的地網址，第二個參數是網頁重新導向的種類（301 為永久，302 為暫時），最後一個參數是否要套用完全一樣的路由，如果設為 true，路由為 /asisstuc 才會重新導向。如果設為 false ，則它的路由只要包含 /asisstuc，不管它底下才有沒有其他路由（例如：/asisstuc/08170875/example），都會重新導向至指定的網頁。這裏要先跳至Step 4 — 使用使用者測試設定是否有效先建立使用者群組後再重新啟動 R Shiny Server。因為設定檔中設有使用者群組（MCU、teacher）而沒有創建的話，重新啟動 R Shiny Server 會因為找不到該使用者群組而出現錯誤。","code":"[...]\n\nserver {\n    [...]\n    \n    # 將網址為 /asisstuc 的路由重新導向至新的網址\n    location /asisstuc {\n      redirect \"https://<虛擬主機 ip 位址>/shiny/stu/\" 302 true;\n    }\n}"},{"path":"rstudio-rshiny-server.html","id":"step-4-使用使用者測試設定是否有效","chapter":"章節 4 RStudio & RShiny Server","heading":"4.4.5 Step 4 — 使用使用者測試設定是否有效","text":"這裡會大概講一下怎麼創建使用者群組、使用者帳戶，以及在創建使用者帳戶的同時，也一起於家目錄創建 ShinyApps 資料夾。詳細的說明會於附錄的帳號管理說明。首先用下面的指令創建兩個使用者群組，分別是 stu 與 teacher。接著編輯使用指令 useradd 創建使用者時，預設的使用者設定，後續建立使用者才不會多打很多指令。/etc/default/useradd將 SHELL 的部分取消註解，並把 bash 的程式路徑填上去。只要變更這一行就好，如果不清楚路徑可以參考下面的說明。這裡的 SHELL 就是指 linux 與使用者之間的溝通方式，指定 bash 為我們使用者預設的 SHELL。如果不知道 bash 程式的位置，可以使用 指令查詢後，再來做這一步，例如：接著於 /etc/skel 的路徑創建一個叫做 ShinyApps 的資料夾。位於此路徑的所有檔案都會在創建使用者時複製一份到使用者的家目錄。創建完後，再將範例的 sample-apps 連結到模板資料夾 /etc/skel 的 ShinyApps 資料夾中。讓新創立的使用者有測試用的 Shiny App。最後再用 useradd 指令隨意創建兩個帳戶--badnames：新版的 useradd 指令新增的參數，讓不安全的使用者（例如全部都是數字的使用者）可以創建。--badnames：新版的 useradd 指令新增的參數，讓不安全的使用者（例如全部都是數字的使用者）可以創建。-N, ---user-group：預設 useradd 在創建使用者帳戶時，會根據使用者名稱再創立一個主要的使用者群組。-N, ---user-group：預設 useradd 在創建使用者帳戶時，會根據使用者名稱再創立一個主要的使用者群組。-g, --gid GROUP：直接指定使用者的主要的使用者群組。-g, --gid GROUP：直接指定使用者的主要的使用者群組。-m, --create-home：建立使用者時，順帶建立家目錄。-m, --create-home：建立使用者時，順帶建立家目錄。新增完成後，為了使剛才 R Shiny Server 的設定生效，重新啟動 R Shiny Server。最後再從剛才設定的路由進入使用者的 Shiny Apps 目錄，網址為：http://<虛擬機器 ip 位址>/shiny/stu/08170875/\n圖 4.7: Shiny Server 使用者 08170875 的 Shiny Apps\n如果輸入了 http://<虛擬機器 ip 位址>/shiny/stu 是不會出現所有使用者的，這點要注意。不過我們也可以根據這個路由，利用 site_dir 參數設計一個專屬於使用者群組 stu 的網頁。\n圖 4.8: 路由 /stu 的網頁（找不到網頁）\n","code":"sudo groupadd MCU && sudo groupadd teachersudo vim /etc/default/useradd# Default values for useradd(8)\n#\n# The SHELL variable specifies the default login shell on your\n# system.\n# Similar to DSHELL in adduser. However, we use \"sh\" here because\n# useradd is a low level utility and should be as general\n# as possible\nSHELL=/usr/bin/bashwhich bash/usr/bin/bashsudo mkdir /etc/skel/ShinyApps/sudo ln -s /srv/shiny-server/sample-apps \\\n/etc/skel/ShinyApps/examplesudo useradd --badnames -N -g stu -m 08170875sudo useradd --badnames -N -g teacher -m ms00000000sudo systemctl restart shiny-server"},{"path":"jupyterlab-on-jupyterhub.html","id":"jupyterlab-on-jupyterhub","chapter":"章節 5 JupyterLab on JupyterHub","heading":"章節 5 JupyterLab on JupyterHub","text":"本篇教學完全照著(mangecoeur et al. 2021)所寫的教學操作。旨在建立 Jupyterhub 環境。","code":""},{"path":"jupyterlab-on-jupyterhub.html","id":"事前準備-2","chapter":"章節 5 JupyterLab on JupyterHub","heading":"5.1 事前準備","text":"先確認目前的使用者 asis 擁有 sudo 的權限。","code":""},{"path":"jupyterlab-on-jupyterhub.html","id":"設置-python-3-環境","chapter":"章節 5 JupyterLab on JupyterHub","heading":"5.2 設置 Python 3 環境","text":"首先，一樣地，只要安裝套件都需要先更新套件來源。這裡我們用 && 連接兩個指令，讓更新與安裝依序執行。安裝 python3-venv ，後續建立 python 虛擬環境時會用到因為目前 Ubuntu 內建的 python 版本通常都是 python 2.X，所以我們還要再多裝一個叫做 python--python3 的套件，將 python 設為 python3 的別名，這個會使你以後呼叫 python 指令確保 python 的版本是 python 3。","code":"sudo apt update && sudo apt install python3-dev python3-pip --yessudo apt install python3-venvsudo apt install python-is-python3 --yes"},{"path":"jupyterlab-on-jupyterhub.html","id":"jupyterlab-與-jupyterhub","chapter":"章節 5 JupyterLab on JupyterHub","heading":"5.3 JupyterLab 與 JupyterHub","text":"","code":""},{"path":"jupyterlab-on-jupyterhub.html","id":"概述-4","chapter":"章節 5 JupyterLab on JupyterHub","heading":"5.3.1 概述","text":"","code":""},{"path":"jupyterlab-on-jupyterhub.html","id":"於虛擬環境中設置-jupyterlab-與-jupyterhub","chapter":"章節 5 JupyterLab on JupyterHub","heading":"5.3.2 於虛擬環境中設置 JupyterLab 與 JupyterHub","text":"","code":"sudo python3 -m venv /opt/jupyterhubsudo /opt/jupyterhub/bin/python -m pip install wheelsudo /opt/jupyterhub/bin/python -m pip install jupyterlab jupyterhubsudo /opt/jupyterhub/bin/python -m pip install ipywidgetscurl -fsSL https://deb.nodesource.com/setup_lts.x | sudo -E bash -\nsudo apt-get install -y nodejssudo npm install -g configurable-http-proxy"},{"path":"jupyterlab-on-jupyterhub.html","id":"設定-jupyterhub","chapter":"章節 5 JupyterLab on JupyterHub","heading":"5.3.3 設定 JupyterHub","text":"/opt/jupyterhub/etc/jupyterhub/jupyterhub_config.py","code":"sudo mkdir -p /opt/jupyterhub/etc/jupyterhub/cd /opt/jupyterhub/etc/jupyterhub/sudo /opt/jupyterhub/bin/jupyterhub --generate-configsudo vim jupyterhub_config.pyc.JupyterHub.bind_url = 'http://:8000/jhub'\nc.Spawner.default_url = '/lab'\nc.Authenticator.admin_users = {'asis'}\nc.Spawner.cmd = ['jupyter-labhub']\nc.Spawner.args = ['--collaborative']"},{"path":"jupyterlab-on-jupyterhub.html","id":"新增開機自動啟動-jupyterhub-的服務","chapter":"章節 5 JupyterLab on JupyterHub","heading":"5.3.4 新增開機自動啟動 JupyterHub 的服務","text":"/opt/jupyterhub/etc/systemd/jupyterhub.service","code":"sudo mkdir -p /opt/jupyterhub/etc/systemdsudo vim /opt/jupyterhub/etc/systemd/jupyterhub.service[Unit]\nDescription=JupyterHub\nAfter=syslog.target network.target\n\n[Service]\nUser=root\nEnvironment=\"PATH=/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/opt/jupyterhub/bin\"\nExecStart=/opt/jupyterhub/bin/jupyterhub -f /opt/jupyterhub/etc/jupyterhub/jupyterhub_config.py\n\n[Install]\nWantedBy=multi-user.targetsudo ln -s /opt/jupyterhub/etc/systemd/jupyterhub.service \\\n    /etc/systemd/system/jupyterhub.servicesudo systemctl daemon-reloadsudo systemctl enable jupyterhub.servicesudo systemctl start jupyterhub.servicesudo systemctl status jupyterhub.service"},{"path":"jupyterlab-on-jupyterhub.html","id":"jupyterhub-中的運算核心","chapter":"章節 5 JupyterLab on JupyterHub","heading":"5.4 JupyterHub 中的運算核心","text":"","code":""},{"path":"jupyterlab-on-jupyterhub.html","id":"conda-的-python-環境","chapter":"章節 5 JupyterLab on JupyterHub","heading":"5.4.1 Conda 的 Python🐍 環境","text":"/opt/conda/envs/environment.yml\n圖 5.1: jupyterhub 登入後的頁面\n","code":"cd ~curl https://repo.anaconda.com/pkgs/misc/gpgkeys/anaconda.asc \\\n    | gpg --dearmor > conda.gpgsudo install -o root -g root -m 644 conda.gpg /etc/apt/trusted.gpg.d/rm conda.gpgecho \\\n    \"deb [arch=amd64] https://repo.anaconda.com/pkgs/misc/debrepo/conda stable main\" \\\n    | sudo tee /etc/apt/sources.list.d/conda.listsudo apt update && sudo apt install conda --yessudo mkdir /opt/conda/envscd /opt/conda/envs/ && sudo vim environment.ymlname: python\nchannels:\n  - defaults\ndependencies:\n  - python=3.9\n  - ipykernel\n  - pip:\n    - ipython-sql\n    - PyMySQL\n    - matplotlib\n    - plotly\n    - dash\n    - pandas\nprefix: /opt/conda/envs/pythonsudo /opt/conda/bin/conda env create -f environment.ymlsudo /opt/conda/envs/python/bin/python -m \\\n    ipykernel install \\\n    --prefix=/opt/jupyterhub/ \\\n    --name 'python3' \\\n    --display-name \"Python (default)\""},{"path":"jupyterlab-on-jupyterhub.html","id":"r-環境","chapter":"章節 5 JupyterLab on JupyterHub","heading":"5.4.2 R 環境","text":"主要原因是因為，系統找不到 jupyter 指令。可以自己在終端機重現一次：找不到指令，出現了推薦安裝方式，不過這不是我們要的。這裡會用一個技巧讓系統找得到位於 /opt/jupyter/bin/jupyter 的指令。 藉由軟連結到系統的 path 變數中讓 R 找得到。\n首先先印出 PATH 變數：放置於其中一個位置就行，注意不要放置在 /home 底下，執行 R 時事使用 root 權限，用 root 權限執行時，並不會翻 /home/asis/ 底下的資料夾。 這裡我們選用 /usr/local/bin 作為軟連結放置 jupyter 執行檔。接著用 指令查詢指令是否存在：列出二進制執行檔存在位置：可以看到指令 jupyter 之所以會存在是因為軟連結至 /opt/jupyterhub/bin/jupyter 後，因為 /usr/local/bin 在變數 path 內，讓系統找得到，才可以使用這個指令。再執行一次剛開始的指令：\n圖 5.2: jupyterhub 安裝完 R 核心與預設 Python 的頁面\n","code":"sudo su - -c \"R -e \\\"install.packages('IRkernel')\\\"\"sudo su - -c \"R -e \\\"\n    IRkernel::installspec(\n        name='ir41', \n        displayname='R 4.1',\n        user=FALSE,\n        prefix='/opt/jupyterhub'\n    )\n\\\"\"Error in IRkernel::installspec(name = \"ir41\", displayname = \"R 4.1\") : \n  jupyter-client has to be installed but “jupyter kernelspec --version” exited with code 127.\nIn addition: Warning message:\nIn system2(\"jupyter\", c(\"kernelspec\", \"--version\"), FALSE, FALSE) :\n  error in running command\nExecution haltedjupyter kernelspec --versionCommand 'jupyter' not found, but can be installed with:\n\nsudo snap install jupyter       # version 1.0.0, or\nsudo apt  install jupyter-core  # version 4.6.3-3\n\nSee 'snap info jupyter' for additional versions.echo $PATH/home/asis/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/binsudo ln -s /opt/jupyterhub/bin/jupyter /usr/local/binwhich jupyterls -al $(which jupyter)lrwxrwxrwx 1 root root 27 Sep 17 16:23 /usr/local/bin/jupyter -> /opt/jupyterhub/bin/jupyter*sudo su - -c \"R -e \\\"\n    IRkernel::installspec(\n        name='ir41', \n        displayname='R 4.1',\n        user=FALSE,\n        prefix='/opt/jupyterhub'\n    )\n\\\"\"jupyter kernelspec listAvailable kernels:\n  ir41       /opt/jupyterhub/share/jupyter/kernels/ir41\n  python3    /opt/jupyterhub/share/jupyter/kernels/python3"},{"path":"jupyterlab-on-jupyterhub.html","id":"c-與-c-環境","chapter":"章節 5 JupyterLab on JupyterHub","heading":"5.4.3 C 與 C++ 環境","text":"/opt/conda/envs/c_cpp.yml/opt/conda/envs/c-cpp/share/jupyter/kernels/c/kernel.json\n圖 5.3: C 語言核心圖標，32x32\n\n圖 5.4: C 語言核心圖標，64x64\n\n圖 5.5: jupyterhub 加上了 C 與 CPP 核心的頁面\n","code":"sudo vim /opt/conda/envs/c_cpp.ymlname: c-cpp\nchannels:\n  - defaults\n  - conda-forge\ndependencies:\n  - xeus-cling\n  - python=3.*\n  - pip\n  - ipykernel\nprefix: /opt/conda/envs/c-cppsudo conda env create -f c_cpp.ymlsudo jupyter kernelspec install \\\n    /opt/conda/envs/c-cpp/share/jupyter/kernels/xcpp11 --sys-prefixsudo jupyter kernelspec install \\\n    /opt/conda/envs/c-cpp/share/jupyter/kernels/xcpp14 --sys-prefixsudo jupyter kernelspec install \\\n    /opt/conda/envs/c-cpp/share/jupyter/kernels/xcpp17 --sys-prefixsudo /opt/conda/envs/c-cpp/bin/python3.9 -m \\\n    pip install git+https://github.com/XaverKlemenschits/jupyter-c-kernel.gitsudo vim /opt/conda/envs/c-cpp/share/jupyter/kernels/c/kernel.json{\n  \"display_name\": \"C\",\n  \"argv\": [\n      \"/opt/conda/envs/c-cpp/bin/python3\",\n      \"-m\",\n      \"jupyter_c_kernel\",\n      \"-f\",\n      \"{connection_file}\"\n  ],\n  \"language\": \"C\"\n}sudo mv ~/Downloads/logo** /opt/conda/envs/c-cpp/share/jupyter/c/ls -al /opt/conda/envs/c-cpp/share/jupyter/kernels/cdrwxrwxr-x 2 root root 4096 Oct 23 17:20 ./\ndrwxrwxr-x 7 root root 4096 Oct 23 15:31 ../\n-rw-rw-r-- 1 root root  181 Oct 23 15:26 kernel.json\n-rw-r--r-- 1 root root 1536 Oct 23 17:02 logo-32x32.png\n-rw-r--r-- 1 root root 4079 Oct 23 17:02 logo-64x64.pngsudo jupyter kernelspec install /opt/conda/envs/c-cpp/share/jupyter/c --sys-prefix"},{"path":"jupyterlab-on-jupyterhub.html","id":"sas-環境","chapter":"章節 5 JupyterLab on JupyterHub","heading":"5.4.4 SAS 環境","text":"/opt/conda/envs/sas.yml/opt/conda/envs/sas/share/jupyter/kernels/sas/kernel.json","code":"sudo vim /opt/conda/envs/sas.ymlname: sas\nchannels:\n  - defaults\n  - conda-forge\n  - anaconda\ndependencies:\n  - sas_kernel\n  - python=3.*\n  - pip\n  - ipykernel\nprefix: /opt/conda/envs/sassudo conda env create -f sas.ymlsudo vim /opt/conda/envs/sas/share/jupyter/kernels/sas/kernel.json{\n    \"argv\": [\n        \"/opt/conda/envs/sas/bin/python\",\n        \"-m\",\n        \"sas_kernel\",\n        \"-f\",\n        \"{connection_file}\"\n    ],\n    \"display_name\": \"SAS\",\n    \"codemirror_mode\": \"sas\",\n    \"language\": \"sas\",\n    \"name\": \"sas\"\n}sudo cp \\\n    /opt/conda/envs/sas/lib/python3.9/site-packages/sas_kernel/data/logo-64x64.png \\\n    /opt/conda/envs/sas/share/jupyter/kernels/sas"},{"path":"jupyterlab-on-jupyterhub.html","id":"設置-apache-的反向代理","chapter":"章節 5 JupyterLab on JupyterHub","heading":"5.5 設置 Apache 的反向代理","text":"/etc/apache2/sites-available/asis.conf","code":"sudo vim /etc/apache2/sites-available/asis.conf<VirtualHost *:80>\n    [...]\n\n    ###\n    # JupyterHub Reverse Proxy\n    ###\n    RewriteCond %{HTTP:Connection} Upgrade [NC]\n    RewriteCond %{HTTP:Upgrade} websocket [NC]\n    RewriteRule /jhub/(.*) ws://127.0.0.1:8000/jhub/$1 [NE,P,L]\n    RewriteRule /jhub/(.*) http://127.0.0.1:8000/jhub/$1 [NE,P,L]\n\n    <Location \"/jhub/\">\n      # preserve Host header to avoid cross-origin problems\n      ProxyPreserveHost on\n      # proxy to JupyterHub\n      ProxyPass         http://127.0.0.1:8000/\n      ProxyPassReverse  http://127.0.0.1:8000/\n    <\/Location>\n    \n<\/VirtualHost>http://<虛擬主機的 ip 位址>/jhub"},{"path":"jupyterlab-on-jupyterhub.html","id":"jupyterhub-擴充套件","chapter":"章節 5 JupyterLab on JupyterHub","heading":"5.6 JupyterHub 擴充套件","text":"jupyterlab-drawio\nsudo /opt/jupyterhub/bin/pip install jupyterlab-drawiojupyterlab-drawiojupyterlab-git\nsudo /opt/jupyterhub/bin/pip \\\n    install --upgrade jupyterlab jupyterlab-gitjupyterlab-gitjupyterlab-variable-inspector\nsudo /opt/jupyterhub/bin/pip \\\n    install lckr_jupyterlab_variableinspector\nsudo su - -c \"R -e \\\"install.packages('repr')\\\"\"jupyterlab-variable-inspectorjupyterext-text-shortcuts\nsudo jupyter labextension install @techrah/text-shortcutsjupyterext-text-shortcutsjupyterlab-spreadsheet\nsudo jupyter labextension install jupyterlab-spreadsheetjupyterlab-spreadsheetipympl\nsudo /opt/jupyterhub/bin/pip install ipymplipympljupyter-dash (待更新，目前不能用 2021.09.18)\nsudo /opt/jupyterhub/bin/pip install jupyter-dashjupyter-dash (待更新，目前不能用 2021.09.18)jupyterlab-link-share\nsudo /opt/jupyterhub/bin/pip install jupyterlab-link-sharejupyterlab-link-sharelanguage-packs\nsudo /opt/jupyterhub/bin/pip install jupyterlab-language-pack-zh-TW\nsudo /opt/jupyterhub/bin/pip install jupyterlab-language-pack-zh-CNlanguage-packsjupyterlab-lsp\nsudo /opt/jupyterhub/bin/pip install 'jupyterlab>=3.0.0,<4.0.0a0' jupyterlab-lsp\nsudo apt install libcurl4-openssl-dev libxml2-dev --yes\nsudo su - -c \"R -e \\\"install.packages('languageserver')\\\"\"\"\nsudo /opt/jupyterhub/bin/pip install -U jedi-language-serverjupyterlab-lspnbgitpuller\nsudo /opt/jupyterhub/bin/pip install nbgitpullernbgitpuller","code":"sudo /opt/jupyterhub/bin/pip install jupyterlab-drawiosudo /opt/jupyterhub/bin/pip \\\n    install --upgrade jupyterlab jupyterlab-gitsudo /opt/jupyterhub/bin/pip \\\n    install lckr_jupyterlab_variableinspectorsudo su - -c \"R -e \\\"install.packages('repr')\\\"\"sudo jupyter labextension install @techrah/text-shortcutssudo jupyter labextension install jupyterlab-spreadsheetsudo /opt/jupyterhub/bin/pip install ipymplsudo /opt/jupyterhub/bin/pip install jupyter-dashsudo /opt/jupyterhub/bin/pip install jupyterlab-link-sharesudo /opt/jupyterhub/bin/pip install jupyterlab-language-pack-zh-TWsudo /opt/jupyterhub/bin/pip install jupyterlab-language-pack-zh-CNsudo /opt/jupyterhub/bin/pip install 'jupyterlab>=3.0.0,<4.0.0a0' jupyterlab-lspsudo apt install libcurl4-openssl-dev libxml2-dev --yessudo su - -c \"R -e \\\"install.packages('languageserver')\\\"\"\"sudo /opt/jupyterhub/bin/pip install -U jedi-language-serversudo /opt/jupyterhub/bin/pip install nbgitpullersudo systemctl restart jupyterhub.service"},{"path":"相關軟體.html","id":"相關軟體","chapter":"A 相關軟體","heading":"A 相關軟體","text":"","code":""},{"path":"相關軟體.html","id":"windows-terminal","chapter":"A 相關軟體","heading":"A.1 Windows 終端機（Windows Terminal）","text":"Windows 終端機是一個屬於 Windows 系統由微軟提供的終端機程式。可以支援像是 Windows 子系統或是提供內建的命令提示字元或 PowerShell 使用。首先至「Windows 終端機商店」頁面下載終端機\n圖 .1: 終端機商店官方介紹頁面\n接著，畫面上應該會出現一個新的視窗，點選[取得]\n圖 .2: 終端機安裝\n安裝完成後，自開始功能表搜尋「終端機」的字樣。\n圖 .3: 打開終端機\n打開終端機後我們要進行設定，將 Windows 終端機設成預設終端機的啟動程式。點擊分頁旁邊的 ᵛ 展開選單，接著點選「設定」。\n圖 .4: 打開終端機\n找到「啟動」分頁後，將預設終端應用程式調整成「Windows 終端機」並儲存。\n圖 .5: 打開終端機\n接下來只要打開命令提示字元（cmd）或是 PowerShell 都會自動以 Windows 終端機打開。","code":""},{"path":"相關軟體.html","id":"putty","chapter":"A 相關軟體","heading":"A.2 PuTTY","text":"使用 PuTTY 連線至 OpenSSH 伺服器","code":""},{"path":"相關軟體.html","id":"以-putty-產生-key","chapter":"A 相關軟體","heading":"A.2.1 以 PuTTY 產生 key","text":"另一個方法不會需要你手動安裝 OpenSSH Client，不過、一樣地，要安裝PuTTY 程式。","code":""},{"path":"相關軟體.html","id":"step-1-安裝-putty","chapter":"A 相關軟體","heading":"A.2.1.1 Step 1 — 安裝 PuTTY","text":"到開發者的網站，然後下載適合你 Windows 的版本 (副檔名為 *.msi 的安裝程式)https://www.chiark.greenend.org.uk/~sgtatham/putty/latest.html根據你的需求設定安裝程式待安裝程式安裝完成安裝完成後，點選「開始」，找到 PuTTYgen開啟，或是點選「開始」，鍵入 puttygen 後按 Enter↩︎","code":""},{"path":"相關軟體.html","id":"step-2-經由-puttygen-產生-ssh-key-pairs","chapter":"A 相關軟體","heading":"A.2.1.2 Step 2 — 經由 PuTTYgen 產生 ssh key pairs","text":"跟 OpenSSH Client 一樣地，你可以在下方的 Types 選擇你偏好的加密方式。點選「Generate」開始產生 key，此時不要傻傻地在那邊等，要在程式進度條下方空白處隨意移動你的滑鼠鼠標。完成後，可以在 Comment 的輸入框註解一下這個 key 是從哪裡來的，以後擁有多個 key pairs 時才不會搞混。當然你也可以用密碼保護這個 key pairs，如果有需要在 Key passphrase 與 Confirm passphrase 輸入一模一樣的密碼。","code":""},{"path":"相關軟體.html","id":"step-3-妥善保存好產生的-key","chapter":"A 相關軟體","heading":"A.2.1.3 Step 3 — 妥善保存好產生的 Key","text":"分別按下「Save public key」與「Save private key」找到適合的地方儲存它。","code":""},{"path":"相關軟體.html","id":"上傳-ssh-key-pairs","chapter":"A 相關軟體","heading":"A.2.2 上傳 ssh key pairs","text":"PuTTY 產生的 public key 與 private key 格式比較特別，並不能直接把 public key 裡面的文字直接貼到遠端電腦的 ~/.ssh/authorized_keys 檔案裡面，需要經由 PuTTYgen.exe 讀取 *.ppk 才能得到正確格式的 public key。首先把 PuTTYgen 程式打開。接著按「Load」把剛剛產生的 *.ppk 檔案讀取進來。會看到一行字「Public key pasting OpenSSH authorized_keys file」下面的可複製區域就是 public key，把它整段複製起來。接著打開「PowerShell」或是「命令提示字元」，輸入:將 <YOUR_PUBLIC_KEY> 替換成自己的 public key將 <YOUR_PUBLIC_KEY> 替換成自己的 public key這裡的 asis 為第一章的使用者設定的預設使用者這裡的 asis 為第一章的使用者設定的預設使用者192.168.0.13 為我虛擬主機的 ip 位址，查詢 ip 位址可以先手動登入虛擬主機後，用 hostname -或是 ip addr show 指令查詢192.168.0.13 為我虛擬主機的 ip 位址，查詢 ip 位址可以先手動登入虛擬主機後，用 hostname -或是 ip addr show 指令查詢接著按 Enter↩︎，跳出輸入密碼提示，這裡輸入預設的使用者密碼 asis輸入完成不會出現任何訊息是正常的，代表操作沒有問題且已經可以使用 PuTTY 連線了。","code":"echo \"<YOUR_PUBLIC_KEY>\" | ssh asis@192.168.0.13 \"cat >> ~/.ssh/authorized_keys\"asis@192.168.0.13's password:"},{"path":"相關軟體.html","id":"puttygen-產生的-key-pairs-的連線方式","chapter":"A 相關軟體","heading":"A.2.3 PuTTYgen 產生的 key pairs 的連線方式:","text":"SSH 連線方式大同小異:首先點選「開始」，鍵入 PuTTY 打開客戶端首先點選「開始」，鍵入 PuTTY 打開客戶端在左邊的 「Category:」 下，選取 「Session」在左邊的 「Category:」 下，選取 「Session」於 Host Name 輸入「使用者@目的地 IP」，像是「asis@192.168.0.13」\n\n你可以點選下面的「Default Settings」後，接著按「Save」會把剛剛輸入的 IP 與 Port 儲存至「Default Settings」內，當然你也可以自己取一個新的名字。\n於 Host Name 輸入「使用者@目的地 IP」，像是「asis@192.168.0.13」你可以點選下面的「Default Settings」後，接著按「Save」會把剛剛輸入的 IP 與 Port 儲存至「Default Settings」內，當然你也可以自己取一個新的名字。接著展開左邊 「Category:」 下的「Connection」 ➜ 點選「SSH」 ➜ 再點選「Auth」，於最下面的「Private key file authentication:」點選「Browse…」選取 *.ppk 檔案位置接著展開左邊 「Category:」 下的「Connection」 ➜ 點選「SSH」 ➜ 再點選「Auth」，於最下面的「Private key file authentication:」點選「Browse…」選取 *.ppk 檔案位置完成後點選「Open」連線完成後點選「Open」連線與使用 ssh 指令連線相同，都會先提醒你目的地是否正確。確認無誤按下「Accept」連接成功!","code":""},{"path":"帳號管理.html","id":"帳號管理","chapter":"B 帳號管理","heading":"B 帳號管理","text":"帳號管理分為兩個部分，一個部分是系統的帳號管理，另一個部分是 MySQL 資料庫的帳號管理。","code":""},{"path":"帳號管理.html","id":"系統帳號","chapter":"B 帳號管理","heading":"B.1 系統帳號","text":"這個小節會說明用來管理帳號的腳本的運作流程的活動圖、腳本運行，接著才是指令說明。如果要直接執行腳本請到 腳本運行 的部分。","code":""},{"path":"帳號管理.html","id":"概述-5","chapter":"B 帳號管理","heading":"B.1.1 概述","text":"本腳本（Bash Script）的活動圖，如圖 B.1 所示。一開始會根據使用者設定的選項的設定環境，接著才會進到主要方法的部分。主要方法有兩種，分別是建立帳號（create）與刪除帳號（delete），這兩個方法隨後會另外說明。\n圖 B.1: manage-users.sh\n","code":""},{"path":"帳號管理.html","id":"腳本運行","chapter":"B 帳號管理","heading":"B.1.2 腳本運行","text":"這個部分會說明怎麼執行腳本。首先先切換使用者目錄到家目錄底下的 ~/bin再來用你喜愛的編輯器在這個目錄底下新增一個叫做 manage-users.sh 的腳本（Bash Script）將藏在 ▶ 裡面的腳本內容放到腳本內後儲存\n~/bin/manage-users.sh接著使用 chmod 指令為腳本加上可執行的權限使用腳本名稱加上 -h 或是 --help 選項可以顯示使用腳本的說明哦～如果是第一次使用此腳本，可以使用 -c 選項產生範例設定這個腳本會根據所設定的系資料夾新增帳號，新增的使用者帳號的主要使用者群組是 stu，副使用者群組為 .txt 的名稱，這一點要多加注意。預設腳本產生的資料有兩個帳號，分別是屬於使用者群組 asis 的 08170875 與屬於使用者群組 eco 的 08220855。接著使用 sudo 權限建立使用者帳號這時候會預覽在檔案中發現的使用者數目，此時輸入 Yes/可以繼續或是中斷腳本，這裡選擇繼續所以輸入 Y 後按 Enter↩︎。完成後也會提示建立帳號的說明完成後可以用指令 id 確認使用者有無成功建立測試完後可以用腳本附帶的 detele 方法刪除帳號與建立帳號相同，刪除帳號一樣會有提示，這裡也是輸入 Y 後繼續刪除帳號的方法再用相同的指令確認使用者是否存在提示使用者不存在","code":"cd ~/binvim manage-users.sh#!/bin/bash\n# author: kuaz\n# created date: 2022.02.24\n# last modified: 2022.07.11\n# \n# This script is used to:\n# 1. Create user accounts from /depts/dept.txt files (one student ID per line).\n\n# 環境變數\ndepts_dir='depts'       # 放置用來建置 linux 帳號的系資料夾\n# pass_dir='passwd'       # 放置建置完成的 linux 帳號密碼的資料夾\ngp=false                # 是否產生新密碼\nnew=true                # 是否是新版的 shiny app 連結方式；如果設為 true，\n                        # 將不會使用 systemetic link 的方式連結\ndryrun=false            # 試運行；如果設為 true，將不會創立帳號\n                        # useradd 是否支援 badname\nbadname_supported=$(useradd 2>&1 | grep -q \"badname\"; echo $?)    \n\ncheck_permission() {\n    if [ ${dryrun} == true ]; then\n        :\n    else\n        if [ $(id -u) -ne 0 ]; then\n            echo \"必須以 root 權限執行此腳本！\";\n            exit 1;\n        fi\n    fi\n}\n\nuser_exists() { \n    id \"$1\" &> /dev/null \n}\n\ncheck_depts_dir() {\n    if [ -d ${depts_dir} ]; then\n        grps=\"$(ls ./${depts_dir} | grep \".txt\" | cut -d \".\" -f 1)\"\n        for grp in ${grps}\n        do\n            # https://stackoverflow.com/questions/28038633/wc-l-is-not-counting-last-of-the-file-if-it-does-not-have-end-of-line-character\n            count=$(awk 'END{print NR}' ./${depts_dir}/${grp}.txt)\n            file=$(realpath ./${depts_dir}/${grp}.txt)\n            if [ $count -lt 1 ]; then\n                echo \"請再檢查一次 ${depts_dir} 內是否含有正確格式的學號檔案！\"\n                echo \"有問題的檔案: $file\"\n                exit 1\n            else\n                echo \"於 $file 發現了 $count 個學生\"\n            fi\n        done\n    else\n        echo \"系資料夾 ${depts_dir} 不存在！請先手動創建或是由選項 -c, --generate-configuration 建立。\"\n        exit 1;\n    fi\n}\n\n# create_pass_dir() {\n#     if [ ! -d ${pass_dir} ]; then\n#         echo \"存放密碼的 ${pass_dir} 資料夾不存在，將建立 ${pass_dir} 資料夾\"\n#         mkdir ${pass_dir}\n#     else\n#         read -p \"存放密碼的 ${pass_dir} 資料夾已存在！是否要將其移除後繼續建立帳號? (yes/No)\" yn\n#         case $yn in\n#             [Yy]* ) \n#                 rm -rf ${pass_dir}\n#                 make_pass_dir\n#             ;;\n#             [Nn]* ) exit 1;;\n#         esac\n#     fi\n# }\n\ncreate_users() {\n    # 如果有產生密碼的需求\n    # if [ ${gp} = true ]; then\n    #     create_pass_dir\n    # fi\n\n    for grp in ${grps}\n    do\n        # 確認使用者群組是否存在，如果不存在將自動建立\n        if $(grep -q \"^${grp}:\" /etc/group); then\n            :\n        else\n            # 非試運行\n            if [ ${dryrun} = false ]; then\n                groupadd ${grp}\n            fi\n            echo \"已建立 ${grp} 使用者群組\"\n        fi\n    done\n\n    for grp in ${grps}\n    do \n        # 使用舊方法連結 ShinyApps\n        if [ ${new} = false ] && [ ! -d /srv/shiny-server/${grp} ]; then\n            echo \"/srv/shiny-server/${grp} 資料夾不存在，將建立群組資料夾\"\n            # 非試運行\n            if [ ${dryrun} = false ]; then\n                mkdir /srv/shiny-server/${grp}\n            fi\n        fi\n\n        created=0\n        skip=0\n\n        # 逐行讀取學號\n        while IFS= read -r stu || [ -n \"$stu\" ];\n        do\n            cur_user=${stu}\n\n            if user_exists \"${cur_user}\"; then\n                (( skip += 1 ))\n            \n            elif [ ${dryrun} = false ]; then\n                # 如果不支援 badname\n                if [ ${badname_supported} == false ]; then\n                    useradd -N -g stu -G ${grp} -m ${cur_user}\n                else\n                    useradd --badnames -N -g stu -G ${grp} -m ${cur_user}\n                fi\n\n                # 產生隨機密碼\n                # if [ ${gp} = false ]; then\n                cur_user_password=${cur_user}\n                # else\n                #     cur_user_password=$(openssl rand -base64 6)\n                # fi\n                \n                # 以 root 權限創立使用者帳號，並設定密碼\n                echo \"${cur_user}:${cur_user_password}\" | chpasswd\n\n                # 將設定的帳號密碼儲存一份到資料夾中\n                # echo \"${cur_user},${cur_user_password}\"| tee -a ./${pass_dir}/${grp}.csv > /dev/null 2>&1\n\n                # 將 ShinyApp 軟連結至使用者資料夾\n                if [ ${new} = false ]; then\n                    # 需要先在 /etc/skel/ 建立 ShinyApps 資料夾，才可成功連結\n                    ln -s /home/${cur_user}/ShinyApps /srv/shiny-server/${grp}/${cur_user}\n                fi\n\n                (( created += 1 ))\n            else\n                # 如果為試運行模式\n                (( created += 1 ))\n            fi\n\n        done < ./${depts_dir}/${grp}.txt\n\n        echo \"成功從群組 ${grp} 建立了 ${created} 個帳號，忽略了 ${skip} 個已存在帳號。\"\n    done\n}\n\ndelete_users() {\n    for grp in ${grps}\n    do \n        skip=0\n        deleted=0\n        while IFS= read -r stu || [ -n \"$stu\" ];\n        do\n            cur_user=${stu}\n            if user_exists \"${cur_user}\"; then\n                userdel -r ${cur_user} > /dev/null 2>&1\n                if [ ${new} = false ]; then\n                    rm -rf /srv/shiny-server/${grp}/${stu}\n                fi\n                (( deleted += 1 ))\n            else\n                (( skip += 1 ))\n            fi\n        done < ./${depts_dir}/${grp}.txt\n        echo \"成功從群組 ${grp} 移除了 ${deleted} 個帳號，其中共有 ${skip} 個帳號不存在。\"\n    done\n    # read -p \"使用者已移除，是否要順便移除存放密碼的資料夾 ${pass_dir}? (yes/No)\" yn\n\n    # case $yn in\n    #     [Yy]* ) \n    #         rm -rf ${pass_dir}\n    #     ;;\n    #     [No]* ) exit 0;;\n    # esac\n}\n\ncreate_prompt() {\n    read -p \"即將建立使用者帳戶，確認使用者資料是否無誤?（Yes/No）\" yn\n    echo \n\n    case $yn in\n        [Yy]* ) create_users;;\n        [Nn]* ) exit 0;;\n    esac\n}\n\ndelete_prompt() {\n    read -p \"即將 '刪除' 使用者帳戶，於 /home/<使用者> 的資料將會消失，是否執行?（Yes/No）\" yn\n    case $yn in\n        [Yy]* ) delete_users;;\n        [Nn]* ) exit 0;;\n    esac\n}\n\ngenerate_configuration() {\n    if [ -d ${depts_dir} ]; then\n        echo \"資料夾已存在！請先刪除 ${depts_dir} 資料夾\"\n    else\n        mkdir ${depts_dir}\n        touch ${depts_dir}/asis.txt\n        touch ${depts_dir}/eco.txt\n        echo 08170875 > ${depts_dir}/asis.txt\n        echo 08220855 > ${depts_dir}/eco.txt\n        echo \"設定檔案建立完成\"\n    fi\n    exit 0;\n}\n\ndisplay_help() {\n    cat << EOF\n使用方法: $0 [ 選項... ] < create | delete >\n\n選項: \n    -h, --help                      產生此說明文字\n    -d, --dry-run                   試運行腳本，不實際執行\n    -c, --generate-configuration    產生範例設定\n    -o, --old-shiny-server          ShinyApps 將使用軟連結的方式連結（不推薦）\nEOF\n}\n\nwhile :\ndo\n    case \"$1\" in\n        -h | --help)\n            display_help\n            exit 0\n        ;;\n        -d | --dry-run)\n            dryrun=true\n            shift 1\n            break\n        ;;\n        # -p | --generate-password)\n        #     gp=true\n        #     shift 1\n        #     break\n        # ;;\n        -c | --generate-configuration)\n            generate_configuration\n            exit 0\n        ;;\n        -o | --old-shiny-server)\n            new=false\n            shift 1\n            break\n        ;;\n        -*)\n            echo \"錯誤：未知的選項：$1\"\n            display_help\n            exit 1\n        ;;\n        *)\n            break\n        ;;\n    esac\ndone\n\ncase \"$1\" in\n    create)\n        check_permission\n        check_depts_dir\n        create_prompt\n    ;;\n    delete)\n        check_permission\n        check_depts_dir\n        delete_prompt\n    ;;\n    *)\n        echo \"錯誤，請參考下列指令說明：\"\n        echo \n        display_help\n        exit 1\n    ;;\nesacchmod +x manage-users.sh./manage-users.sh --help使用方法: ./manage-users.sh [選項...] <create | delete>\n\n選項:\n    -h, --help                      產生此說明文字\n    -d, --dry-run                   試運行腳本，不實際執行\n    -c, --generate-configuration    產生範例設定\n    -o, --old-shiny-server          ShinyApps 將使用軟連結的方式連結（不推薦）./manage-users.sh -c├── depts\n│   ├── asis.txt\n│   └── eco.txt\n└── manage-users.shsudo ./manage-users.sh create於 /home/kuaz/Downloads/depts/asis.txt 發現了 1 個學生\n於 /home/kuaz/Downloads/depts/eco.txt 發現了 1 個學生\n即將建立使用者帳戶，確認使用者資料是否無誤?（Yes/No）成功從群組 asis 建立了 1 個帳號，忽略了 0 個已存在帳號。\n成功從群組 eco 建立了 1 個帳號，忽略了 0 個已存在帳號。id 08170875; id 08220855uid=1026(08170875) gid=1006(stu) groups=1006(stu),1007(asis)\nuid=1027(08220855) gid=1006(stu) groups=1006(stu),1005(eco)sudo ./manage-users.sh delete於 /home/kuaz/Downloads/depts/asis.txt 發現了 1 個學生\n於 /home/kuaz/Downloads/depts/eco.txt 發現了 1 個學生\n即將 '刪除' 使用者帳戶，於 /home/<使用者> 的資料將會消失，是否執行?（Yes/No）成功從群組 asis 移除了 1 個帳號，其中共有 0 個帳號不存在。\n成功從群組 eco 移除了 1 個帳號，其中共有 0 個帳號不存在。id 08170875; id 08220855id: ‘08170875’: no such user\nid: ‘08220855’: no such user"},{"path":"帳號管理.html","id":"指令說明","chapter":"B 帳號管理","heading":"B.1.3 指令說明","text":"","code":""},{"path":"帳號管理.html","id":"讀取選項的迴圈","chapter":"B 帳號管理","heading":"B.1.3.1 讀取選項的迴圈","text":"首先是第一個迴圈，第一個迴圈是檢查選項用的，這裡使用的是 Bash Script 的 Case 語法（類似 Switch 的概念）。首先 : 的意思在 Bash Script 裡面就是 true 的意思。而 -done 是接續 的語句。接著會碰到 $1，$1 代表的是指令以空白區隔，第一個位置的參數在 Bash Script 裡面就會被設為 $1，例如：所以這裡的 $1 就代表著第一個參數位置，-c。所以當腳本碰到 - 開頭的選項時，就會落到 Case 的 Pattern 裡面去匹配選項。那為什麼腳本丟到 Case 裡面的變數一直都是 $1 也可以跑？是因為搭配了 shift 1 指令，當腳本碰到 shift 1，它會將 $1 丟棄，$2 遞補上來變為 $1，直到遇到其他終止的條件，像是 break 或是 exit。","code":"while :\ndo\n    case \"$1\" in\n        -h | --help)\n            display_help\n            exit 0\n        ;;\n        -d | --dry-run)\n            dryrun=true\n            shift 1\n            break\n        ;;\n        # -p | --generate-password)\n        #     gp=true\n        #     shift 1\n        #     break\n        # ;;\n        -c | --generate-configuration)\n            generate_configuration\n            exit 0\n        ;;\n        -o | --old-shiny-server)\n            new=false\n            shift 1\n            break\n        ;;\n        -*)\n            echo \"錯誤：未知的選項：$1\"\n            display_help\n            exit 1\n        ;;\n        *)\n            break\n        ;;\n    esac\ndone./manage-users.sh -c"},{"path":"帳號管理.html","id":"讀取方法的-switch-case","chapter":"B 帳號管理","heading":"B.1.3.2 讀取方法的 Switch Case","text":"一樣的，這裡會用到相同的 Switch Case 概念，假如上一個迴圈被 break 終止後，且 $1 被包含在 Switch Case 的選項中就會觸發對應的方法。這裡我針對 create 與 delete 設定了不同的方法。建立使用者會依序呼叫 3 個方法，分別是 check_permission（檢查權限是否為 root）、check_depts_dir（檢查系資料夾是否符合規範）最後才是 create_prompt （建立使用者提示）。","code":"case \"$1\" in\n    create)\n        check_permission\n        check_depts_dir\n        create_prompt\n    ;;\n    delete)\n        check_permission\n        check_depts_dir\n        delete_prompt\n    ;;\n    *)\n        echo \"錯誤，請參考下列指令說明：\"\n        echo \n        display_help\n        exit 1\n    ;;\nesac"},{"path":"帳號管理.html","id":"建立使用者","chapter":"B 帳號管理","heading":"B.1.3.3 建立使用者","text":"建立使用者的流程如下圖，圖 B.2 活動圖所示：\n圖 B.2: 建立使用者\n這裡用到非常多的 判斷環境，所以本腳本還有很多改善的空間。","code":""},{"path":"帳號管理.html","id":"檢查權限check_permission方法","chapter":"B 帳號管理","heading":"B.1.3.3.1 檢查權限（check_permission）方法：","text":"這段程式碼做了：第 1 行，方法名稱第 1 行，方法名稱第 2 行，檢查變數 dryrun（試運行）是否為 true。如果試運行選項有設定時，會直接略過這個 語句。第 2 行，檢查變數 dryrun（試運行）是否為 true。如果試運行選項有設定時，會直接略過這個 語句。第 3 行，: 在腳本中代表的是 true 的別名，因為 與句不能為空，所以這裡放一個 :。詳細說明可以參考這裡第 3 行，: 在腳本中代表的是 true 的別名，因為 與句不能為空，所以這裡放一個 :。詳細說明可以參考這裡第 5 行，檢查當前的使用者編號是否為 0，這裡的 0 是代表 root。第 5 行，檢查當前的使用者編號是否為 0，這裡的 0 是代表 root。第 6 行，輸出訊息第 6 行，輸出訊息第 7 行，結束程式，錯誤代碼為 1第 7 行，結束程式，錯誤代碼為 1","code":"check_permission() {\n    if [ ${dryrun} == true ]; then\n        :\n    else\n        if [ $(id -u) -ne 0 ]; then\n            echo \"必須以 root 權限執行此腳本！\";\n            exit 1;\n        fi\n    fi\n}"},{"path":"帳號管理.html","id":"檢查系資料夾是否符合規範check_depts_dir","chapter":"B 帳號管理","heading":"B.1.3.3.2 檢查系資料夾是否符合規範（check_depts_dir）","text":"這段程式碼做了：第 1 行，方法名稱第 1 行，方法名稱第 2 行，檢查資料夾 depts 是否存在第 2 行，檢查資料夾 depts 是否存在第 3 行，ls 會列出於 depts 資料夾中所有的檔案，| 會將前一個指令的結果傳到下一個指令裡面，grep \".txt\" 會抓出含有 .txt 的檔案，接著最後的 cut -d \".\" -f 1 會將資料以 . 作為分隔符號切割，取出第一個結果。例如資料夾中有著三個 .txt 的檔案，asis.txt、eco.txt與 fin.txt，最後輸出的結果為：asis、eco 與 fin。第 3 行，ls 會列出於 depts 資料夾中所有的檔案，| 會將前一個指令的結果傳到下一個指令裡面，grep \".txt\" 會抓出含有 .txt 的檔案，接著最後的 cut -d \".\" -f 1 會將資料以 . 作為分隔符號切割，取出第一個結果。例如資料夾中有著三個 .txt 的檔案，asis.txt、eco.txt與 fin.txt，最後輸出的結果為：asis、eco 與 fin。第 4-5 行，將前一個結果放到 迴圈中。第 4-5 行，將前一個結果放到 迴圈中。第 6 行，awk 是一種文字處理工具，這裡的功用是計算系資料中的檔案有幾列（不包含空行），估算要建立的使用者數目。第 6 行，awk 是一種文字處理工具，這裡的功用是計算系資料中的檔案有幾列（不包含空行），估算要建立的使用者數目。第 7 行，realpath 會將檔案完整的路進印出來，並儲存在變數 file 中第 7 行，realpath 會將檔案完整的路進印出來，並儲存在變數 file 中第 8 行，語句，如果數量少於 1第 8 行，語句，如果數量少於 1第 9-11 行，輸出訊息並中止第 9-11 行，輸出訊息並中止第 13 行，輸出訊息第 13 行，輸出訊息第 17-18 行，輸出訊息並中止第 17-18 行，輸出訊息並中止","code":"check_depts_dir() {\n    if [ -d ${depts_dir} ]; then\n        grps=\"$(ls ./${depts_dir} | grep \".txt\" | cut -d \".\" -f 1)\"\n        for grp in ${grps}\n        do\n            count=$(awk 'END{print NR}' ./${depts_dir}/${grp}.txt)\n            file=$(realpath ./${depts_dir}/${grp}.txt)\n            if [ $count -lt 1 ]; then\n                echo \"請再檢查一次 ${depts_dir} 內是否含有正確格式的學號檔案！\"\n                echo \"有問題的檔案: $file\"\n                exit 1\n            else\n                echo \"於 $file 發現了 $count 個學生\"\n            fi\n        done\n    else\n        echo \"系資料夾 ${depts_dir} 不存在！請先手動創建或是由選項 -c, --generate-configuration 建立。\"\n        exit 1;\n    fi\n}"},{"path":"帳號管理.html","id":"建立使用者提示create_prompt","chapter":"B 帳號管理","heading":"B.1.3.3.3 建立使用者提示（create_prompt）","text":"這段程式碼做了：第 1 行，方法名稱第 1 行，方法名稱第 2 行，讀取使用者輸入，並儲存到變數 yn 中第 2 行，讀取使用者輸入，並儲存到變數 yn 中第 5 行，Switch Case 語句第 5 行，Switch Case 語句第 6 行，當第一個字母為 Y 或是 y 會落到此語句，並執行 create_users 方法第 6 行，當第一個字母為 Y 或是 y 會落到此語句，並執行 create_users 方法第 7 行，當第一個字母為 N 或是 n 會落到此語句，直接退出程式第 7 行，當第一個字母為 N 或是 n 會落到此語句，直接退出程式","code":"create_prompt() {\n    read -p \"即將建立使用者帳戶，確認使用者資料是否無誤?（Yes/No）\" yn\n    echo \n\n    case $yn in\n        [Yy]* ) create_users;;\n        [Nn]* ) exit 0;;\n    esac\n}"},{"path":"帳號管理.html","id":"建立使用者create_users","chapter":"B 帳號管理","heading":"B.1.3.3.4 建立使用者（create_users）","text":"這段程式碼做了：第 1 行，方法名稱第 1 行，方法名稱第 7 行，根據 check_depts_dir 產生的變數 grps 做 迴圈第 7 行，根據 check_depts_dir 產生的變數 grps 做 迴圈第 10 行，檢查當前 迴圈群組使否存在第 10 行，檢查當前 迴圈群組使否存在第 11 行，: 在腳本中代表的是 true 的別名，因為 與句不能為空，所以這裡放一個 :。詳細說明可以參考這裡第 11 行，: 在腳本中代表的是 true 的別名，因為 與句不能為空，所以這裡放一個 :。詳細說明可以參考這裡第 14 行，檢查 dryrun（試運行）變數第 14 行，檢查 dryrun（試運行）變數第 15 行，新增使用者群組第 15 行，新增使用者群組第 21 行，根據 check_depts_dir 產生的變數 grps 做 迴圈第 21 行，根據 check_depts_dir 產生的變數 grps 做 迴圈第 24 行，檢查 new（是否使用新方法創建 ShinyApps 資料夾）與 /srv/shiny-server/群組名稱第 24 行，檢查 new（是否使用新方法創建 ShinyApps 資料夾）與 /srv/shiny-server/群組名稱第 25 行，輸出訊息第 25 行，輸出訊息第 27 行，檢查 dryrun（試運行）變數第 27 行，檢查 dryrun（試運行）變數第 28 行，建立使用者群組第 28 行，建立使用者群組第 32-33 行，初始化變數，created 用來計算成功建立的使用者，skip 是用來計算已經存在的使用者。第 32-33 行，初始化變數，created 用來計算成功建立的使用者，skip 是用來計算已經存在的使用者。第 36-37、76 行，逐行讀入指定的檔案，< ./${depts_dir}/${grp}.txt，這裡會逐行讀入係檔案的學號，每行代表一個要建立的使用者，並儲存到 stu 變數中。\nIFS= read -r stu || [ -n \"$stu\" ];\n\n    [ 省略... ]\ndone < ./${depts_dir}/${grp}.txt第 36-37、76 行，逐行讀入指定的檔案，< ./${depts_dir}/${grp}.txt，這裡會逐行讀入係檔案的學號，每行代表一個要建立的使用者，並儲存到 stu 變數中。第 38 行，複製一個 stu 變數儲存到 cur_stu 變數中第 38 行，複製一個 stu 變數儲存到 cur_stu 變數中第 40 行，用方法 user_exists 判斷使用者是否存在，隨後的是方法是輸入變數第 40 行，用方法 user_exists 判斷使用者是否存在，隨後的是方法是輸入變數第 41 行，變數 skip 加 1第 41 行，變數 skip 加 1第 43 行，檢查 dryrun（試運行）變數第 43 行，檢查 dryrun（試運行）變數第 45 行，檢查 badname_supported 變數第 45 行，檢查 badname_supported 變數第 46 行，使用 useradd 指令建立使用者，參數說明如下：\n-N, ---user-group：不建立使用者的個人使用者群組，須與 -g 同時使用\n-g, --gid 群組：指定使用者的主要群組\n-G, --groups 群組1[, 群組2, ...[,群組N]]：指定使用者的副群組\n-m, --create-home：建立使用者的家目錄\n第 46 行，使用 useradd 指令建立使用者，參數說明如下：-N, ---user-group：不建立使用者的個人使用者群組，須與 -g 同時使用-N, ---user-group：不建立使用者的個人使用者群組，須與 -g 同時使用-g, --gid 群組：指定使用者的主要群組-g, --gid 群組：指定使用者的主要群組-G, --groups 群組1[, 群組2, ...[,群組N]]：指定使用者的副群組-G, --groups 群組1[, 群組2, ...[,群組N]]：指定使用者的副群組-m, --create-home：建立使用者的家目錄-m, --create-home：建立使用者的家目錄第 48 行，多了 --badnames 選項，為了使不安全命名方式的使用者成功建立，例如數字開頭的使用者。第 48 行，多了 --badnames 選項，為了使不安全命名方式的使用者成功建立，例如數字開頭的使用者。第 53 行，設定 cur_user_password（使用者密碼）變數為 cur_user（目前的使用者）變數第 53 行，設定 cur_user_password（使用者密碼）變數為 cur_user（目前的使用者）變數第 59 行，使用 chpasswd 變更 cur_user（目前的使用者）的使用者密碼第 59 行，使用 chpasswd 變更 cur_user（目前的使用者）的使用者密碼第 65 行，檢查 new（是否使用新方法創建 ShinyApps 資料夾）第 65 行，檢查 new（是否使用新方法創建 ShinyApps 資料夾）第 67 行，將 ShinyApp 軟連結至使用者資料夾第 67 行，將 ShinyApp 軟連結至使用者資料夾第 70、73 行，變數 created 加 1第 70、73 行，變數 created 加 1第 78 行，輸出訊息第 78 行，輸出訊息","code":"create_users() {\n    # 如果有產生密碼的需求\n    # if [ ${gp} = true ]; then\n    #     create_pass_dir\n    # fi\n\n    for grp in ${grps}\n    do\n        # 確認使用者群組是否存在，如果不存在將自動建立\n        if $(grep -q \"^${grp}:\" /etc/group); then\n            :\n        else\n            # 非試運行\n            if [ ${dryrun} = false ]; then\n                groupadd ${grp}\n            fi\n            echo \"已建立 ${grp} 使用者群組\"\n        fi\n    done\n\n    for grp in ${grps}\n    do \n        # 使用舊方法連結 ShinyApps\n        if [ ${new} = false ] && [ ! -d /srv/shiny-server/${grp} ]; then\n            echo \"/srv/shiny-server/${grp} 資料夾不存在，將建立群組資料夾\"\n            # 非試運行\n            if [ ${dryrun} = false ]; then\n                mkdir /srv/shiny-server/${grp}\n            fi\n        fi\n\n        created=0\n        skip=0\n\n        # 逐行讀取學號\n        while IFS= read -r stu || [ -n \"$stu\" ];\n        do\n            cur_user=${stu}\n\n            if user_exists \"${cur_user}\"; then\n                (( skip += 1 ))\n            \n            elif [ ${dryrun} = false ]; then\n                # 如果不支援 badname\n                if [ ${badname_supported} == false ]; then\n                    useradd -N -g stu -G ${grp} -m ${cur_user}\n                else\n                    useradd --badnames -N -g stu -G ${grp} -m ${cur_user}\n                fi\n\n                # 產生隨機密碼\n                # if [ ${gp} = false ]; then\n                cur_user_password=${cur_user}\n                # else\n                #     cur_user_password=$(openssl rand -base64 6)\n                # fi\n                \n                # 以 root 權限創立使用者帳號，並設定密碼\n                echo \"${cur_user}:${cur_user_password}\" | chpasswd\n\n                # 將設定的帳號密碼儲存一份到資料夾中\n                # echo \"${cur_user},${cur_user_password}\"| tee -a ./${pass_dir}/${grp}.csv > /dev/null 2>&1\n\n                # 將 ShinyApp 軟連結至使用者資料夾\n                if [ ${new} = false ]; then\n                    # 需要先在 /etc/skel/ 建立 ShinyApps 資料夾，才可成功連結\n                    ln -s /home/${cur_user}/ShinyApps /srv/shiny-server/${grp}/${cur_user}\n                fi\n\n                (( created += 1 ))\n            else\n                # 如果為試運行模式\n                (( created += 1 ))\n            fi\n\n        done < ./${depts_dir}/${grp}.txt\n\n        echo \"成功從群組 ${grp} 建立了 ${created} 個帳號，忽略了 ${skip} 個已存在帳號。\"\n    done\n}while IFS= read -r stu || [ -n \"$stu\" ];\ndo\n    [ 省略... ]\ndone < ./${depts_dir}/${grp}.txt"},{"path":"其他.html","id":"其他","chapter":"C 其他","heading":"C 其他","text":"","code":""},{"path":"其他.html","id":"更改預設的文本編輯器","chapter":"C 其他","heading":"C.1 更改預設的文本編輯器","text":"這個指令可以變更系統編輯文件所用的程式按了 Enter↩︎ 之後，會出現現在可用的編輯器，輸入對應的編號即可變更。有標 * 號的編輯器為目前設定的預設編輯器。","code":"sudo update-alternatives --config editorThere are 4 choices for the alternative editor (providing /usr/bin/editor).\n\n  Selection    Path                Priority   Status\n------------------------------------------------------------\n  0            /bin/nano            40        auto mode\n  1            /bin/ed             -100       manual mode\n  2            /bin/nano            40        manual mode\n* 3            /usr/bin/vim.basic   30        manual mode\n  4            /usr/bin/vim.tiny    15        manual mode\n\nPress <enter> to keep the current choice[*], or type selection number: 3"},{"path":"其他.html","id":"關於套件版本","chapter":"C 其他","heading":"C.2 關於套件版本","text":"","code":""},{"path":"其他.html","id":"step-1-安裝-php-php-mysql-插件","chapter":"C 其他","heading":"C.2.1 Step 1 — 安裝 php & php-mysql 插件","text":"先確認 php 是不是我們要安裝的版本可以看到，目前 php 的依賴套件是 php7.4，代表將安裝的版本為 php7.4接著，我們再查詢一次 php7.4 會安裝什麼東西這裡可以看到 php7.4 安裝了會安裝一些使 php7.4 順利運作的依賴套件，像是 libapache2-mod-php7.4、php7.4-fpm、php7.4-cgi 與 php7.4-common一樣地，這裡也用相同的指令查詢 php-mysql 套件因為 php 已經有 php-common 依賴的，所以待會兩個套件一起安裝時，只會安裝一個 php-common確認完我們要安裝的版本是否正確後，用套件管理程式 apt 安裝套件。確認 php 是否安裝完成，可以用 指令確認：當系統中有安裝複數個版本的 php 時，php 執行檔的位置可能會有所不同。同樣地在第 5 章設置 Python 3 環境時也會遇到。","code":"sudo apt info phpPackage: php\nVersion: 2:7.4+75\nPriority: optional\nSection: php\nSource: php-defaults (75)\nOrigin: Ubuntu\nMaintainer: Ubuntu Developers <ubuntu-devel-discuss@lists.ubuntu.com>\nOriginal-Maintainer: Debian PHP Maintainers <team+pkg-php@tracker.debian.org>\nBugs: https://bugs.launchpad.net/ubuntu/+filebug\nInstalled-Size: 13.3 kB\nDepends: php7.4\nDownload-Size: 2,712 B\nAPT-Sources: http://tw.archive.ubuntu.com/ubuntu focal/main amd64 Packages\nDescription: server-side, HTML-embedded scripting language (default)\n PHP (recursive acronym for PHP: Hypertext Preprocessor) is a widely-used\n open source general-purpose scripting language that is especially suited\n for web development and can be embedded into HTML.\n .\n This package is a dependency package, which depends on latest stable\n PHP version (currently 7.4).sudo apt info php7.4Package: php7.4\nVersion: 7.4.3-4ubuntu2.5\nPriority: optional\nSection: php\nOrigin: Ubuntu\nMaintainer: Ubuntu Developers <ubuntu-devel-discuss@lists.ubuntu.com>\nOriginal-Maintainer: Debian PHP Maintainers <team+pkg-php@tracker.debian.org>\nBugs: https://bugs.launchpad.net/ubuntu/+filebug\nInstalled-Size: 73.7 kB\nProvides: php\nDepends: libapache2-mod-php7.4 | php7.4-fpm | php7.4-cgi, php7.4-common\nHomepage: http://www.php.net/\nDownload-Size: 9,244 B\nAPT-Sources: http://tw.archive.ubuntu.com/ubuntu focal-updates/main amd64 Packages\nDescription: server-side, HTML-embedded scripting language (metapackage)\n This package is a metapackage that, when installed, guarantees that you\n have at least one of the four server-side versions of the PHP interpreter\n installed. Removing this package won't remove PHP from your system, however\n it may remove other packages that depend on this one.\n .\n PHP (recursive acronym for PHP: Hypertext Preprocessor) is a widely-used\n open source general-purpose scripting language that is especially suited\n for web development and can be embedded into HTML.sudo apt info php-mysqlPackage: php-mysql\nVersion: 2:7.4+75\nPriority: optional\nSection: php\nSource: php-defaults (75)\nOrigin: Ubuntu\nMaintainer: Ubuntu Developers <ubuntu-devel-discuss@lists.ubuntu.com>\nOriginal-Maintainer: Debian PHP Maintainers <team+pkg-php@tracker.debian.org>\nBugs: https://bugs.launchpad.net/ubuntu/+filebug\nInstalled-Size: 13.3 kB\nDepends: php-common, php7.4-mysql\nTask: lamp-server\nDownload-Size: 2,000 B\nAPT-Sources: http://tw.archive.ubuntu.com/ubuntu focal/main amd64 Packages\nDescription: MySQL module for PHP [default]\n This package provides a MySQL module for PHP.\n .\n PHP (recursive acronym for PHP: Hypertext Preprocessor) is a widely-used\n open source general-purpose scripting language that is especially suited\n for web development and can be embedded into HTML.\n .\n This package is a dependency package, which depends on Debian's default\n PHP version (currently 7.4).sudo apt install php php-mysql --yeswhich php"},{"path":"其他.html","id":"mysql-8.0-root-密碼重設","chapter":"C 其他","heading":"C.3 Mysql 8.0 root 密碼重設","text":"先建立一個含有改變 root 密碼的 sql 語法文字檔案如存好後將擁有者與使用者群組改成 mysql 後，移至 /tmp 資料夾，使 mysql 使用者可以存取。切換至 root 使用者進行後續操作將目前的 mysql 關閉或是使用 systemctl 指令關閉 mysql 服務{.bash prefixed} systemctl stop mysql.service接著使用 mysqld 指令啟動 mysql 並指定 --user、--defaults-file 與 --init-file 參數。--defaults-file: MySQL 預設啟動的設定檔案--defaults-file: MySQL 預設啟動的設定檔案--user: 以使用者 mysql 執行--user: 以使用者 mysql 執行--init-file: 初始化時，執行 /tmp/mysql-init 指令，變更密碼--init-file: 初始化時，執行 /tmp/mysql-init 指令，變更密碼&: 將 mysql deamon 放至背景執行。&: 將 mysql deamon 放至背景執行。此時，應該可以正常登入了。如果不行的話，請檢查位於 /var/log/mysql/error.log 的錯誤紀錄，如果有看到類似 /var/run/mysqld 的錯誤，需要手動建立資料夾，並把權限變更為 mysql 用戶的權限。 操作完之後再從關閉 mysql 服務開始，再嘗試一次。參考指令如下：最後以正常的服務啟動 mysql：退出 root 帳號試以新密碼登入 mysql root 帳號：成功 🎊","code":"vim mysql-initALTER USER 'root'@'localhost' IDENTIFIED with caching_sha2_password by '<新的 root 密碼>';chown mysql.mysql mysql-init && mv mysql-init /tmpsudo su -killall -9 mysqldmysqld --defaults-file=/etc/mysql/mysql.conf.d/mysqld.cnf \\ \n--user=mysql \\ \n--init-file=/tmp/mysql-init &mkdir /var/run/mysqld && chown mysql.mysql /var/run/mysqldsystemctl restart mysql.serviceexitmysql -u root -pWelcome to the MySQL monitor.  Commands end with ; or \\g.\nYour MySQL connection id is 17\nServer version: 8.0.26-0ubuntu0.20.04.3 (Ubuntu)\n\nCopyright (c) 2000, 2021, Oracle and/or its affiliates.\n\nOracle is a registered trademark of Oracle Corporation and/or its\naffiliates. Other names may be trademarks of their respective\nowners.\n\nType 'help;' or '\\h' for help. Type '\\c' to clear the current input statement.\n\nmysql> "},{"path":"參考資料.html","id":"參考資料","chapter":"參考資料","heading":"參考資料","text":"","code":""}]
